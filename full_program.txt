from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import os
import pandas as pd
from io import BytesIO
from flask_babel import Babel
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify
from flask import jsonify
import openpyxl
import shutil
import time
import glob

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your_secret_key')

# Babel setup for multi-language support
babel = Babel(app)

# UPLOAD FOLDER for file uploads
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Allowed file extensions
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

# Database setup
def init_db():
    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             name TEXT NOT NULL,
                             username TEXT NOT NULL UNIQUE,
                             password TEXT NOT NULL,
                             role TEXT NOT NULL)''')
            admin_password = generate_password_hash('12345', method='pbkdf2:sha256')
            conn.execute('''INSERT OR IGNORE INTO users (name, username, password, role)
                            VALUES ('Admin', 'Admin', ?, 'admin')''', (admin_password,))
            conn.commit()
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

    try:
        with sqlite3.connect('documents.db') as conn:
            # Create CTO Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS cto_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL   
            )''')

            # Create a table for recommended applications
            conn.execute('''CREATE TABLE IF NOT EXISTS recommended_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_id INTEGER NOT NULL,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                leave_type TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create a table for approved applications
            conn.execute('''CREATE TABLE IF NOT EXISTS approved_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create Leave Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS leave_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL
            )''')

            # Create Travel Authority table
            conn.execute('''CREATE TABLE IF NOT EXISTS travel_authority (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                purpose TEXT NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL 
            )''')
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

import sqlite3

def add_rejection_comment_column():
    with sqlite3.connect('documents.db') as conn:
        # Adding rejection_comment column to cto_application
        conn.execute('ALTER TABLE cto_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE leave_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE travel_authority ADD COLUMN rejection_comment TEXT;')
        conn.commit()
        print("Columns added successfully.")

# Helper function to check allowed file extensions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Routes
@app.route('/add_column')
def add_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"
    
@app.route('/add_recommending_approval_column')
def add_recommending_approval_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    name = request.form['username']
    password = request.form['password']
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE name = ?', (name,)).fetchone()
        if user and check_password_hash(user[3], password):
            session['user_id'] = user[0]
            session['username'] = user[2]
            session['position'] = user[5]
            session['role'] = user[4]

            # Redirect based on user role
            if user[4] == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user[4] == 'approver':
                return redirect(url_for('approver_dashboard'))
            elif user[4] == 'recommender':
                return redirect(url_for('recommender_dashboard'))
            elif user[4] == 'unit_head':
                return redirect(url_for('unit_head_dashboard'))
            else:
                return redirect(url_for('user_dashboard'))
        else:
            flash('Invalid credentials')
            return redirect(url_for('index'))

@app.route('/user_dashboard')
def user_dashboard():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']

    # Fetch user details from users.db (e.g., office and salary)
    with sqlite3.connect('users.db') as conn:
        user_details = conn.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()

    # Fetch applications from documents.db
    with sqlite3.connect('documents.db') as conn:
        # Fetch the CTO applications
        cto_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, recommending_approval, approval_status, date_recommended FROM cto_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the leave applications
        leave_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, approval_status, date_recommended FROM leave_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the travel authority applications
        travel_authorities = conn.execute('SELECT id, name, position, purpose, start_date, end_date, destination, recommending_approval, approval_status FROM travel_authority WHERE user_id = ?', (user_id,)).fetchall()

        # Fetch the count of pending, recommended, and approved applications
        pending_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Pending"', (user_id,)).fetchone()[0]
        recommended_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Recommended"', (user_id,)).fetchone()[0]
        approved_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Approved"', (user_id,)).fetchone()[0]
    
    stats = {
        'pending': pending_count,
        'recommended': recommended_count,
        'approved': approved_count
    }

    # Pass all relevant data to the template
    return render_template('user_dashboard.html', 
                           user_details=user_details, 
                           stats=stats, 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)


def get_user_info_and_stats(user_id):
    with sqlite3.connect('users.db') as conn:
        user_details = conn.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()

    with sqlite3.connect('documents.db') as conn:
        pending_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Pending"', (user_id,)).fetchone()[0]
        recommended_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Recommended"', (user_id,)).fetchone()[0]
        approved_count = conn.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Approved"', (user_id,)).fetchone()[0]
    
    stats = {
        'pending': pending_count,
        'recommended': recommended_count,
        'approved': approved_count
    }
    
    return user_details, stats


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        if password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('register'))
        with sqlite3.connect('users.db') as conn:
            try:
                conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                             (name, username, generate_password_hash(password, method='pbkdf2:sha256'), 'user'))
                conn.commit()
                flash('Registration successful')
                return redirect(url_for('index'))
            except sqlite3.IntegrityError:
                flash('Username already exists')
                return redirect(url_for('register'))
    return render_template('register.html')

@app.route('/submit_document', methods=['GET', 'POST'])
def submit_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    if request.method == 'POST':
        name = request.form['name']
        division = request.form['division']
        document = request.files['document']
        if document and allowed_file(document.filename):
            filename = secure_filename(document.filename)
            document.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('Document uploaded successfully')
        else:
            flash('Invalid file format')
        return redirect(url_for('submit_document'))
    return render_template('submit_document.html')

@app.route('/admin_dashboard')
def admin_dashboard():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        # Count all applications
        total_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application').fetchone()[0]
        total_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application').fetchone()[0]
        total_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority').fetchone()[0]
        
        # Count pending applications
        pending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Pending"').fetchone()[0]

        # Count applications for recommending
        recommending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]

        # Count approved applications
        approved_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Approved"').fetchone()[0]

    return render_template('admin_dashboard.html', 
                           total_cto=total_cto_applications,
                           total_leave=total_leave_applications,
                           total_travel=total_travel_authorities,
                           pending_cto=pending_cto_applications,
                           pending_leave=pending_leave_applications,
                           pending_travel=pending_travel_authorities,
                           recommending_cto=recommending_cto_applications,
                           recommending_leave=recommending_leave_applications,
                           recommending_travel=recommending_travel_authorities,
                           approved_cto=approved_cto_applications,
                           approved_leave=approved_leave_applications,
                           approved_travel=approved_travel_authorities)

@app.route('/view_users')
def view_users():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    search = request.args.get('search', '')
    letter = request.args.get('letter', '')
    page = request.args.get('page', 1, type=int)  # Current page number (default is 1)
    per_page = 20  # Number of users per page

    query = 'SELECT id, name, username, position, role FROM users WHERE 1=1'
    params = []

    if search:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'%{search}%', f'%{search}%'])

    if letter:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'{letter}%', f'{letter}%'])

    query += ' LIMIT ? OFFSET ?'
    params.extend([per_page, (page - 1) * per_page])

    with sqlite3.connect('users.db') as conn:
        total_users = conn.execute('SELECT COUNT(*) FROM users WHERE 1=1').fetchone()[0]
        users = conn.execute(query, params).fetchall()

    # Calculate total pages
    total_pages = (total_users + per_page - 1) // per_page

    return render_template('view_users.html', users=users, page=page, total_pages=total_pages, search=search, letter=letter)


@app.route('/clear_data', methods=['POST'])
def clear_data():
    admin_password = request.form['admin_password']
    with sqlite3.connect('users.db') as conn:
        admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('Admin',)).fetchone()
        if admin_user and check_password_hash(admin_user[3], admin_password):
            with sqlite3.connect('documents.db') as doc_conn:
                # Clear all application data
                doc_conn.execute('DELETE FROM cto_application')
                doc_conn.execute('DELETE FROM leave_application')
                doc_conn.execute('DELETE FROM travel_authority')
                doc_conn.execute('DELETE FROM recommended_applications')
                doc_conn.execute('DELETE FROM approved_applications')
                doc_conn.commit()
            
            # Clear all generated Excel files
            output_dir = "path/to/output/directory"  # Update this to your actual output directory path
            if os.path.exists(output_dir):
                # Delete all files in the output directory
                for filename in os.listdir(output_dir):
                    file_path = os.path.join(output_dir, filename)
                    try:
                        if os.path.isfile(file_path):
                            os.remove(file_path)  # Delete the file
                    except Exception as e:
                        print(f"Error deleting file {file_path}: {e}")
            
            flash('All data and generated files have been cleared successfully', 'success')
        else:
            flash('Invalid admin password', 'danger')
    
    return redirect(url_for('admin_dashboard'))

@app.route('/change_position', methods=['GET', 'POST'])
def change_position():
    if 'user_id' not in session:
        flash('Please log in first.')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_position = request.form['position']
        
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET position = ? WHERE id = ?', (new_position, session['user_id']))
            conn.commit()
        
        session['position'] = new_position  # Update session with new position
        flash('Position updated successfully.')
        return redirect(url_for('user_dashboard'))

    # Check if 'position' exists in session
    current_position = session.get('position', 'Not set')  # Use default value if not set
    return render_template('change_position.html', current_position=current_position)


@app.route('/export_excel')
def export_excel():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        travel_authorities = pd.read_sql_query('SELECT * FROM travel_authority', conn)
        cto_applications = pd.read_sql_query('SELECT * FROM cto_application', conn)
        leave_applications = pd.read_sql_query('SELECT * FROM leave_application', conn)

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        travel_authorities.to_excel(writer, sheet_name='Travel Authorities', index=False)
        cto_applications.to_excel(writer, sheet_name='CTO Applications', index=False)
        leave_applications.to_excel(writer, sheet_name='Leave Applications', index=False)

    output.seek(0)
    return send_file(output, download_name='admin_data.xlsx', as_attachment=True)


@app.route('/export_users_excel')
def export_users_excel():
    with sqlite3.connect('users.db') as conn:
        users_df = pd.read_sql_query("SELECT * FROM users", conn)
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        users_df.to_excel(writer, sheet_name='Users', index=False)
    
    output.seek(0)
    return send_file(output, download_name='users_data.xlsx', as_attachment=True)

@app.route('/import_users_excel', methods=['POST'])
def import_users_excel():
    file = request.files['file']  # Handle file upload from the form
    if not file:
        flash('No file selected', 'error')
        return redirect(url_for('admin_dashboard'))

    try:
        users_df = pd.read_excel(file)
        
        # Convert all passwords to strings before hashing
        users_df['password'] = users_df['password'].astype(str)
        users_df['password'] = users_df['password'].apply(lambda x: generate_password_hash(x, method='pbkdf2:sha256'))

        with sqlite3.connect('users.db') as conn:
            for _, row in users_df.iterrows():
                try:
                    conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                                 (row['name'], row['username'], row['password'], row['role']))
                except sqlite3.IntegrityError:
                    flash(f"User {row['username']} already exists", 'warning')
        
        flash('Users imported successfully', 'success')
        return redirect(url_for('admin_dashboard'))
    except Exception as e:
        flash(f"Error importing users: {e}", 'error')
        return redirect(url_for('admin_dashboard'))

@app.route('/cancel_application/<int:app_id>/<string:app_type>', methods=['POST'])
def cancel_application(app_id, app_type):
    print(f"Canceling application of type: {app_type}, ID: {app_id}")  # Debug line
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    try:
        with sqlite3.connect('documents.db') as conn:
            if app_type == 'cto':
                conn.execute('DELETE FROM cto_application WHERE id = ?', (app_id,))
            elif app_type == 'leave':
                conn.execute('DELETE FROM leave_application WHERE id = ?', (app_id,))
            elif app_type == 'travel':
                conn.execute('DELETE FROM travel_authority WHERE id = ?', (app_id,))
            conn.commit()
            print(f"Application of type {app_type} with ID {app_id} canceled successfully.")  # Debug line
        return jsonify({'success': 'Application cancelled successfully'})
    except Exception as e:
        print(f"Error occurred: {e}")
        return jsonify({'error': 'Failed to cancel application'}), 500



@app.route('/reject_application/<int:app_id>', methods=['POST'])
def reject_application(app_id):
    rejection_comment = request.form.get('rejection_comment')
    application_type = request.form.get('application_type')
    # Fetch the application using the ID
    application = Application.query.get(app_id)
    
    if application:
        application.status = 'Rejected'
        application.rejection_comment = rejection_comment
        db.session.commit()
        
        # Notify the user via their dashboard
        flash(f'Your application was rejected. Reason: {rejection_comment}', 'warning')
        
        return jsonify({'success': True})
    return jsonify({'success': False, 'error': 'Application not found'})



@app.route('/cto_application', methods=['GET', 'POST'])
def cto_application():
    user_id = session['user_id']  # Get the logged-in user's ID

    if request.method == 'POST':
        # Handle form submission
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']

        # Insert the new CTO application into the database
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            conn.commit()

        flash('CTO Application submitted successfully!')
        return redirect(url_for('user_dashboard'))

    else:
        # Fetch existing CTO application for this user
        with sqlite3.connect('documents.db') as conn:
            conn.row_factory = sqlite3.Row  # Allows access to rows as dictionaries
            cto_application = conn.execute('SELECT * FROM cto_application WHERE user_id = ?', (user_id,)).fetchone()

        # Fetch Unit Heads and Recommenders for the dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]

        return render_template('cto_application.html', approving_users=approving_users, cto_application=cto_application)


@app.route('/submit_and_print_cto_application_excel', methods=['POST'])
def submit_and_print_cto_application_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    days = request.form['days']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    recommender = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new CTO application into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (name, position, days, start_date, end_date, user_id, recommender))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', (recommender,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'cto_application_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['I19'] = name  
    sheet['I20'] = position  
    sheet['C11'] = start_date  
    sheet['E11'] = end_date  
    sheet['E19'] = recommender  
    sheet['E20'] = recommender_position  

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'cto_application_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('CTO Application Submitted Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_cto_application', filename=output_filename))



@app.route('/download_cto_application/<filename>', methods=['GET'])
def download_cto_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))


@app.route('/leave_application', methods=['GET', 'POST'])
def leave_application():
    user_id = session['user_id']  # Get the logged-in user's ID

    if request.method == 'POST':
        # Handle form submission
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']

        # Insert the new leave application into the database
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            conn.commit()

        flash('Leave Application submitted successfully!')
        return redirect(url_for('user_dashboard'))

    else:
        # Fetch user details (office and salary) for this user from users.db
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row  # Allows access to rows as dictionaries
            user_details = conn.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()

        # Check if user_details is None (user not found)
        if user_details is None:
            flash('User details not found.', 'danger')
            return redirect(url_for('user_dashboard'))

        # Fetch Recommenders for the dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]

        return render_template('leave_application.html', approving_users=approving_users, user_details=user_details)

@app.route('/submit_and_print_leave_application_excel', methods=['POST'])
def submit_and_print_leave_application_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    office = request.form['office']  
    salary = request.form['salary']  
    days = request.form['days']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    leave_type = request.form['leave_type']
    recommender = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new Leave application into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, leave_type, user_id, recommending_approval)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', 
                       (name, position, days, start_date, end_date, leave_type, user_id, recommender))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', (recommender,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'leave_application_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['E5'] = name  
    sheet['E7'] = position
    sheet['C5'] = office
    sheet['I7'] = salary
    sheet['C45'] = days
    sheet['C48'] = start_date
    sheet['D48'] = end_date

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'leave_application_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('Leave Application Submitted Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_leave_application', filename=output_filename))


@app.route('/download_leave_application/<filename>', methods=['GET'])
def download_leave_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))


@app.route('/travel_authority', methods=['GET', 'POST'])
def travel_authority():
    user_id = session['user_id']  # Get the logged-in user's ID
    
    if request.method == 'POST':
        # Handle form submission (not required here as it redirects to another route)
        return redirect(url_for('submit_and_print_travel_authority_excel'))
    
    else:
        # Fetch recommenders for dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]
        return render_template('travel_authority.html', approving_users=approving_users)

@app.route('/submit_and_print_travel_authority_excel', methods=['POST'])
def submit_and_print_travel_authority_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    purpose = request.form['purpose']
    host = request.form['host']
    destination = request.form['destination']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    recommending_approval = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new Travel Authority into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO travel_authority 
                          (name, position, purpose, host, destination, start_date, end_date, user_id, recommending_approval)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                       (name, position, purpose, host, destination, start_date, end_date, user_id, recommending_approval))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', 
                                                 (recommending_approval,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'travel_authority_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['B4'] = name
    sheet['A13'] = name
    sheet['B5'] = position
    sheet['B7'] = purpose
    sheet['B8'] = host
    sheet['B9'] = start_date
    sheet['D9'] = end_date
    sheet['B10'] = destination

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'travel_authority_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('Travel Authority Submitted and Excel Generated Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_travel_application', filename=output_filename))

@app.route('/download_travel_application/<filename>', methods=['GET'])
def download_travel_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))

@app.route('/change_role/<int:user_id>', methods=['POST'])
def change_role(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    new_role = request.form['role']
    with sqlite3.connect('users.db') as conn:
        conn.execute('UPDATE users SET role = ? WHERE id = ?', (new_role, user_id))
        conn.commit()

    flash('User role updated successfully', 'success')
    return redirect(url_for('view_users'))

@app.route('/change_password/<int:user_id>', methods=['GET', 'POST'])
def change_password(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']
        if new_password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('change_password', user_id=user_id))

        hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))
            conn.commit()
        flash('Password updated successfully', 'success')
        return redirect(url_for('view_users'))

    return render_template('change_password.html', user_id=user_id)

@app.route('/document_tracker')
def document_tracker():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    # If you're not querying the documents, just render the page
    return render_template('document_tracker.html')

@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    try:
        with sqlite3.connect('users.db') as user_conn:
            user = user_conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
            if user:
                user_conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
                user_conn.commit()

        with sqlite3.connect('documents.db') as doc_conn:
            doc_conn.execute('DELETE FROM travel_authority WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM cto_application WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM leave_application WHERE user_id = ?', (user_id,))
            doc_conn.commit()

        flash('User and all associated data deleted successfully', 'success')
    except sqlite3.Error as e:
        flash(f"An error occurred: {e}", 'danger')

    return redirect(url_for('view_users'))

@app.route('/change_password_user', methods=['GET', 'POST'])
def change_password_user():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    if request.method == 'POST':
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            flash('New passwords do not match')
            return redirect(url_for('change_password_user'))

        with sqlite3.connect('users.db') as conn:
            user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
            if user and check_password_hash(user[3], current_password):
                hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
                conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, session['user_id']))
                conn.commit()
                flash('Password updated successfully', 'success')
                return redirect(url_for('user_dashboard'))
            else:
                flash('Current password is incorrect')
                return redirect(url_for('change_password_user'))

    return render_template('change_password_user.html')

@app.route('/approver_dashboard')
def approver_dashboard():
    if 'user_id' not in session or session.get('role') != 'approver':
        flash('Access denied')
        return redirect(url_for('index'))

    approver_username = session['username']  # Correctly fetch the logged-in approver's username

    # Fetch applications assigned for approval
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT * FROM cto_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        leave_applications = conn.execute('SELECT * FROM leave_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        travel_authorities = conn.execute('SELECT * FROM travel_authority WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()

    return render_template(
        'approver_dashboard.html',
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities
    )


@app.route('/approve_application/<int:app_id>', methods=['POST'])
def approve_application(app_id):
    if 'user_id' not in session or session.get('role') != 'approver':
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']
    
    with sqlite3.connect('documents.db') as conn:
        # Fetch the application data based on the type
        if application_type == 'cto':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE cto_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'leave':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE leave_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT name, position, purpose, start_date, end_date, destination FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            name, position, purpose, start_date, end_date, destination = application
            conn.execute('UPDATE travel_authority SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, 0, start_date, end_date, destination, purpose))
        
        conn.commit()
    
    return jsonify({'success': True})

@app.route('/recommend_approval/<int:app_id>', methods=['POST'])
def recommend_approval(app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    user_role = session.get('role')
    username = session.get('username')

    # Allow both recommenders and unit heads to recommend approval
    if user_role not in ['recommender', 'unit_head']:
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']

    with sqlite3.connect('documents.db') as conn:
        if application_type == 'cto':
            application = conn.execute('SELECT * FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE cto_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'leave':
            application = conn.execute('SELECT * FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE leave_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT * FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE travel_authority SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        else:
            return jsonify({'error': 'Invalid application type'}), 400

        # Insert into recommended_applications table
        conn.execute('''
            INSERT INTO recommended_applications 
            (app_id, app_type, name, position, days, start_date, end_date, destination, purpose, leave_type, date_recommended, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, date("now"), ?)
        ''', (
            app_id,  # Application ID
            application_type,  # Type of the application (cto/leave/travel_authority)
            application[1],  # Name
            application[2],  # Position
            application[3],  # Days (for leave or CTO)
            application[4],  # Start Date
            application[5],  # End Date
            application[6] if application_type == 'travel_authority' else None,  # Destination for travel authority
            application[7] if application_type == 'travel_authority' else None,  # Purpose for travel authority
            application[6] if application_type == 'leave' else None,  # Leave type for leave applications
            username  # The person recommending approval (e.g., the unit head or recommender)
        ))
        conn.commit()
    return jsonify({'success': True})

@app.route('/dashboard')
def dashboard():
    cto_applications = get_all_cto_applications()  # Fetch all CTO applications
    leave_applications = get_all_leave_applications()  # Fetch all leave applications
    travel_authorities = get_all_travel_authorities()  # Fetch all travel authorities
    

    cto_pending = len([app for app in cto_applications if not app.is_approved])
    leave_pending = len([app for app in leave_applications if not app.is_approved])
    travel_pending = len([app for app in travel_authorities if not app.is_approved])



    return render_template('dashboard.html', 
                           cto_count=len(cto_applications),
                           leave_count=len(leave_applications),
                           travel_count=len(travel_authorities),
                           cto_pending=cto_pending,
                           leave_pending=leave_pending,
                           travel_pending=travel_pending,
                           cto_applications=cto_applications,
                           leave_applications=leave_applications,
                           travel_authorities=travel_authorities)


@app.route('/recommender_dashboard')
def recommender_dashboard():
    if 'user_id' not in session or session.get('role') != 'recommender':
        flash('Access denied')
        return redirect(url_for('index'))

    recommender_username = session['username']  # Get the logged-in recommender's username

    # Fetch applications assigned to this recommender
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('''SELECT * FROM cto_application 
                                           WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                        (recommender_username,)).fetchall()
        print(f"CTO Applications: {cto_applications}")  
        leave_applications = conn.execute('''SELECT * FROM leave_application 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()
        print(f"Leave Applications: {leave_applications}")
        travel_authorities = conn.execute('''SELECT * FROM travel_authority 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()
        print(f"Travel Authorities: {travel_authorities}") 
    return render_template('recommender_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)


LEAVE_TYPE_MAP = {
    "1": 'Vacation Leave',
    "2": 'Mandatory/Forced Leave',
    "3": 'Sick Leave',
    "4": 'Maternity Leave',
    "5": 'Paternity Leave',
    "6": 'Special Privilege Leave',
    "7": 'Solo Parent Leave',
    "8": 'Study Leave',
    "9": '10-Day VAWC Leave',
    "10": 'Rehabilitation Privilege',
    "11": 'Speical Leave for Women',
    "12": 'Calamity Leave',
    "13": 'Adoption Leave',
    "14": 'Monetization'
 }

@app.route('/recommended_applications')
def recommended_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "cto"').fetchall()
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave"
        ''').fetchall()

        for app in leave_recommended_apps:
            print(f"Leave Type from DB: {app[6]}")  # This will show you what leave_type values are coming from the database
        

        # Apply leave type mapping
        leave_recommended_apps = [
            (app[0], app[1], app[2], app[3], app[4], app[5], LEAVE_TYPE_MAP.get(app[6], "Unknown Leave Type"), app[7])
            for app in leave_recommended_apps

        ]
        # for app in cto_recommended_apps:
        #     print(f"CTO Date Recommended from DB: {app}")  # This will show you what date_recommended values are coming from the database

        travel_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('recommended_applications.html', cto_recommended_apps=cto_recommended_apps, leave_recommended_apps=leave_recommended_apps, travel_recommended_apps=travel_recommended_apps)

@app.route('/approved_applications')
def approved_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "cto"').fetchall()
        leave_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "leave"').fetchall()
        travel_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('approved_applications.html', cto_approved_apps=cto_approved_apps, leave_approved_apps=leave_approved_apps, travel_approved_apps=travel_approved_apps)

@app.route('/unit_head_dashboard')
def unit_head_dashboard():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Ensure the logged-in unit head's username is used

    with sqlite3.connect('documents.db') as conn:
        # Fetch applications specifically assigned to the logged-in unit head
        cto_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM cto_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        leave_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM leave_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        travel_authorities = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination 
            FROM travel_authority 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

    return render_template('unit_head_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)

@app.route('/recommended_head')
def recommended_head():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Logged-in unit head's username
    print(f"Unit Head Username: {unit_head_username}")  # Debugging line

    with sqlite3.connect('documents.db') as conn:
        # Fetch recommended CTO applications by this unit head
        cto_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "cto" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"CTO Recommended Apps: {len(cto_recommended_apps)}")  # Count instead of full output for cleaner debugging

        # Fetch recommended Leave applications by this unit head
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Leave Recommended Apps: {len(leave_recommended_apps)}")  # Cleaner output

        # Fetch recommended Travel Authority applications by this unit head
        travel_recommended_apps = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "travel_authority" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Travel Recommended Apps: {len(travel_recommended_apps)}")  # Cleaner output

    # Check if data is fetched and returned correctly
    if not cto_recommended_apps and not leave_recommended_apps and not travel_recommended_apps:
        flash("No recommended applications found.")
    
    return render_template('recommended_head.html', 
                           cto_recommended_apps=cto_recommended_apps, 
                           leave_recommended_apps=leave_recommended_apps, 
                           travel_recommended_apps=travel_recommended_apps)

@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        position = request.form['position']  # Capture the updated position
        role = request.form['role']
        
        # Update the user details including the position
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET name = ?, username = ?, position = ?, role = ? WHERE id = ?', 
                         (name, username, position, role, user_id))
            conn.commit()

        # If the logged-in user is being edited, update the session position
        if user_id == session.get('user_id'):
            session['position'] = position  # Update the position in session data

        flash('User details updated successfully')
        return redirect(url_for('view_users'))

    # Fetch user details for the form
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()

    return render_template('edit_user.html', user=user)

import os
import openpyxl
from openpyxl.drawing.image import Image
from flask import send_file
import sqlite3

def add_office_and_salary_columns():
    with sqlite3.connect('users.db') as conn:
        # Add 'office' column if it doesn't already exist
        try:
            conn.execute('ALTER TABLE users ADD COLUMN office TEXT')
        except sqlite3.OperationalError:
            print("Column 'office' already exists.")
        
        # Add 'salary' column if it doesn't already exist
        try:
            conn.execute('ALTER TABLE users ADD COLUMN salary INTEGER')
        except sqlite3.OperationalError:
            print("Column 'salary' already exists.")
        
        conn.commit()

@app.route('/update_user_info', methods=['POST'])
def update_user_info():
    # Check if the user is logged in
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']
    
    # Capture the updated information from the form
    office = request.form['office']
    salary = request.form['salary']
    position = request.form['position']

    # Update the user's office, salary, and position in the database
    with sqlite3.connect('users.db') as conn:
        conn.execute('UPDATE users SET office = ?, salary = ?, position = ? WHERE id = ?', 
                     (office, salary, position, user_id))
        conn.commit()

    # Optionally, update the session variables to reflect the changes
    session['position'] = position
    session['office'] = office  # Add this line to keep the session updated
    session['salary'] = salary   # Add this line to keep the session updated

    flash('User information updated successfully!')

    # Fetch updated user details and statistics
    user_details, stats = get_user_info_and_stats(user_id)

    # Fetch applications from documents.db
    with sqlite3.connect('documents.db') as conn:
        # Fetch the CTO applications
        cto_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, recommending_approval, approval_status, date_recommended FROM cto_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the leave applications
        leave_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, approval_status, date_recommended FROM leave_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the travel authority applications
        travel_authorities = conn.execute('SELECT id, name, position, purpose, start_date, end_date, destination, recommending_approval, approval_status FROM travel_authority WHERE user_id = ?', (user_id,)).fetchall()

    # Pass updated user details and application data to the dashboard template
    return render_template('user_dashboard.html', 
                           user_details=user_details, 
                           stats=stats, 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)

@app.route('/download_application/<string:app_type>/<int:app_id>', methods=['GET'])
def download_application(app_type, app_id):
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    base_dir = os.path.join('static', 'generated_files')
    base_dir = os.path.normpath(base_dir)
    if app_type == 'cto':
        file_pattern = os.path.join(base_dir, f'cto_application_{app_id}_*.xlsx')
    elif app_type == 'leave':
        file_pattern = os.path.join(base_dir, f'leave_application_{app_id}_*.xlsx')
    elif app_type == 'travel':
        file_pattern = os.path.join(base_dir, f'travel_authority_{app_id}_*.xlsx')
    else:
        flash('Invalid application type')
        return redirect(url_for('user_dashboard'))
    matching_files = glob.glob(file_pattern)
    if matching_files:
        return send_file(matching_files[0], as_attachment=True)
    else:
        flash('Application file not found')
        return redirect(url_for('user_dashboard'))


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))  # Get the PORT from environment, default to 5000
    app.run(debug=True, host='0.0.0.0', port=port)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SDO Calbayog Tracker</title>

    <!-- Keep Bootstrap 5 only for consistency -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Custom Styles -->
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    
    <style>
        body {
            background-color: #f8f9fa; /* Light gray background */
        }
        .navbar {
            margin-bottom: 20px; /* Spacing below navbar */
        }
        .table {
            margin-top: 20px; /* Spacing above table */
            border-radius: 0.5rem; /* Rounded corners */
            overflow: hidden; /* Prevents overflow from rounded corners */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Shadow effect */
        }
        .table th {
            background-color: #007bff; /* Bootstrap primary color */
            color: white; /* White text for header */
        }
        .table tbody tr:hover {
            background-color: #e9ecef; /* Light gray hover effect */
        }
        .btn-custom {
            background-color: #007bff; /* Primary button color */
            color: white; /* White text */
            border-radius: 0.5rem; /* Rounded corners */
        }
        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
    </style>
</head>
<body>
    <!-- Updated Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
            {% if session.get('username') %}
                {{ session['username'] }} (Position: {{ session['position'] }}) <!-- Display username and position if logged in -->
            {% else %}
                DocApp <!-- Display "DocApp" on login page or when not logged in -->
            {% endif %}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <!-- Admin-specific links -->
                {% if session.get('role') == 'admin' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('admin_dashboard') }}">
                        <i class="fas fa-tachometer-alt"></i> Admin Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('view_users') }}">
                        <i class="fas fa-users"></i> View Users
                    </a>
                </li>
                {% endif %}

                <!-- Approver-specific links -->
                {% if session.get('role') == 'approver' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approver_dashboard') }}">
                        <i class="fas fa-check-circle"></i> Approver Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approved_applications') }}">
                        <i class="fas fa-file-signature"></i> Approved Applications
                    </a>
                </li>
                {% endif %}

                <!-- Recommender-specific links -->
                {% if session.get('role') == 'recommender' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommender_dashboard') }}">
                        <i class="fas fa-thumbs-up"></i> Recommender Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommended_applications') }}">
                        <i class="fas fa-file-signature"></i> Recommended Applications
                    </a>
                </li>
                {% endif %}

                <!-- Unit Head-specific links -->
                {% if session.get('role') == 'unit_head' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('unit_head_dashboard') }}">
                        <i class="fas fa-user-tie"></i> Unit Head Dashboard
                    </a>
                </li>
                {% endif %}                
                
                <!-- Common user links (if logged in) -->
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('user_dashboard') }}">
                        <i class="fas fa-user"></i> User Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('submit_document') }}">
                        <i class="fas fa-file-upload"></i> Submit Application
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('document_tracker') }}">
                        <i class="fas fa-folder-open"></i> Document Tracker
                    </a>
                </li>
                <!-- <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('change_position') }}">
                        <i class="fas fa-user-cog"></i> Change Position
                    </a>
                </li> -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        {% for category, message in messages %}
        <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
        {% endif %}
        {% endwith %}

        {% block content %}
        <!-- Example table to demonstrate improved design -->
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Document Name</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Document 1</td>
                    <td>Submitted</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>Document 2</td>
                    <td>Pending</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
        {% endblock %}
    </div>

    <!-- Bootstrap and Popper.js Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave Application</title>
</head>
<body>
    <form id="leaveForm" method="POST" action="{{ url_for('submit_and_print_leave_application_excel') }}">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="position">Position:</label>
            <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
        </div>

        <!-- Add Office Field -->
        <div class="form-group">
            <label for="office">Office:</label>
            <input type="text" id="office" name="office" value="{{ user_details[0] }}" class="form-control" required>
        </div>

        <!-- Add Salary Field -->
        <div class="form-group">
            <label for="salary">Salary:</label>
            <input type="number" id="salary" name="salary" value="{{ user_details[1] }}" class="form-control" required>
        </div>

        <div class="form-group">
            <label for="days">No. of Days applied:</label>
            <input type="number" id="days" name="days" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="leave_type">Leave Type:</label>
            <select id="leave_type" name="leave_type" class="form-control" required>
                <option value="">Select Leave Type</option>
                <option value="Vacation Leave">Vacation Leave</option>
                <option value="Mandatory/Forced Leave">Mandatory/Forced Leave</option>
                <option value="Sick Leave">Sick Leave</option>
                <option value="Maternity Leave">Maternity Leave</option>
                <option value="Paternity Leave">Paternity Leave</option>
                <option value="Special Privilege Leave">Special Privilege Leave</option>
                <option value="Solo Parent Leave">Solo Parent Leave</option>
                <option value="Study Leave">Study Leave</option>
                <option value="10-Day VAWC Leave">10-Day VAWC Leave</option>
                <option value="Rehabilitation Privilege">Rehabilitation Privilege</option>
                <option value="Special Leave for Women">Special Leave for Women</option>
                <option value="Calamity Leave">Calamity Leave</option>
                <option value="Adoption Leave">Adoption Leave</option>
                <option value="Monetization">Monetization</option>
            </select>
        </div>
        <div class="form-group">
            <label for="recommending_approval">Recommender:</label>
            <select id="recommending_approval" name="recommending_approval" class="form-control" required>
                <option value="">Select Recommender</option>
                {% for user in approving_users %}
                    <option value="{{ user }}">{{ user }}</option>
                {% endfor %}
            </select>
        </div>
        
        <!-- Add buttons -->
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-primary mt-1">Back to My Dashboard</a>
        <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Excel</button>
    </form>

    <script>
        function handleFormSubmit() {
            setTimeout(function() {
                window.location.href = "{{ url_for('user_dashboard') }}";
            }, 1000);
        }
    </script>
</body>
</html>
{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FormHub</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: angle-gradient(to right, #ffffff, #707070); 
            color: #fff; /* White text */
        }
        .navbar {
            border-bottom: 2px solid #dee2e6;
            background: #000; /* Black navbar */
        }
        .container {
            max-width: 500px;
            margin-top: 50px;
            background: #000; /* Black container */
            padding: 30px;
            border-radius: 10px;
        }
        .form-group label {
            font-weight: 600;
            color: #fff; /* White labels */
        }
        .form-control:focus {
            border-color: #ff7f50; /* Orange border on focus */
            box-shadow: 0 0 5px rgba(255, 127, 80, 0.5); /* Soft orange glow */
        }
        .btn-primary {
            background-color: #ff7f50; /* Orange buttons */
            border-color: #ff7f50;
        }
        .btn-primary:hover {
            background-color: #e06e39; /* Darker orange on hover */
            border-color: #e06e39;
        }
        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
        }
        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }
        .text-center img {
            max-width: 150px;
            margin-bottom: 20px;
        }
        .app-description {
            margin-top: 20px;
            font-size: 1rem;
            color: #fff; /* White description */
        }
        .credits {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #fff; /* White credits */
        }
        footer {
            margin-top: 20px;
            text-align: center;
            font-size: 0.9rem;
            color: #fff; /* White footer */
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">FormHub</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>
    <div class="container mt-5">
        <div class="text-center">
            <img src="{{ url_for('static', filename='logo.png') }}" alt="Division Logo" class="mb-4">
        </div>
        <h2 class="text-center">Login</h2>
        <!-- <p class="app-description text-center">Welcome to FormHub, your go-to platform for efficient document submissions.</p> -->
        <!-- <p class="credits text-center">Created by: Gary H. Ballon, ITO 1 & Drixel Idol R. Ortega, ADAS III</p> -->
        <form method="POST" action="{{ url_for('login') }}">
            <div class="form-group">
                <label for="username">Employee ID:</label>
                <input type="text" id="username" name="username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
        <a href="{{ url_for('register') }}" class="btn btn-secondary btn-block mt-3">Register</a>
    </div>
    <footer>
        <p>&copy; 2024 Schools Division of Calbayog City. All rights reserved.</p>
    </footer>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<h2>Register</h2>
<form method="POST" action="{{ url_for('register') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="confirm_password">Confirm Password:</label>
        <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Submit Application</h2>
<form id="documentForm">
    <div class="form-group">
        <label for="document_type">Document Type:</label>
        <select id="document_type" name="document_type" class="form-control" required>
            <option value="Travel Authority">Travel Authority</option>
            <option value="CTO Application">CTO Application</option>
            <option value="Leave Application">Leave Application</option>
        </select>
    </div>
    
    <!-- New Division Dropdown -->
    <div class="form-group">
        <label for="division">Division:</label>
        <select id="division" name="division" class="form-control" required>
            <option value="OSDS">OSDS</option>
            <option value="SGOD">SGOD</option>
            <option value="CID">CID</option>
        </select>
    </div>

    <button type="button" class="btn btn-primary" onclick="redirectToForm()">Next</button>
</form>



<a href="{{ url_for('logout') }}" class="btn btn-secondary mt-3">Logout</a>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to My Dashboard</a>
<script>
function redirectToForm() {
    const documentType = document.getElementById('document_type').value;
    let redirectUrl = '';

    switch(documentType) {
        case 'Travel Authority':
            redirectUrl = "{{ url_for('travel_authority') }}";
            break;
        case 'CTO Application':
            redirectUrl = "{{ url_for('cto_application') }}";
            break;
        case 'Leave Application':
            redirectUrl = "{{ url_for('leave_application') }}";
            break;
    }

    window.location.href = redirectUrl;
}
</script>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Travel Authority Application</title>
</head>
<body>
    <form id="travelAuthorityForm" method="POST" action="{{ url_for('submit_and_print_travel_authority_excel') }}">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="position">Position:</label>
            <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="purpose">Purpose:</label>
            <input type="text" id="purpose" name="purpose" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="destination">Destination:</label>
            <input type="text" id="destination" name="destination" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="recommending_approval">Recommender:</label>
            <select id="recommending_approval" name="recommending_approval" class="form-control" required>
                <option value="">Select Recommender</option>
                {% for user in approving_users %}
                    <option value="{{ user }}">{{ user }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="host">Host of Activity:</label>
            <input type="text" id="host" name="host" class="form-control" required>
        </div>

        <!-- Submit and Download Excel Button -->
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-primary mt-1">Back to My Dashboard</a>
        <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Travel Authority</button>
    </form>

    <script>
        function handleFormSubmit() {
            setTimeout(function() {
                window.location.href = "{{ url_for('user_dashboard') }}";
            }, 1000);
        }
    </script>
</body>
</html>
{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
       
    <div class="container mt-5">
        <h2 class="mb-4 text-center">User Management</h2>

        <!-- Search Field -->
        <form method="GET" action="{{ url_for('view_users') }}" class="form-inline mb-4">
            <input type="text" name="search" class="form-control mr-2" placeholder="Search by Name or Username" value="{{ request.args.get('search', '') }}">
            <button type="submit" class="btn btn-primary">Search</button>
        </form>

        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered shadow-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Employee ID</th>
                        <th>Name</th>
                        <th>Position</th> <!-- Add Position Column Here -->
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr>
                        <td>{{ user[0] }}</td>
                        <td>{{ user[1] }}</td>
                        <td>{{ user[2] }}</td>
                        <td>{{ user[3] }}</td> <!-- Display Position -->
                        <td>{{ user[4] }}</td>
                        <td>
                            {% if user[2] != 'Admin' %}
                            <a href="{{ url_for('edit_user', user_id=user[0]) }}" class="btn btn-info btn-sm">Edit</a>                       
                            <a href="{{ url_for('change_password', user_id=user[0]) }}" class="btn btn-warning btn-sm mt-1">Change Password</a>
                            <form action="{{ url_for('delete_user', user_id=user[0]) }}" method="post" class="d-inline-block mt-1" onsubmit="return confirm('Are you sure you want to delete this user and all their data?');">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <nav aria-label="User Pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if page > 1 %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page-1) }}" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
                {% endif %}
                {% for p in range(1, total_pages+1) %}
                <li class="page-item {% if p == page %}active{% endif %}">
                    <a class="page-link" href="{{ url_for('view_users', page=p) }}">{{ p }}</a>
                </li>
                {% endfor %}
                {% if page < total_pages %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page+1) }}" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
                {% endif %}
            </ul>
        </nav>

        <!-- Letter Indexes -->
        <div class="letter-indexes mt-4 text-center">
            {% for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' %}
            <a href="{{ url_for('view_users', letter=letter) }}" class="btn btn-outline-primary">{{ letter }}</a>
            {% endfor %}
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

{% endblock %}


{% extends "base.html" %}
{% block content %}

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"> <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            display: flex;
            height: 100vh; /* Full height */
            background-color: #121212; /* Dark background */
            color: #f1f1f1; /* Light text */
        }

        .navbar {
            width: 100%;
            position: fixed;
            top: 0;
            z-index: 1000;
            background-color: #1f1f1f;
            color: white;
        }

        .navbar-brand {
            color: white;
        }

        .navbar-toggler {
            border-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar {
            background: #1f1f1f;
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            height: calc(100vh - 56px); /* Full height minus navbar height */
            position: fixed;
            top: 56px;
            left: 0;
            width: 250px;
            transition: all 0.3s ease;
            overflow-y: auto; /* Scrollable if content exceeds height */
            color: #f1f1f1;
        }

        .sidebar h3 {
            color: #f1f1f1;
            margin-bottom: 20px;
        }

        .sidebar a {
            margin-bottom: 15px;
            padding: 10px 15px;
            font-size: 16px;
            color: #f1f1f1;
        }

        .btn-block {
            border-radius: 10px;
            transition: background-color 0.3s;
            background-color: #333;
            color: #f1f1f1;
        }

        .btn-block:hover {
            background-color: #007bff;
            color: white;
        }

        .sidebar.collapsed {
            width: 0;
            padding: 0;
            overflow: hidden;
        }

        .content {
            margin-left: 250px;
            margin-top: 56px;
            padding: 20px;
            flex-grow: 1;
            transition: margin-left 0.3s ease;
            background-color: #121212;
        }

        .content.collapsed {
            margin-left: 0;
        }

        .toggle-sidebar-btn {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1001;
            background-color: #333;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card {
            background-color: #1f1f1f;
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out;
            text-align: center;
            padding: 20px;
            color: #f1f1f1;
        }

        .card:hover {
            transform: translateY(-10px);
        }

        .card-body {
            padding: 15px;
        }

        .card h5 {
            font-size: 1.2rem;
            font-weight: bold;
            color: #f1f1f1;
        }

        .card p {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .card-icon {
            font-size: 2.5rem;
            color: #007bff;
        }

        .modal-header {
            background-color: #333;
            color: white;
        }

        .modal-footer .btn-danger {
            background-color: #dc3545;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .form-group label {
            font-weight: bold;
            color: #f1f1f1;
        }

        .custom-file-label {
            background-color: #333;
            color: #f1f1f1;
        }

        .custom-file-input {
            background-color: #333;
            color: #f1f1f1;
        }
    </style>
</head>

<body>
    <!-- Collapsible Sidebar -->
    <div class="sidebar" id="sidebar">
        <h3>Actions</h3>
        <a href="{{ url_for('view_users') }}" class="btn btn-primary btn-block">View Users</a>
        <a href="{{ url_for('export_users_excel') }}" class="btn btn-success btn-block">Export Users to Excel</a>
        <a href="{{ url_for('approved_applications') }}" class="btn btn-info btn-custom mb-0">See Approved Applications</a>
        <form method="POST" action="{{ url_for('import_users_excel') }}" enctype="multipart/form-data">
            <div class="custom-file mb-2">
                <input type="file" class="custom-file-input" name="file" accept=".xlsx" required>
                <label class="custom-file-label" for="file">Choose Excel file</label>
            </div>
            <button type="submit" class="btn btn-warning btn-block">Import Users from Excel</button>
        </form>
        <a href="{{ url_for('submit_document') }}" class="btn btn-primary btn-block">Submit Application</a>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-info btn-block">Go to User Dashboard</a>
        <button type="button" class="btn btn-danger btn-block" data-toggle="modal" data-target="#confirmDeleteModal">
            Clear Data
        </button>
    </div>

    <!-- Main Content Area -->
    <div class="content" id="content">
        <div class="container mt-5">
            <h2>Admin Dashboard</h2>

            <!-- Charts Section -->
            <div class="chart-container">
                <h3>Application Data Analysis</h3>
                <canvas id="applicationsChart" class="chart"></canvas>
            </div>

            <!-- Application Counts -->
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-file-alt card-icon"></i>
                        <h5>Total CTO Applications</h5>
                        <p>{{ total_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-calendar-alt card-icon"></i>
                        <h5>Total Leave Applications</h5>
                        <p>{{ total_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-plane-departure card-icon"></i>
                        <h5>Total Travel Authorities</h5>
                        <p>{{ total_travel }}</p>
                    </div>
                </div>
            </div>

            <!-- Pending Applications -->
            <h3 class="mt-4">Pending Applications</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending CTO Applications</h5>
                        <p>{{ pending_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending Leave Applications</h5>
                        <p>{{ pending_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending Travel Authorities</h5>
                        <p>{{ pending_travel }}</p>
                    </div>
                </div>
            </div>

            
            <!-- Approved Applications -->
            <h3 class="mt-4">Approved Applications</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved CTO Applications</h5>
                        <p>{{ approved_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved Leave Applications</h5>
                        <p>{{ approved_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved Travel Authorities</h5>
                        <p>{{ approved_travel }}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toggle Sidebar Button -->
    <button class="toggle-sidebar-btn" id="toggleSidebar">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Modal for Delete Confirmation -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="deleteForm" method="POST" action="{{ url_for('clear_data') }}">
                        <p>Are you sure you want to delete all data? This action cannot be undone.</p>
                        <div class="form-group">
                            <label for="admin_password">Admin Password:</label>
                            <input type="password" id="admin_password" name="admin_password" class="form-control" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" form="deleteForm" class="btn btn-danger">Delete</button>
                    
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('toggleSidebar').addEventListener('click', function() {
            var sidebar = document.getElementById('sidebar');
            var content = document.getElementById('content');
            sidebar.classList.toggle('collapsed');
            content.classList.toggle('collapsed');
        });

        function confirmClearData() {
            return confirm('Are you sure you want to clear all data? This action cannot be undone.');
        }
    </script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.getElementById('toggleSidebar').addEventListener('click', function () {
                var sidebar = document.getElementById('sidebar');
                sidebar.style.display = (sidebar.style.display === 'none') ? 'block' : 'none';
            });
    
            // Chart.js for displaying data analysis
            const ctx = document.getElementById('applicationsChart').getContext('2d');
            const applicationsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['CTO', 'Leave', 'Travel'],
                    datasets: [{
                        label: 'Applications',
                        data: [{{ total_cto }}, {{ total_leave }}, {{ total_travel }}],
                        backgroundColor: ['#007bff', '#28a745', '#ffc107']
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

{% endblock %}


{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Approver Dashboard</h2>

    <!-- CTO Applications Table -->
    <div class="application-section">
        <h4 class="section-title">CTO Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in cto_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[7] }}</td> <!-- Display the status -->
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="cto">
                            Approve
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Leave Applications Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Leave Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Leave Type</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in leave_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[7] }}</td>
                    <td>{{ application[8] }}</td> <!-- Display the status -->
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="leave">
                            Approve
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Travel Authorities Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Travel Authorities</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Purpose</th>
                    <th>Destination</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for authority in travel_authorities %}
                <tr id="row-{{ authority[0] }}">
                    <td>{{ authority[1] }}</td>
                    <td>{{ authority[2] }}</td>
                    <td>{{ authority[3] }}</td>
                    <td>{{ authority[7] }}</td>
                    <td>{{ authority[5] }}</td>
                    <td>{{ authority[6] }}</td>
                    <td>{{ authority[9] }}</td> <!-- Display the status -->
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ authority[0] }}" 
                                data-type="travel_authority">
                            Approve
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('approved_applications') }}" class="btn btn-primary mb-3">See Approved Applications</a>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for approving applications
        $('.approve-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/approve_application/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Approved').attr('disabled', true).removeClass('btn-success').addClass('btn-secondary');
                        alert('Application successfully approved!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<style>
    body {
        background-color: #f8f9fa;
    }
    .application-section {
        background-color: #ffffff;
        border-radius: 0.5rem;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .section-title {
        font-weight: bold;
        color: #343a40;
    }
    .table th {
        background-color: #007bff;
        color: white;
    }
    .table tbody tr:hover {
        background-color: #e9ecef;
    }
    .btn-custom {
        background-color: #007bff;
        color: white;
        border-radius: 0.5rem;
    }
    .btn-custom:hover {
        background-color: #0056b3;
    }
</style>

{% endblock %}


{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Approved Applications</h2>

    <!-- CTO Applications -->
    <div class="application-section">
        <h3 class="section-title">CTO Applications</h3>
        <input type="text" id="ctoInput" onkeyup="filterTable('ctoTable', 'ctoInput')" class="form-control mb-3" placeholder="Search for names..">
        <table class="table table-striped table-bordered" id="ctoTable">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('ctoTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('ctoTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('ctoTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('ctoTable', 3)" class="sortable">Days</th>
                    <th onclick="sortTable('ctoTable', 4)" class="sortable">Start Date</th>
                    <th onclick="sortTable('ctoTable', 5)" class="sortable">End Date</th>
                    <th onclick="sortTable('ctoTable', 6)" class="sortable">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in cto_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="ctoPagination" class="pagination-controls"></div>
    </div>

    <!-- Leave Applications -->
    <div class="application-section mt-4">
        <h3 class="section-title">Leave Applications</h3>
        <input type="text" id="leaveInput" onkeyup="filterTable('leaveTable', 'leaveInput')" class="form-control mb-3" placeholder="Search for names..">
        <table class="table table-striped table-bordered" id="leaveTable">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('leaveTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('leaveTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('leaveTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('leaveTable', 3)" class="sortable">Days</th>
                    <th onclick="sortTable('leaveTable', 4)" class="sortable">Start Date</th>
                    <th onclick="sortTable('leaveTable', 5)" class="sortable">End Date</th>
                    <th onclick="sortTable('leaveTable', 6)" class="sortable">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in leave_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="leavePagination" class="pagination-controls"></div>
    </div>

    <!-- Travel Authorities -->
    <div class="application-section mt-4">
        <h3 class="section-title">Travel Authorities</h3>
        <input type="text" id="travelInput" onkeyup="filterTable('travelTable', 'travelInput')" class="form-control mb-3" placeholder="Search for names..">
        <table class="table table-striped table-bordered" id="travelTable">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('travelTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('travelTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('travelTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('travelTable', 3)" class="sortable">Start Date</th>
                    <th onclick="sortTable('travelTable', 4)" class="sortable">End Date</th>
                    <th onclick="sortTable('travelTable', 5)" class="sortable">Destination</th>
                    <th onclick="sortTable('travelTable', 6)" class="sortable">Purpose</th>
                    <th onclick="sortTable('travelTable', 7)" class="sortable">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in travel_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[8] }}</td>
                    <td>{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="travelPagination" class="pagination-controls"></div>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('approver_dashboard') }}" class="btn btn-primary">Go back to dashboard</a>
    </div>
</div>

<!-- Pagination and Sorting/Filtering JavaScript -->
<script>
// Existing JavaScript code remains unchanged...
</script>

<style>
    .application-section {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .section-title {
        font-weight: bold;
        color: #343a40;
    }
    
    .sortable {
        cursor: pointer;
    }

    .pagination-controls {
        margin-top: 15px;
        text-align: center;
    }

    .pagination-controls button {
        margin: 0 2px;
    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
    }
</style>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Change Password</h2>
    <form method="POST" action="{{ url_for('change_password', user_id=user_id) }}">
        <div class="form-group">
            <label for="new_password">New Password:</label>
            <input type="password" id="new_password" name="new_password" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="confirm_password">Confirm Password:</label>
            <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
    <a href="{{ url_for('view_users') }}" class="btn btn-secondary mt-3">Back to Users</a>
</div>
{% endblock %}


{% extends "base.html" %}

{% block content %}
<h2>This will be the Documents Tracker page</h2>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
{% endblock %}


{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Recommended Applications</h2>

    <!-- CTO Applications Section -->
    <div class="application-section mb-4">
        <h3>CTO Applications</h3>
        <input type="text" id="ctoFilterInput" onkeyup="filterTable('ctoTable', 'ctoFilterInput')" placeholder="Search for names.." class="form-control mb-3">
        <table id="ctoTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in cto_recommended_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[11] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Leave Applications Section -->
    <div class="application-section mb-4">
        <h3>Leave Applications</h3>
        <input type="text" id="leaveFilterInput" onkeyup="filterTable('leaveTable', 'leaveFilterInput')" placeholder="Search for names.." class="form-control mb-3">
        <table id="leaveTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in leave_recommended_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[1] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[7] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Travel Authorities Section -->
    <div class="application-section mb-4">
        <h3>Travel Authorities</h3>
        <input type="text" id="travelFilterInput" onkeyup="filterTable('travelTable', 'travelFilterInput')" placeholder="Search for names.." class="form-control mb-3">
        <table id="travelTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Destination</th>
                    <th>Purpose</th>
                    <th>Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in travel_recommended_apps %}
                <tr>
                    <td>{{ app[1] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[8] }}</td>
                    <td>{{ app[9] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[11] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommender_dashboard') }}" class="btn btn-secondary mb-3">Go back to Dashboard</a>
    </div>
</div>

<script>
function filterTable(tableId, inputId) {
    var input, filter, table, tr, td, i, j, txtValue;
    input = document.getElementById(inputId);
    filter = input.value.toLowerCase();
    table = document.getElementById(tableId);
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 1; i < tr.length; i++) {
        tr[i].style.display = "none"; // Hide the row initially
        td = tr[i].getElementsByTagName("td");
        for (j = 0; j < td.length; j++) {
            if (td[j]) {
                txtValue = td[j].textContent || td[j].innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = ""; // Show the row if it matches
                    break; // No need to check other cells in the row
                }
            }
        }
    }
}
</script>

<style>
body {
    background-color: #f8f9fa;
}
.application-section {
    background-color: #ffffff;
    border-radius: 0.5rem;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
.table th {
    background-color: #007bff;
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
.btn-secondary {
    border-radius: 0.5rem;
}
.btn-secondary:hover {
    background-color: #6c757d;
}
</style>

{% endblock %}


{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Recommender Dashboard</h2>

    <!-- CTO Applications Table -->
    <div class="application-section">
        <h4 class="section-title">CTO Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in cto_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="cto">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Leave Applications Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Leave Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Leave Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in leave_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[7] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="leave">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Travel Authorities Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Travel Authorities</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Purpose</th>
                    <th>Destination</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for authority in travel_authorities %}
                <tr id="row-{{ authority[0] }}">
                    <td>{{ authority[1] }}</td>
                    <td>{{ authority[2] }}</td>
                    <td>{{ authority[3] }}</td>
                    <td>{{ authority[7] }}</td>
                    <td>{{ authority[5] }}</td>
                    <td>{{ authority[6] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ authority[0] }}" 
                                data-type="travel_authority">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommended_applications') }}" class="btn btn-primary mb-3">See Recommended Applications</a>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommend approval
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<style>
    body {
        background-color: #f8f9fa;
    }
    .application-section {
        background-color: #ffffff;
        border-radius: 0.5rem;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .section-title {
        font-weight: bold;
        color: #343a40;
    }
    .table th {
        background-color: #007bff;
        color: white;
    }
    .table tbody tr:hover {
        background-color: #e9ecef;
    }
    .btn-primary {
        border-radius: 0.5rem;
    }
    .btn-primary:hover {
        background-color: #0056b3;
    }
</style>

{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> <!-- jQuery for AJAX -->
    <style>
        body {
            background-color: #ffffff;
            color: #000000;
        }

        /* Topbar styling */
        .topbar {
            background-color: #343a40;
            color: white;
            padding: 15px;
            border-radius: 0.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        /* Aligning the form */
        .topbar .form-inline {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: center;
        }

        .topbar .form-inline .form-group {
            margin-bottom: 0;
        }

        .topbar .form-inline input {
            width: auto;
            min-width: 150px;
        }

        /* Button alignment */
        .topbar .btn-group {
            display: flex;
            gap: 10px;
        }

        /* Tab navigation */
        .nav-tabs {
            margin-bottom: 20px;
        }

        /* Table styling */
        .table-container {
            width: 100%;
        }

        .table {
            width: 100%;
            margin-top: 20px;
            background-color: #f8f9fa;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 0.25rem;
            overflow: hidden;
            table-layout: auto;
        }

        .table thead th {
            background-color: #6c757d;
            color: white;
            text-align: center;
        }

        .table tbody td {
            text-align: center;
            vertical-align: middle;
        }

        .btn-custom {
            background-color: #17a2b8;
            color: white;
        }

        .btn-custom:hover {
            background-color: #138496;
        }

        @media (max-width: 768px) {
        .container {
            padding: 10px;
        }

        .sidebar {
            display: none; /* Hide sidebar on smaller screens */
        }

        .content {
            width: 100%;
            margin: 0;
            padding: 0;
        }

        .table {
            font-size: 12px;
        }

        .topbar {
            padding: 10px;
        }
        }

    /* Styles for screens smaller than 480px */
    @media (max-width: 480px) {
        .table {
            font-size: 10px;
        }

        .navbar {
            flex-direction: column;
        }

        .topbar {
            flex-direction: column;
            align-items: flex-start;
        }

        .topbar .user-info {
            font-size: 14px;
        }

        .card {
            margin-bottom: 10px;
        }

        .table th, .table td {
            padding: 8px;
        }
        }
    </style>
</head>

<body>

    <div class="topbar">
        <div class="form-inline">
            <span>User Info:</span>
            <form method="POST" action="{{ url_for('update_user_info') }}" class="form-inline">
                <div class="form-group">
                    <label for="name">Name: </label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control mx-2"
                        readonly>
                </div>
                <div class="form-group">
                    <label for="position">Position: </label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}"
                        class="form-control mx-2" required>
                </div>
                <div class="form-group">
                    <label for="office">Office: </label>
                    <input type="text" id="office" name="office" value="{{ user_details[0] }}"
                        class="form-control mx-2" required>
                </div>
                <div class="form-group">
                    <label for="salary">Salary: </label>
                    <input type="number" id="salary" name="salary" value="{{ user_details[1] }}"
                        class="form-control mx-3" required>
                </div>
            </form>
        </div>
        <div class="btn-group">
            <button type="submit" class="btn btn-danger">Update Info</button>
            <a href="{{ url_for('submit_document') }}" class="btn btn-custom">Submit Application</a>
            <a href="{{ url_for('document_tracker') }}" class="btn btn-custom">Track Documents</a>
            <a href="{{ url_for('change_password_user') }}" class="btn btn-warning">Change Password</a>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="container-fluid">
        <ul class="nav nav-tabs" id="applicationTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="summary-tab" data-toggle="tab" href="#summary" role="tab"
                    aria-controls="summary" aria-selected="true">Summary</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="cto-tab" data-toggle="tab" href="#cto" role="tab" aria-controls="cto"
                    aria-selected="false">CTO Applications</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="leave-tab" data-toggle="tab" href="#leave" role="tab" aria-controls="leave"
                    aria-selected="false">Leave Applications</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="travel-tab" data-toggle="tab" href="#travel" role="tab" aria-controls="travel"
                    aria-selected="false">Travel Authorities</a>
            </li>
        </ul>

        <div class="tab-content" id="applicationTabsContent">

            <!-- Summary Tab -->
            <div class="tab-pane fade show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                <div class="card">
                    <div class="card-body">
                        <h4>Summary of Applications</h4>
                        <p>Pending: <span id="pendingCount">0</span></p>
                        <p>Recommended: <span id="recommendedCount">0</span></p>
                        <p>Approved: <span id="approvedCount">0</span></p>
                    </div>
                </div>
            </div>

            <!-- CTO Applications Tab -->
            <div class="tab-pane fade" id="cto" role="tabpanel" aria-labelledby="cto-tab">
                <div class="table-container">
                    <table id="ctoTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Days</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in cto_applications %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>
                                    {% if application[7] == 'Approved' %}
                                    Approved
                                    {% elif application[6] == 'Recommended' %}
                                    Recommended
                                    {% elif application[7] == 'Rejected' %}
                                    Rejected
                                    {% else %}
                                    Pending
                                    {% endif %}
                                </td>
                                <td>
                                    {% if application[7] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="cto">Cancel</button>
                                    {% endif %}
                                </td>
                                <td>
                                    <a href="{{ url_for('download_application', app_type='cto', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Leave Applications Tab -->
            <div class="tab-pane fade" id="leave" role="tabpanel" aria-labelledby="leave-tab">
                <div class="table-container">
                    <table id="leaveTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Days</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Type of Leave</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in leave_applications %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>{{ application[6] }}</td>
                                <td>
                                    {% if application[8] == 'Approved' %}
                                    Approved
                                    {% elif application[8] == 'Rejected' %}
                                    Rejected
                                    {% elif application[7] == 'Recommended' %}
                                    Recommended
                                    {% else %}
                                    Pending
                                    {% endif %}
                                </td>
                                <td>
                                    {% if application[8] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="leave">Cancel</button>
                                    {% endif %}
                                </td>
                                <td>
                                    <a href="{{ url_for('download_application', app_type='leave', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="tab-pane fade" id="travel" role="tabpanel" aria-labelledby="travel-tab">
                <div class="table-container">
                    <table id="travelTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Days</th>
                                <th>Destination</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in travel_authorities %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>{{ application[6] }}</td>
                                <td>
                                    {% if application[8] == 'Approved' %}
                                    Approved
                                    {% elif application[8] == 'Rejected' %}
                                    Rejected
                                    {% elif application[8] == 'Recommended' %}
                                    Recommended
                                    {% else %}
                                    Pending
                                    {% endif %}
                                </td>
                                <td>
                                    {% if application[8] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="travel">Cancel</button>
                                    {% endif %}
                                </td>         
                                <td>
                                    <a href="{{ url_for('download_application', app_type='travel', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                </td>                              
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </body>           

    <!-- Bootstrap JS, Popper.js, and jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        $(document).ready(function () {
            $('.btn-cancel').on('click', function () {
                var applicationId = $(this).data('id');
                var type = $(this).data('type');

                if (confirm("Are you sure you want to cancel this application?")) {
                    $.ajax({
                        url: `/cancel_application/${applicationId}/${type}`,
                        method: "POST",
                        success: function (response) {
                            alert("Application cancelled successfully");
                            location.reload();
                        },
                        error: function () {
                            alert("There was an error cancelling the application.");
                        }
                    });
                }
            });
        });

        
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Function to count applications based on their status
            function countApplicationsByStatus(status) {
                let count = 0;
                document.querySelectorAll("td").forEach(td => {
                    if (td.textContent.trim() === status) {
                        count++;
                    }
                });
                return count;
            }
  
            // Update the summary counts for Pending, Recommended, and Approved
            document.getElementById("pendingCount").textContent = countApplicationsByStatus("Pending");
            document.getElementById("recommendedCount").textContent = countApplicationsByStatus("Recommended");
            document.getElementById("approvedCount").textContent = countApplicationsByStatus("Approved");
        });
    </script>



</html>

{% endblock %}


{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Recommended Applications for Unit Head</h2>

    <!-- CTO Applications -->
    <h3>CTO Applications</h3>
    <input type="text" id="ctoFilterInput" class="form-control mb-3" onkeyup="filterTable('ctoTable', 'ctoFilterInput')" placeholder="Search for names..">
    <table id="ctoTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in cto_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications -->
    <h3>Leave Applications</h3>
    <input type="text" id="leaveFilterInput" class="form-control mb-3" onkeyup="filterTable('leaveTable', 'leaveFilterInput')" placeholder="Search for names..">
    <table id="leaveTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Leave Type</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in leave_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authority Applications -->
    <h3>Travel Authority Applications</h3>
    <input type="text" id="travelFilterInput" class="form-control mb-3" onkeyup="filterTable('travelTable', 'travelFilterInput')" placeholder="Search for names..">
    <table id="travelTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Destination</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in travel_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <a href="{{ url_for('unit_head_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    // Filtering function
    function filterTable(tableId, inputId) {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById(inputId);
        filter = input.value.toUpperCase();
        table = document.getElementById(tableId);
        tr = table.getElementsByTagName("tr");

        for (i = 1; i < tr.length; i++) { // Skip the header row
            tr[i].style.display = "none";  // Initially hide all rows

            // Loop through all table columns (td) and search for matching content
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";  // Show the row if match is found
                        break;  // Break to avoid further checks for the same row
                    }
                }
            }
        }
    }

    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<style>
body {
    background-color: #f8f9fa;
}
.table th {
    background-color: #007bff;
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
</style>

{% endblock %}


{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Unit Head Dashboard</h2>

    <!-- CTO Applications Table -->
    <h4>CTO Applications</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in cto_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[7] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications Table -->
    <h4>Leave Applications</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in leave_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authorities Table -->
    <h4>Travel Authorities</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for authority in travel_authorities %}
            <tr id="row-{{ authority[0] }}">
                <td>{{ authority[1] }}</td>
                <td>{{ authority[2] }}</td>
                <td>{{ authority[3] }}</td>
                <td>{{ authority[4] }}</td>
                <td>{{ authority[5] }}</td>
                <td>{{ authority[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Recommend
                    </button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommended_head') }}" class="btn btn-primary mb-3">See Recommended Applications</a>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // AJAX for rejecting applications
        $('.reject-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var rejectionComment = prompt("Please enter a reason for rejection:");

            if (rejectionComment) {
                $.ajax({
                    type: 'POST',
                    url: '/reject_application/' + appId,
                    data: { rejection_comment: rejectionComment },
                    success: function(response) {
                        if (response.success) {
                            alert("Application rejected with comment: " + rejectionComment);
                            button.closest('tr').remove();  // Remove the row from the table
                        } else {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>

<style>
body {
    background-color: #f8f9fa;
}
.table th {
    background-color: #007bff;
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
.btn-custom {
    background-color: #007bff;
    color: white;
    border-radius: 0.5rem;
}
.btn-custom:hover {
    background-color: #0056b3;
}
</style>

{% endblock %}


{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Recommended Applications for Unit Head</h2>

    <!-- CTO Applications -->
    <h3>CTO Applications</h3>
    <input type="text" id="ctoFilterInput" class="form-control mb-3" onkeyup="filterTable('ctoTable', 'ctoFilterInput')" placeholder="Search for names..">
    <table id="ctoTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in cto_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications -->
    <h3>Leave Applications</h3>
    <input type="text" id="leaveFilterInput" class="form-control mb-3" onkeyup="filterTable('leaveTable', 'leaveFilterInput')" placeholder="Search for names..">
    <table id="leaveTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Leave Type</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in leave_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authority Applications -->
    <h3>Travel Authority Applications</h3>
    <input type="text" id="travelFilterInput" class="form-control mb-3" onkeyup="filterTable('travelTable', 'travelFilterInput')" placeholder="Search for names..">
    <table id="travelTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Destination</th>
                <th>Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in travel_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <a href="{{ url_for('unit_head_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    // Filtering function
    function filterTable(tableId, inputId) {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById(inputId);
        filter = input.value.toUpperCase();
        table = document.getElementById(tableId);
        tr = table.getElementsByTagName("tr");

        for (i = 1; i < tr.length; i++) { // Skip the header row
            tr[i].style.display = "none";  // Initially hide all rows

            // Loop through all table columns (td) and search for matching content
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";  // Show the row if match is found
                        break;  // Break to avoid further checks for the same row
                    }
                }
            }
        }
    }

    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<style>
body {
    background-color: #f8f9fa;
}
.table th {
    background-color: #007bff;
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
</style>

{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Change Password</h2>
        <form method="POST" action="{{ url_for('change_password_user') }}">
            <div class="form-group">
                <label for="current_password">Current Password:</label>
                <input type="password" id="current_password" name="current_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="new_password">New Password:</label>
                <input type="password" id="new_password" name="new_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="confirm_password">Confirm New Password:</label>
                <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Change Password</button>
        </form>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Print CTO Application</title>
    <style>
        .cto-template {
            position: relative;
            width: 800px;
            height: 600px;
        }
        img {
            width: 100%;
            height: auto;
        }
        .field {
            position: absolute;
            font-size: 16px;
            font-family: Arial, sans-serif;
            color: black;
            text-transform: uppercase;
        }
        .name { top: 487px; left: 555px; }
        .position { top: 506px; left: 580px; }
        .days { top: 210px; left: 100px; }
        .start-date { top: 305px; left: 210px; }
        .end-date { top: 325px; left: 210px; }
        .recommender { top: 487px; left: 350px; } /* Adjust position for Recommender */
    </style>
</head>
<body>
    <div class="cto-template">
        <img src="/static/cto_application_template.jpg" alt="CTO Template">
        
        <div class="field name">{{ name }}</div>
        <!-- <div class="field position">{{ position }}</div> -->
        <!-- <div class="field days">{{ days }}</div> -->
        <div class="field start-date">{{ start_date }}</div>
        <div class="field end-date">{{ end_date }}</div>
        <div class="field recommender">{{ recommending_approval }}</div> <!-- Recommender is printed -->
    </div>
    <script>
        window.onload = function() {
            window.print();
        };
    </script>
</body>
</html>


{% extends "base.html" %}

{% block content %}

<form method="POST" action="{{ url_for('edit_user', user_id=user[0]) }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" value="{{ user[1] }}" required>
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" class="form-control" value="{{ user[2] }}" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" value="{{ user[5] }}" required> <!-- Change the index to user[3] -->
    </div>
    <div class="form-group">
        <label for="role">Role:</label>
        <select name="role" class="form-control">
            <option value="user" {% if user[4] == 'user' %}selected{% endif %}>User</option>
            <option value="admin" {% if user[4] == 'admin' %}selected{% endif %}>Admin</option>
            <option value="approver" {% if user[4] == 'approver' %}selected{% endif %}>Approver</option>
            <option value="unit_head" {% if user[4] == 'unit_head' %}selected{% endif %}>Unit Head</option>
            <option value="recommender" {% if user[4] == 'recommender' %}selected{% endif %}>Recommender</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Save Changes</button>
</form>

{% endblock %}


{% extends "base.html" %}
{% block content %}

<div class="container">
    <div class="template-container">
        <img src="{{ url_for('static', filename='travel_authority_template.jpg') }}" alt="Travel Authority Template" class="template">

        <div class="text-field name1">{{ name }}</div>
        <div class="text-field name">{{ name }}</div>
        <div class="text-field position">{{ position }}</div>
        <div class="text-field purpose">{{ purpose }}</div>
        <div class="text-field host">{{ host }}</div> <!-- Host of Activity -->
        <div class="text-field start-date">{{ start_date }} - </div>
        <div class="text-field end-date">{{ end_date }}</div>
        <div class="text-field destination">{{ destination }}</div>
        <div class="text-field recommender">{{ recommending_approval }}</div> <!-- Recommender -->
        <div class="text-field recommender-position">{{ recommender_position }}</div> <!-- Recommender's Position -->
    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }
    .container {
        position: relative;
        width: 100%;
        height: 100%;
    }
    .template {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        z-index: -1; /* Set behind the text fields */
    }
    .text-field {
        position: absolute;
        font-family: Arial, sans-serif;
    }
    .name1 {
        top: 512px;
        left: 495px;
        font-size: 20px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .name {
        top: 1075px;
        left: 140px;
        font-size: 20px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .position {
        top: 565px;
        left: 495px;
        font-size: 18px;
    }
    .purpose {
        top: 670px;
        left: 495px;
        font-size: 18px;
    }
    .host {
        top: 750px;
        left: 495px;
        font-size: 18px;
    }
    .start-date {
        top: 805px;
        left: 495px;
        font-size: 18px;
    }
    .end-date {
        top: 805px;
        left: 600px;
        font-size: 18px;
    }
    .destination {
        top: 860px;
        left: 495px;
        font-size: 18px;
    }
    .recommender {
        top: 1330px;
        left: 140px;
        font-size: 20px;
        font-weight: bold;
    }
    .recommender-position {
        top: 1360px; /* Adjust this to position it correctly */
        left: 140px;
        font-size: 18px; /* Slightly smaller font size */
        font-weight: normal;
    }
</style>

{% endblock %}


{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2>Change Position</h2>
    <form method="POST" action="{{ url_for('change_position') }}">
        <div class="form-group">
            <label for="position">Current Position:</label>
            <input type="text" id="position" name="position" class="form-control" value="{{ current_position }}" required>
        </div>
        <button type="submit" class="btn btn-primary">Update Position</button>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-2">Cancel</a>
    </form>
</div>

{% endblock %}


