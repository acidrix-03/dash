from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import os
import pandas as pd
from io import BytesIO
from flask_babel import Babel
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify


app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your_secret_key')

# Babel setup for multi-language support
babel = Babel(app)

# UPLOAD FOLDER for file uploads
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Allowed file extensions
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

# Database setup
def init_db():
    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             name TEXT NOT NULL,
                             username TEXT NOT NULL UNIQUE,
                             password TEXT NOT NULL,
                             role TEXT NOT NULL)''')
            admin_password = generate_password_hash('12345', method='pbkdf2:sha256')
            conn.execute('''INSERT OR IGNORE INTO users (name, username, password, role)
                            VALUES ('Admin', 'Admin', ?, 'admin')''', (admin_password,))
            conn.commit()
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

    with sqlite3.connect('documents.db') as conn:
       with sqlite3.connect('documents.db') as conn:
        # Create CTO Application table
        conn.execute('''CREATE TABLE IF NOT EXISTS cto_application (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            position TEXT NOT NULL,
            days INTEGER NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            recommending_approval TEXT DEFAULT NULL, 
            approval_status TEXT DEFAULT 'Pending'   
        )''')

         # Create a table for recommended applications
        conn.execute('''CREATE TABLE IF NOT EXISTS recommended_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_id INTEGER NOT NULL,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                leave_type TEXT,
                date_recommended TEXT NOT NULL
        )''')

        # Create a table for approved applications
        conn.execute('''CREATE TABLE IF NOT EXISTS approved_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                date_recommended TEXT NOT NULL
        )''')

        # Create Leave Application table
        conn.execute('''CREATE TABLE IF NOT EXISTS leave_application (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            position TEXT NOT NULL,
            days INTEGER NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            recommending_approval TEXT DEFAULT NULL, 
            approval_status TEXT DEFAULT 'Pending'   
        )''')

        # Create Travel Authority table
        conn.execute('''CREATE TABLE IF NOT EXISTS travel_authority (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            position TEXT NOT NULL,
            purpose TEXT NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            destination TEXT NOT NULL,
            recommending_approval TEXT DEFAULT NULL, 
            approval_status TEXT DEFAULT 'Pending'   
        )''')
    print("Database initialized successfully")


init_db()

def add_rejection_comment_column():
    with sqlite3.connect('documents.db') as conn:
        # Add rejection_comment to CTO applications table
        conn.execute('ALTER TABLE cto_application ADD COLUMN rejection_comment TEXT')

        # Add rejection_comment to Leave applications table
        conn.execute('ALTER TABLE leave_application ADD COLUMN rejection_comment TEXT')

        # Add rejection_comment to Travel authorities table
        conn.execute('ALTER TABLE travel_authority ADD COLUMN rejection_comment TEXT')

    print("Columns added successfully")


# Helper function to check allowed file extensions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Routes
@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    name = request.form['username']
    password = request.form['password']
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE name = ?', (name,)).fetchone()
        if user and check_password_hash(user[3], password):
            session['user_id'] = user[0]
            session['username'] = user[2]
            session['role'] = user[4]

            # Redirect based on user role
            if user[4] == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user[4] == 'approver':
                return redirect(url_for('approver_dashboard'))
            elif user[4] == 'recommender':
                return redirect(url_for('recommender_dashboard'))  # New redirect for recommender
            else:
                return redirect(url_for('user_dashboard'))
        else:
            flash('Invalid credentials')
            return redirect(url_for('index'))

@app.route('/user_dashboard')
def user_dashboard():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']
    with sqlite3.connect('documents.db') as conn:
        # Fetch the CTO applications
        cto_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, recommending_approval, date_recommended FROM cto_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the leave applications
        leave_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, date_recommended FROM leave_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the travel authority applications
        travel_authorities = conn.execute('SELECT id, name, position, purpose, start_date, end_date, recommending_approval, date_recommended FROM travel_authority WHERE user_id = ?', (user_id,)).fetchall()

    return render_template('user_dashboard.html', cto_applications=cto_applications, leave_applications=leave_applications, travel_authorities=travel_authorities)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        if password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('register'))
        with sqlite3.connect('users.db') as conn:
            try:
                conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                             (name, username, generate_password_hash(password, method='pbkdf2:sha256'), 'user'))
                conn.commit()
                flash('Registration successful')
                return redirect(url_for('index'))
            except sqlite3.IntegrityError:
                flash('Username already exists')
                return redirect(url_for('register'))
    return render_template('register.html')

@app.route('/submit_document', methods=['GET', 'POST'])
def submit_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    if request.method == 'POST':
        name = request.form['name']
        division = request.form['division']
        document = request.files['document']
        if document and allowed_file(document.filename):
            filename = secure_filename(document.filename)
            document.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('Document uploaded successfully')
        else:
            flash('Invalid file format')
        return redirect(url_for('submit_document'))
    return render_template('submit_document.html')

@app.route('/admin_dashboard')
def admin_dashboard():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))
    with sqlite3.connect('documents.db') as conn:
        travel_authorities = conn.execute('SELECT * FROM travel_authority').fetchall()
        cto_applications = conn.execute('SELECT * FROM cto_application').fetchall()
        leave_applications = conn.execute('SELECT * FROM leave_application').fetchall()
    return render_template('admin_dashboard.html', travel_authorities=travel_authorities, cto_applications=cto_applications, leave_applications=leave_applications)

@app.route('/view_users')
def view_users():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    search = request.args.get('search', '')
    letter = request.args.get('letter', '')
    page = request.args.get('page', 1, type=int)  # Current page number (default is 1)
    per_page = 20  # Number of users per page

    query = 'SELECT * FROM users WHERE 1=1'
    params = []

    if search:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'%{search}%', f'%{search}%'])

    if letter:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'{letter}%', f'{letter}%'])

    query += ' LIMIT ? OFFSET ?'
    params.extend([per_page, (page - 1) * per_page])

    with sqlite3.connect('users.db') as conn:
        total_users = conn.execute('SELECT COUNT(*) FROM users WHERE 1=1').fetchone()[0]
        users = conn.execute(query, params).fetchall()

    # Calculate total pages
    total_pages = (total_users + per_page - 1) // per_page

    return render_template('view_users.html', users=users, page=page, total_pages=total_pages, search=search, letter=letter)



@app.route('/clear_data', methods=['POST'])
def clear_data():
    admin_password = request.form['admin_password']
    with sqlite3.connect('users.db') as conn:
        admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('Admin',)).fetchone()
        if admin_user and check_password_hash(admin_user[3], admin_password):
            with sqlite3.connect('documents.db') as doc_conn:
                doc_conn.execute('DELETE FROM cto_application')
                doc_conn.execute('DELETE FROM leave_application')
                doc_conn.execute('DELETE FROM travel_authority')
                doc_conn.commit()
            flash('All data has been cleared successfully', 'success')
        else:
            flash('Invalid admin password', 'danger')
    return redirect(url_for('admin_dashboard'))


@app.route('/export_excel')
def export_excel():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        travel_authorities = pd.read_sql_query('SELECT * FROM travel_authority', conn)
        cto_applications = pd.read_sql_query('SELECT * FROM cto_application', conn)
        leave_applications = pd.read_sql_query('SELECT * FROM leave_application', conn)

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        travel_authorities.to_excel(writer, sheet_name='Travel Authorities', index=False)
        cto_applications.to_excel(writer, sheet_name='CTO Applications', index=False)
        leave_applications.to_excel(writer, sheet_name='Leave Applications', index=False)

    output.seek(0)
    return send_file(output, download_name='admin_data.xlsx', as_attachment=True)

@app.route('/export_users_excel')
def export_users_excel():
    with sqlite3.connect('users.db') as conn:
        users_df = pd.read_sql_query("SELECT * FROM users", conn)
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        users_df.to_excel(writer, sheet_name='Users', index=False)
    
    output.seek(0)
    return send_file(output, download_name='users_data.xlsx', as_attachment=True)

@app.route('/import_users_excel', methods=['POST'])
def import_users_excel():
    file = request.files['file']  # Handle file upload from the form
    if not file:
        flash('No file selected', 'error')
        return redirect(url_for('admin_dashboard'))

    try:
        users_df = pd.read_excel(file)
        
        # Convert all passwords to strings before hashing
        users_df['password'] = users_df['password'].astype(str)
        users_df['password'] = users_df['password'].apply(lambda x: generate_password_hash(x, method='pbkdf2:sha256'))

        with sqlite3.connect('users.db') as conn:
            for _, row in users_df.iterrows():
                try:
                    conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                                 (row['name'], row['username'], row['password'], row['role']))
                except sqlite3.IntegrityError:
                    flash(f"User {row['username']} already exists", 'warning')
        
        flash('Users imported successfully', 'success')
        return redirect(url_for('admin_dashboard'))
    except Exception as e:
        flash(f"Error importing users: {e}", 'error')
        return redirect(url_for('admin_dashboard'))

@app.route('/cancel_application/<app_type>/<int:app_id>', methods=['POST'])
def cancel_application(app_type, app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403
    
    with sqlite3.connect('documents.db') as conn:
        if app_type == 'cto':
            conn.execute('DELETE FROM cto_application WHERE id = ?', (app_id,))
        elif app_type == 'leave':
            conn.execute('DELETE FROM leave_application WHERE id = ?', (app_id,))
        elif app_type == 'travel_authority':
            conn.execute('DELETE FROM travel_authority WHERE id = ?', (app_id,))
        conn.commit()
    
    flash('Application cancelled successfully', 'success')
    return redirect(url_for('user_dashboard'))

@app.route('/reject_application/<int:app_id>', methods=['POST'])
def reject_application(app_id):
    if 'user_id' not in session or session.get('role') != 'recommender':
        return jsonify({'error': 'Access denied'}), 403

    rejection_comment = request.form.get('rejection_comment')
    
    with sqlite3.connect('documents.db') as conn:
        # Update the application status to 'Rejected' and add the rejection comment
        conn.execute('UPDATE cto_application SET approval_status = "Rejected", rejection_comment = ? WHERE id = ?', (rejection_comment, app_id))
        conn.commit()
    
    # Notify user about rejection with the comment
    # Your notification logic here

    return jsonify({'success': True})


@app.route('/cto_application', methods=['GET', 'POST'])
def cto_application():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        user_id = session['user_id']  # Assuming user is logged in
        
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, NULL)''', (name, position, days, start_date, end_date, user_id))
            conn.commit()
        
        flash('CTO Application submitted successfully!')
        return redirect(url_for('user_dashboard'))
    
    return render_template('cto_application.html')



@app.route('/leave_application', methods=['GET', 'POST'])
def leave_application():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        leave_type = request.form['leave_type']
        user_id = session['user_id']  # Assuming user is logged in
        
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, leave_type, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?, NULL)''', (name, position, days, start_date, end_date, leave_type, user_id))
            conn.commit()
            print("Leave application inserted successfully")
        
        flash('Leave Application submitted successfully!')
        return redirect(url_for('user_dashboard'))
    
    return render_template('leave_application.html')

@app.route('/travel_authority', methods=['GET', 'POST'])
def travel_authority():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        date = request.form.get('date', '')  # Use get() to provide a default value
        purpose = request.form['purpose']
        host = request.form['host']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        destination = request.form['destination']
        user_id = session['user_id']  # Assuming user is logged in
        
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO travel_authority (name, position, date, purpose, host, start_date, end_date, destination, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)''', (name, position, date, purpose, host, start_date, end_date, destination, user_id))
            conn.commit()
        
        flash('Travel Authority submitted successfully!')
        return redirect(url_for('user_dashboard'))
    
    return render_template('travel_authority.html')

@app.route('/change_role/<int:user_id>', methods=['POST'])
def change_role(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    new_role = request.form['role']
    with sqlite3.connect('users.db') as conn:
        conn.execute('UPDATE users SET role = ? WHERE id = ?', (new_role, user_id))
        conn.commit()

    flash('User role updated successfully', 'success')
    return redirect(url_for('view_users'))

@app.route('/change_password/<int:user_id>', methods=['GET', 'POST'])
def change_password(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']
        if new_password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('change_password', user_id=user_id))

        hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))
            conn.commit()
        flash('Password updated successfully', 'success')
        return redirect(url_for('view_users'))

    return render_template('change_password.html', user_id=user_id)

@app.route('/document_tracker')
def document_tracker():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    # If you're not querying the documents, just render the page
    return render_template('document_tracker.html')

@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    try:
        with sqlite3.connect('users.db') as user_conn:
            user = user_conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
            if user:
                user_conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
                user_conn.commit()

        with sqlite3.connect('documents.db') as doc_conn:
            doc_conn.execute('DELETE FROM travel_authority WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM cto_application WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM leave_application WHERE user_id = ?', (user_id,))
            doc_conn.commit()

        flash('User and all associated data deleted successfully', 'success')
    except sqlite3.Error as e:
        flash(f"An error occurred: {e}", 'danger')

    return redirect(url_for('view_users'))

@app.route('/change_password_user', methods=['GET', 'POST'])
def change_password_user():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    if request.method == 'POST':
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            flash('New passwords do not match')
            return redirect(url_for('change_password_user'))

        with sqlite3.connect('users.db') as conn:
            user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
            if user and check_password_hash(user[3], current_password):
                hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
                conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, session['user_id']))
                conn.commit()
                flash('Password updated successfully', 'success')
                return redirect(url_for('user_dashboard'))
            else:
                flash('Current password is incorrect')
                return redirect(url_for('change_password_user'))

    return render_template('change_password_user.html')

@app.route('/approver_dashboard')
def approver_dashboard():
    if 'user_id' not in session or session.get('role') != 'approver':
        flash('Access denied')
        return redirect(url_for('index'))
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT * FROM cto_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        leave_applications = conn.execute('SELECT * FROM leave_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        travel_authorities = conn.execute('SELECT * FROM travel_authority WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
    return render_template(
        'approver_dashboard.html',
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities
    )

@app.route('/approve_application/<int:app_id>', methods=['POST'])
def approve_application(app_id):
    if 'user_id' not in session or session.get('role') != 'approver':
        return jsonify({'error': 'Access denied'}), 403
    application_type = request.form['application_type']
    
    with sqlite3.connect('documents.db') as conn:
        # Fetch the application data based on the type
        if application_type == 'cto':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE cto_application SET approval_status = "Approved", date_approved = date("now") WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'leave':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE leave_application SET approval_status = "Approved", date_approved = date("now") WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT name, position, purpose, start_date, end_date, destination FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            name, position, purpose, start_date, end_date, destination = application
            conn.execute('UPDATE travel_authority SET approval_status = "Approved", date_approved = date("now") WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, 0, start_date, end_date, destination, purpose))
        
        conn.commit()
    return jsonify({'success': True})


@app.route('/recommend_approval/<int:app_id>', methods=['POST'])
def recommend_approval(app_id):
    if 'user_id' not in session or session.get('role') != 'recommender':
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']

    with sqlite3.connect('documents.db') as conn:
        if application_type == 'cto':
            application = conn.execute('SELECT * FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE cto_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'leave':
            application = conn.execute('SELECT * FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE leave_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT * FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE travel_authority SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        
        # Add the application to the recommended_applications table
        conn.execute('''INSERT INTO recommended_applications 
                        (app_id, app_type, name, position, days, start_date, end_date, destination, purpose, leave_type, date_recommended)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                     (app_id, application_type, application[1], application[2], application[3], application[4], application[5], 
                      application[6] if application_type == 'travel_authority' else None, 
                      application[7] if application_type == 'travel_authority' else None, 
                      application[6] if application_type == 'leave' else None))
        conn.commit()

    return jsonify({'success': True})



@app.route('/recommender_dashboard')
def recommender_dashboard():
    if 'user_id' not in session or session.get('role') != 'recommender':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT * FROM cto_application WHERE recommending_approval IS NULL').fetchall()
        leave_applications = conn.execute('SELECT * FROM leave_application WHERE recommending_approval IS NULL').fetchall()
        travel_authorities = conn.execute('SELECT * FROM travel_authority WHERE recommending_approval IS NULL').fetchall()

    return render_template(
        'recommender_dashboard.html',
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities
    )

@app.route('/recommended_applications')
def recommended_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "cto"').fetchall()
        leave_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "leave"').fetchall()
        travel_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('recommended_applications.html', cto_recommended_apps=cto_recommended_apps, leave_recommended_apps=leave_recommended_apps, travel_recommended_apps=travel_recommended_apps)

@app.route('/approved_applications')
def approved_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "cto"').fetchall()
        leave_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "leave"').fetchall()
        travel_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('approved_applications.html', cto_approved_apps=cto_approved_apps, leave_approved_apps=leave_approved_apps, travel_approved_apps=travel_approved_apps)


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))  # Get the PORT from environment, default to 5000
    app.run(debug=True, host='0.0.0.0', port=port)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa; /* Light gray background */
        }
        .navbar {
            margin-bottom: 20px; /* Spacing below navbar */
        }
        .table {
            margin-top: 20px; /* Spacing above table */
            border-radius: 0.5rem; /* Rounded corners */
            overflow: hidden; /* Prevents overflow from rounded corners */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Shadow effect */
        }
        .table th {
            background-color: #007bff; /* Bootstrap primary color */
            color: white; /* White text for header */
        }
        .table tbody tr:hover {
            background-color: #e9ecef; /* Light gray hover effect */
        }
        .btn-custom {
            background-color: #007bff; /* Primary button color */
            color: white; /* White text */
            border-radius: 0.5rem; /* Rounded corners */
        }
        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
            {% if session.get('username') %}
                {{ session['username'] }} <!-- Display username if logged in -->
            {% else %}
                DocApp <!-- Display "DocApp" on login page or when not logged in -->
            {% endif %}
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                {% if session.get('role') == 'admin' %}
                <!-- Admin-specific links -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('admin_dashboard') }}">Admin Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('view_users') }}">View Users</a>
                </li>
                {% endif %}
                {% if session.get('role') == 'approver' %}
                <!-- Approver-specific links -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approver_dashboard') }}">Approver Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approved_applications') }}">Approved Applications</a>
                </li>
                {% endif %}
                {% if session.get('role') == 'recommender' %}
                <!-- Approver-specific links -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommender_dashboard') }}">Recommender Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommended_applications') }}">Recommended Applications</a>
                </li>
                {% endif %}

                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('user_dashboard') }}">User Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('submit_document') }}">Submit Application</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('document_tracker') }}">Document Tracker</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        {% for category, message in messages %}
        <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
        {% endif %}
        {% endwith %}

        {% block content %}
        <!-- Example table to demonstrate improved design -->
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Document Name</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Document 1</td>
                    <td>Submitted</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>Document 2</td>
                    <td>Pending</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
        {% endblock %}
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<h2>CTO Application</h2>
<form method="POST" action="{{ url_for('cto_application') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="days">No. of Days applied:</label>
        <input type="number" id="days" name="days" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<a href="{{ url_for('submit_document') }}" class="btn btn-secondary mt-3">Back</a>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Leave Application</h2>
<form method="POST" action="{{ url_for('leave_application') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="days">No. of Days applied:</label>
        <input type="number" id="days" name="days" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="leave_type">Type of Leave to be Availed:</label>
        <select id="leave_type" name="leave_type" class="form-control" required>
            <option value="Vacation Leave">Vacation Leave</option>
            <option value="Mandatory/Forced Leave">Mandatory/Forced Leave</option>
            <option value="Sick Leave">Sick Leave</option>
            <option value="Maternity Leave">Maternity Leave</option>
            <option value="Paternity Leave">Paternity Leave</option>
            <option value="Special Privilege Leave">Special Privilege Leave</option>
            <option value="Solo Parent Leave">Solo Parent Leave</option>
            <option value="Study Leave">Study Leave</option>
            <option value="10-Day VAWC Leave">10-Day VAWC Leave</option>
            <option value="Rehabilitation Privilege">Rehabilitation Privilege</option>
            <option value="Special Leave Benefits for Women">Special Leave Benefits for Women</option>
            <option value="Special Emergency (Calamity) Leave">Special Emergency (Calamity) Leave</option>
            <option value="Adoption Leave">Adoption Leave</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<a href="{{ url_for('submit_document') }}" class="btn btn-secondary mt-3">Back</a>
{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Schools Division of Calbayog City: Tracker</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <div class="container mt-5">
        <!-- Division Logo -->
        <div class="text-center">
            <img src="{{ url_for('static', filename='logo.png') }}" alt="Division Logo" class="mb-4" style="max-width: 150px;">
        </div>
        
        <h2 class="text-center">Login</h2>
        <form method="POST" action="{{ url_for('login') }}">
            <div class="form-group">
                <label for="username">Employee ID:</label>
                <input type="text" id="username" name="username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
        <a href="{{ url_for('register') }}" class="btn btn-secondary btn-block mt-3">Register</a>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<h2>Register</h2>
<form method="POST" action="{{ url_for('register') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="confirm_password">Confirm Password:</label>
        <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Submit Application</h2>
<form id="documentForm">
    <div class="form-group">
        <label for="document_type">Document Type:</label>
        <select id="document_type" name="document_type" class="form-control" required>
            <option value="Travel Authority">Travel Authority</option>
            <option value="CTO Application">CTO Application</option>
            <option value="Leave Application">Leave Application</option>
        </select>
    </div>
    
    <!-- New Division Dropdown -->
    <div class="form-group">
        <label for="division">Division:</label>
        <select id="division" name="division" class="form-control" required>
            <option value="OSDS">OSDS</option>
            <option value="SGOD">SGOD</option>
            <option value="CID">CID</option>
        </select>
    </div>

    <button type="button" class="btn btn-primary" onclick="redirectToForm()">Next</button>
</form>



<a href="{{ url_for('logout') }}" class="btn btn-secondary mt-3">Logout</a>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to My Dashboard</a>
<script>
function redirectToForm() {
    const documentType = document.getElementById('document_type').value;
    let redirectUrl = '';

    switch(documentType) {
        case 'Travel Authority':
            redirectUrl = "{{ url_for('travel_authority') }}";
            break;
        case 'CTO Application':
            redirectUrl = "{{ url_for('cto_application') }}";
            break;
        case 'Leave Application':
            redirectUrl = "{{ url_for('leave_application') }}";
            break;
    }

    window.location.href = redirectUrl;
}
</script>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Travel Authority</h2>
<form method="POST" action="{{ url_for('travel_authority') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="date">Date:</label>
        <input type="date" id="date" name="date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="purpose">Purpose:</label>
        <input type="text" id="purpose" name="purpose" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="host">Host of Activity:</label>
        <input type="text" id="host" name="host" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="destination">Destination:</label>
        <input type="text" id="destination" name="destination" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<a href="{{ url_for('submit_document') }}" class="btn btn-secondary mt-3">Back</a>
{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
            {% if session.get('username') %}
                {{ session['username'] }}  <!-- Display username if logged in -->
            {% else %}
                DocApp  <!-- Display "DocApp" on login page or when not logged in -->
            {% endif %}
        </a>

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                {% if session.get('role') == 'admin' %}
                <!-- Admin-specific links -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('admin_dashboard') }}">Admin Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('view_users') }}">View Users</a>
                </li>
                 {% endif %}

                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('user_dashboard') }}">User Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('submit_document') }}">Submit Application</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('document_tracker') }}">Document Tracker</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>
    
    <div class="container mt-5">
        <h2 class="mb-4 text-center">User Management</h2>

        <!-- Search Field -->
        <form method="GET" action="{{ url_for('view_users') }}" class="form-inline mb-4">
            <input type="text" name="search" class="form-control mr-2" placeholder="Search by Name or Username" value="{{ request.args.get('search', '') }}">
            <button type="submit" class="btn btn-primary">Search</button>
        </form>

        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered shadow-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Username</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr>
                        <td>{{ user[0] }}</td>
                        <td>{{ user[1] }}</td>
                        <td>{{ user[2] }}</td>
                        <td>{{ user[4] }}</td>
                        <td>
                            {% if user[2] != 'Admin' %}
                            <form action="{{ url_for('change_role', user_id=user[0]) }}" method="post" class="form-inline d-inline-block">
                                <select name="role" class="form-control mr-2">
                                    <option value="user" {% if user[4] == 'user' %}selected{% endif %}>User</option>
                                    <option value="admin" {% if user[4] == 'admin' %}selected{% endif %}>Admin</option>
                                    <option value="approver" {% if user[4] == 'approver' %}selected{% endif %}>Approver</option>
                                    <option value="recommender" {% if user[4] == 'recommender' %}selected{% endif %}>Recommender</option> <!-- New role -->
                                </select>
                                <button type="submit" class="btn btn-primary btn-sm">Update</button>
                            </form>
                            
                            <a href="{{ url_for('change_password', user_id=user[0]) }}" class="btn btn-warning btn-sm mt-1">Change Password</a>
                            <form action="{{ url_for('delete_user', user_id=user[0]) }}" method="post" class="d-inline-block mt-1" onsubmit="return confirm('Are you sure you want to delete this user and all their data?');">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <nav aria-label="User Pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if page > 1 %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page-1) }}" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
                {% endif %}
                {% for p in range(1, total_pages+1) %}
                <li class="page-item {% if p == page %}active{% endif %}">
                    <a class="page-link" href="{{ url_for('view_users', page=p) }}">{{ p }}</a>
                </li>
                {% endfor %}
                {% if page < total_pages %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page+1) }}" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
                {% endif %}
            </ul>
        </nav>

        <!-- Letter Indexes -->
        <div class="letter-indexes mt-4 text-center">
            {% for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' %}
            <a href="{{ url_for('view_users', letter=letter) }}" class="btn btn-outline-primary">{{ letter }}</a>
            {% endfor %}
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


