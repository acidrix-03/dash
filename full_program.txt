from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import os
import pandas as pd
from io import BytesIO
from flask_babel import Babel
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify
from flask import jsonify

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your_secret_key')

# Babel setup for multi-language support
babel = Babel(app)

# UPLOAD FOLDER for file uploads
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Allowed file extensions
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

# Database setup
def init_db():
    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             name TEXT NOT NULL,
                             username TEXT NOT NULL UNIQUE,
                             password TEXT NOT NULL,
                             role TEXT NOT NULL)''')
            admin_password = generate_password_hash('12345', method='pbkdf2:sha256')
            conn.execute('''INSERT OR IGNORE INTO users (name, username, password, role)
                            VALUES ('Admin', 'Admin', ?, 'admin')''', (admin_password,))
            conn.commit()
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

    try:
        with sqlite3.connect('documents.db') as conn:
            # Create CTO Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS cto_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL   
            )''')

            # Create a table for recommended applications
            conn.execute('''CREATE TABLE IF NOT EXISTS recommended_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_id INTEGER NOT NULL,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                leave_type TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create a table for approved applications
            conn.execute('''CREATE TABLE IF NOT EXISTS approved_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create Leave Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS leave_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL
            )''')

            # Create Travel Authority table
            conn.execute('''CREATE TABLE IF NOT EXISTS travel_authority (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                purpose TEXT NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL 
            )''')
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

import sqlite3

def add_rejection_comment_column():
    with sqlite3.connect('documents.db') as conn:
        # Adding rejection_comment column to cto_application
        conn.execute('ALTER TABLE cto_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE leave_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE travel_authority ADD COLUMN rejection_comment TEXT;')
        conn.commit()
        print("Columns added successfully.")

# Helper function to check allowed file extensions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Routes
@app.route('/add_column')
def add_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"
    
@app.route('/add_recommending_approval_column')
def add_recommending_approval_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    name = request.form['username']
    password = request.form['password']
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE name = ?', (name,)).fetchone()
        if user and check_password_hash(user[3], password):
            session['user_id'] = user[0]
            session['username'] = user[2]
            session['role'] = user[4]

            # Redirect based on user role
            if user[4] == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user[4] == 'approver':
                return redirect(url_for('approver_dashboard'))
            elif user[4] == 'recommender':
                return redirect(url_for('recommender_dashboard'))
            elif user[4] == 'unit_head':
                return redirect(url_for('unit_head_dashboard'))
            else:
                return redirect(url_for('user_dashboard'))
        else:
            flash('Invalid credentials')
            return redirect(url_for('index'))

@app.route('/user_dashboard')
def user_dashboard():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']
    with sqlite3.connect('documents.db') as conn:
        # Fetch the CTO applications
        cto_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, recommending_approval, approval_status, date_recommended FROM cto_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the leave applications
        leave_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, approval_status, date_recommended FROM leave_application WHERE user_id = ?', (user_id,)).fetchall()
        
        # Fetch the travel authority applications
        travel_authorities = conn.execute('SELECT id, name, position, purpose, start_date, end_date, destination, recommending_approval, approval_status FROM travel_authority WHERE user_id = ?', (user_id,)).fetchall()

    return render_template('user_dashboard.html', cto_applications=cto_applications, leave_applications=leave_applications, travel_authorities=travel_authorities)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        if password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('register'))
        with sqlite3.connect('users.db') as conn:
            try:
                conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                             (name, username, generate_password_hash(password, method='pbkdf2:sha256'), 'user'))
                conn.commit()
                flash('Registration successful')
                return redirect(url_for('index'))
            except sqlite3.IntegrityError:
                flash('Username already exists')
                return redirect(url_for('register'))
    return render_template('register.html')

@app.route('/submit_document', methods=['GET', 'POST'])
def submit_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    if request.method == 'POST':
        name = request.form['name']
        division = request.form['division']
        document = request.files['document']
        if document and allowed_file(document.filename):
            filename = secure_filename(document.filename)
            document.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('Document uploaded successfully')
        else:
            flash('Invalid file format')
        return redirect(url_for('submit_document'))
    return render_template('submit_document.html')

@app.route('/admin_dashboard')
def admin_dashboard():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        # Count all applications
        total_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application').fetchone()[0]
        total_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application').fetchone()[0]
        total_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority').fetchone()[0]
        
        # Count pending applications
        pending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Pending"').fetchone()[0]

        # Count applications for recommending
        recommending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]

        # Count approved applications
        approved_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Approved"').fetchone()[0]

    return render_template('admin_dashboard.html', 
                           total_cto=total_cto_applications,
                           total_leave=total_leave_applications,
                           total_travel=total_travel_authorities,
                           pending_cto=pending_cto_applications,
                           pending_leave=pending_leave_applications,
                           pending_travel=pending_travel_authorities,
                           recommending_cto=recommending_cto_applications,
                           recommending_leave=recommending_leave_applications,
                           recommending_travel=recommending_travel_authorities,
                           approved_cto=approved_cto_applications,
                           approved_leave=approved_leave_applications,
                           approved_travel=approved_travel_authorities)

@app.route('/view_users')
def view_users():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    search = request.args.get('search', '')
    letter = request.args.get('letter', '')
    page = request.args.get('page', 1, type=int)  # Current page number (default is 1)
    per_page = 20  # Number of users per page

    query = 'SELECT * FROM users WHERE 1=1'
    params = []

    if search:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'%{search}%', f'%{search}%'])

    if letter:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'{letter}%', f'{letter}%'])

    query += ' LIMIT ? OFFSET ?'
    params.extend([per_page, (page - 1) * per_page])

    with sqlite3.connect('users.db') as conn:
        total_users = conn.execute('SELECT COUNT(*) FROM users WHERE 1=1').fetchone()[0]
        users = conn.execute(query, params).fetchall()

    # Calculate total pages
    total_pages = (total_users + per_page - 1) // per_page

    return render_template('view_users.html', users=users, page=page, total_pages=total_pages, search=search, letter=letter)



@app.route('/clear_data', methods=['POST'])
def clear_data():
    admin_password = request.form['admin_password']
    with sqlite3.connect('users.db') as conn:
        admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('Admin',)).fetchone()
        if admin_user and check_password_hash(admin_user[3], admin_password):
            with sqlite3.connect('documents.db') as doc_conn:
                # Clear all application data
                doc_conn.execute('DELETE FROM cto_application')
                doc_conn.execute('DELETE FROM leave_application')
                doc_conn.execute('DELETE FROM travel_authority')
                # Clear recommended and approved applications as well
                doc_conn.execute('DELETE FROM recommended_applications')
                doc_conn.execute('DELETE FROM approved_applications')
                doc_conn.commit()
            flash('All data has been cleared successfully', 'success')
        else:
            flash('Invalid admin password', 'danger')
    return redirect(url_for('admin_dashboard'))



@app.route('/export_excel')
def export_excel():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        travel_authorities = pd.read_sql_query('SELECT * FROM travel_authority', conn)
        cto_applications = pd.read_sql_query('SELECT * FROM cto_application', conn)
        leave_applications = pd.read_sql_query('SELECT * FROM leave_application', conn)

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        travel_authorities.to_excel(writer, sheet_name='Travel Authorities', index=False)
        cto_applications.to_excel(writer, sheet_name='CTO Applications', index=False)
        leave_applications.to_excel(writer, sheet_name='Leave Applications', index=False)

    output.seek(0)
    return send_file(output, download_name='admin_data.xlsx', as_attachment=True)

@app.route('/export_users_excel')
def export_users_excel():
    with sqlite3.connect('users.db') as conn:
        users_df = pd.read_sql_query("SELECT * FROM users", conn)
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        users_df.to_excel(writer, sheet_name='Users', index=False)
    
    output.seek(0)
    return send_file(output, download_name='users_data.xlsx', as_attachment=True)

@app.route('/import_users_excel', methods=['POST'])
def import_users_excel():
    file = request.files['file']  # Handle file upload from the form
    if not file:
        flash('No file selected', 'error')
        return redirect(url_for('admin_dashboard'))

    try:
        users_df = pd.read_excel(file)
        
        # Convert all passwords to strings before hashing
        users_df['password'] = users_df['password'].astype(str)
        users_df['password'] = users_df['password'].apply(lambda x: generate_password_hash(x, method='pbkdf2:sha256'))

        with sqlite3.connect('users.db') as conn:
            for _, row in users_df.iterrows():
                try:
                    conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                                 (row['name'], row['username'], row['password'], row['role']))
                except sqlite3.IntegrityError:
                    flash(f"User {row['username']} already exists", 'warning')
        
        flash('Users imported successfully', 'success')
        return redirect(url_for('admin_dashboard'))
    except Exception as e:
        flash(f"Error importing users: {e}", 'error')
        return redirect(url_for('admin_dashboard'))

@app.route('/cancel_application/<app_type>/<int:app_id>', methods=['POST'])
def cancel_application(app_type, app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403
    
    with sqlite3.connect('documents.db') as conn:
        if app_type == 'cto':
            conn.execute('DELETE FROM cto_application WHERE id = ?', (app_id,))
        elif app_type == 'leave':
            conn.execute('DELETE FROM leave_application WHERE id = ?', (app_id,))
        elif app_type == 'travel_authority':
            conn.execute('DELETE FROM travel_authority WHERE id = ?', (app_id,))
        conn.commit()
    
    flash('Application cancelled successfully', 'success')
    return redirect(url_for('user_dashboard'))

@app.route('/reject_application/<int:app_id>', methods=['POST'])
def reject_application(app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    user_role = session.get('role')
    if user_role not in ['approver', 'unit_head', 'recommender']:
        return jsonify({'error': 'Access denied'}), 403

    rejection_comment = request.form.get('rejection_comment')
    application_type = request.form.get('application_type')  # Get the application type from the request

    with sqlite3.connect('documents.db') as conn:
        if application_type == 'cto':
            conn.execute('''
                UPDATE cto_application 
                SET approval_status = 'Rejected', rejection_comment = ? 
                WHERE id = ?
            ''', (rejection_comment, app_id))
        elif application_type == 'leave':
            conn.execute('''
                UPDATE leave_application 
                SET approval_status = 'Rejected', rejection_comment = ? 
                WHERE id = ?
            ''', (rejection_comment, app_id))
        elif application_type == 'travel_authority':
            conn.execute('''
                UPDATE travel_authority 
                SET approval_status = 'Rejected', rejection_comment = ? 
                WHERE id = ?
            ''', (rejection_comment, app_id))

        # Commit the changes
        conn.commit()

    return jsonify({'success': True})


@app.route('/cto_application', methods=['GET', 'POST'])
def cto_application():
    user_id = session['user_id']  # Get the logged-in user's ID

    if request.method == 'POST':
        # Handle form submission
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']

        # Insert the new CTO application into the database
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            conn.commit()

        flash('CTO Application submitted successfully!')
        return redirect(url_for('user_dashboard'))

    else:
        # Fetch existing CTO application for this user
        with sqlite3.connect('documents.db') as conn:
            conn.row_factory = sqlite3.Row  # Allows access to rows as dictionaries
            cto_application = conn.execute('SELECT * FROM cto_application WHERE user_id = ?', (user_id,)).fetchone()

        # Fetch Unit Head and Recommender usernames for the dropdown
        with sqlite3.connect('users.db') as conn:
            unit_heads = conn.execute('SELECT username FROM users WHERE role = "unit_head"').fetchall()
            recommenders = conn.execute('SELECT username FROM users WHERE role = "recommender"').fetchall()

        approving_users = [uh[0] for uh in unit_heads] + [rec[0] for rec in recommenders]

        # Pass the existing application (if any) to the template
        return render_template('cto_application.html', approving_users=approving_users, cto_application=cto_application)


@app.route('/print_cto_application/<int:cto_id>')
def print_cto_application(cto_id):
    with sqlite3.connect('documents.db') as conn:
        conn.row_factory = sqlite3.Row  # Allows accessing rows as dictionaries
        # Fetch all required fields from cto_application
        cto_application = conn.execute('''
            SELECT name, position, days, start_date, end_date, recommending_approval 
            FROM cto_application 
            WHERE id = ?
        ''', (cto_id,)).fetchone()

    if not cto_application:
        return "CTO Application not found.", 404

    # Render the print template with the application details
    return render_template('cto_print_template.html', 
                           name=cto_application['name'], 
                           position=cto_application['position'], 
                           days=cto_application['days'], 
                           start_date=cto_application['start_date'], 
                           end_date=cto_application['end_date'],
                           recommending_approval=cto_application['recommending_approval'])


@app.route('/submit_and_print_cto_application', methods=['POST'])
def submit_and_print_cto_application():
    user_id = session['user_id']  # Get the logged-in user's ID
    
    # Get form data
    name = request.form['name']
    position = request.form['position']
    days = request.form['days']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    recommending_approval = request.form['recommending_approval']
    
    # Insert the new CTO application into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (name, position, days, start_date, end_date, user_id, recommending_approval))
        conn.commit()

        # Get the last inserted ID
        cto_id = cursor.lastrowid

    # Redirect to the print view with the newly created CTO application
    return redirect(url_for('print_cto_application', cto_id=cto_id))

@app.route('/leave_application', methods=['GET', 'POST'])
def leave_application():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        leave_type = request.form['leave_type']
        recommending_approval = request.form['recommending_approval']  # Capture recommender/Unit Head choice
        user_id = session['user_id']  # Assuming user is logged in

        with sqlite3.connect('documents.db') as conn:
            conn.execute('''
                INSERT INTO leave_application (name, position, days, start_date, end_date, leave_type, user_id, recommending_approval)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (name, position, days, start_date, end_date, leave_type, user_id, recommending_approval))
            conn.commit()
            print("Leave application inserted successfully")
        
        flash('Leave Application submitted successfully!')
        return redirect(url_for('user_dashboard'))
    
    # Fetch Unit Heads and Recommenders for the dropdown
    with sqlite3.connect('users.db') as conn:
        unit_heads = conn.execute('SELECT username FROM users WHERE role = "unit_head"').fetchall()
        recommenders = conn.execute('SELECT username FROM users WHERE role = "recommender"').fetchall()

    # Combine the lists for dropdown
    approving_users = [uh[0] for uh in unit_heads] + [rec[0] for rec in recommenders]

    return render_template('leave_application.html', approving_users=approving_users)


@app.route('/travel_authority', methods=['GET', 'POST'])
def travel_authority():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        purpose = request.form['purpose']
        host = request.form['host']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        destination = request.form['destination']
        recommending_approval = request.form['recommending_approval']  # Capture selected recommender
        user_id = session['user_id']  # Logged-in user

        with sqlite3.connect('documents.db') as conn:
            conn.execute('''
                INSERT INTO travel_authority 
                (name, position, purpose, host, start_date, end_date, destination, user_id, recommending_approval)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (name, position, purpose, host, start_date, end_date, destination, user_id, recommending_approval))
            conn.commit()

        flash('Travel Authority submitted successfully!')
        return redirect(url_for('user_dashboard'))

    # Fetch recommenders and unit heads for the dropdown
    with sqlite3.connect('users.db') as conn:
        recommenders = conn.execute('SELECT username FROM users WHERE role = "recommender"').fetchall()
        unit_heads = conn.execute('SELECT username FROM users WHERE role = "unit_head"').fetchall()

    # Combine the results into a single list
    approving_users = [rec[0] for rec in recommenders] + [uh[0] for uh in unit_heads]

    return render_template('travel_authority.html', approving_users=approving_users)


@app.route('/change_role/<int:user_id>', methods=['POST'])
def change_role(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    new_role = request.form['role']
    with sqlite3.connect('users.db') as conn:
        conn.execute('UPDATE users SET role = ? WHERE id = ?', (new_role, user_id))
        conn.commit()

    flash('User role updated successfully', 'success')
    return redirect(url_for('view_users'))

@app.route('/change_password/<int:user_id>', methods=['GET', 'POST'])
def change_password(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']
        if new_password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('change_password', user_id=user_id))

        hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))
            conn.commit()
        flash('Password updated successfully', 'success')
        return redirect(url_for('view_users'))

    return render_template('change_password.html', user_id=user_id)

@app.route('/document_tracker')
def document_tracker():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    # If you're not querying the documents, just render the page
    return render_template('document_tracker.html')

@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    try:
        with sqlite3.connect('users.db') as user_conn:
            user = user_conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
            if user:
                user_conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
                user_conn.commit()

        with sqlite3.connect('documents.db') as doc_conn:
            doc_conn.execute('DELETE FROM travel_authority WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM cto_application WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM leave_application WHERE user_id = ?', (user_id,))
            doc_conn.commit()

        flash('User and all associated data deleted successfully', 'success')
    except sqlite3.Error as e:
        flash(f"An error occurred: {e}", 'danger')

    return redirect(url_for('view_users'))

@app.route('/change_password_user', methods=['GET', 'POST'])
def change_password_user():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    if request.method == 'POST':
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            flash('New passwords do not match')
            return redirect(url_for('change_password_user'))

        with sqlite3.connect('users.db') as conn:
            user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
            if user and check_password_hash(user[3], current_password):
                hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
                conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, session['user_id']))
                conn.commit()
                flash('Password updated successfully', 'success')
                return redirect(url_for('user_dashboard'))
            else:
                flash('Current password is incorrect')
                return redirect(url_for('change_password_user'))

    return render_template('change_password_user.html')

@app.route('/approver_dashboard')
def approver_dashboard():
    if 'user_id' not in session or session.get('role') != 'approver':
        flash('Access denied')
        return redirect(url_for('index'))

    approver_username = session['username']  # Correctly fetch the logged-in approver's username

    # Fetch applications assigned for approval
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT * FROM cto_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        leave_applications = conn.execute('SELECT * FROM leave_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        travel_authorities = conn.execute('SELECT * FROM travel_authority WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()

    return render_template(
        'approver_dashboard.html',
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities
    )


@app.route('/approve_application/<int:app_id>', methods=['POST'])
def approve_application(app_id):
    if 'user_id' not in session or session.get('role') != 'approver':
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']
    
    with sqlite3.connect('documents.db') as conn:
        # Fetch the application data based on the type
        if application_type == 'cto':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE cto_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'leave':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE leave_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT name, position, purpose, start_date, end_date, destination FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            name, position, purpose, start_date, end_date, destination = application
            conn.execute('UPDATE travel_authority SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, 0, start_date, end_date, destination, purpose))
        
        conn.commit()
    
    return jsonify({'success': True})

@app.route('/recommend_approval/<int:app_id>', methods=['POST'])
def recommend_approval(app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    user_role = session.get('role')
    username = session.get('username')

    # Allow both recommenders and unit heads to recommend approval
    if user_role not in ['recommender', 'unit_head']:
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']

    with sqlite3.connect('documents.db') as conn:
        if application_type == 'cto':
            application = conn.execute('SELECT * FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE cto_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'leave':
            application = conn.execute('SELECT * FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE leave_application SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT * FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            conn.execute('UPDATE travel_authority SET recommending_approval = "Recommended" WHERE id = ?', (app_id,))
        else:
            return jsonify({'error': 'Invalid application type'}), 400

        # Insert into recommended_applications table
        conn.execute('''
            INSERT INTO recommended_applications 
            (app_id, app_type, name, position, days, start_date, end_date, destination, purpose, leave_type, date_recommended, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, date("now"), ?)
        ''', (
            app_id,  # Application ID
            application_type,  # Type of the application (cto/leave/travel_authority)
            application[1],  # Name
            application[2],  # Position
            application[3],  # Days (for leave or CTO)
            application[4],  # Start Date
            application[5],  # End Date
            application[6] if application_type == 'travel_authority' else None,  # Destination for travel authority
            application[7] if application_type == 'travel_authority' else None,  # Purpose for travel authority
            application[6] if application_type == 'leave' else None,  # Leave type for leave applications
            username  # The person recommending approval (e.g., the unit head or recommender)
        ))

        conn.commit()

    return jsonify({'success': True})




@app.route('/recommender_dashboard')
def recommender_dashboard():
    if 'user_id' not in session or session.get('role') != 'recommender':
        flash('Access denied')
        return redirect(url_for('index'))

    recommender_username = session['username']  # Get the logged-in recommender's username

    # Fetch applications assigned to this recommender
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('''SELECT * FROM cto_application 
                                           WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                        (recommender_username,)).fetchall()

        leave_applications = conn.execute('''SELECT * FROM leave_application 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()

        travel_authorities = conn.execute('''SELECT * FROM travel_authority 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()

    return render_template('recommender_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)


LEAVE_TYPE_MAP = {
    "1": 'Sick Leave',
    "2": 'Vacation Leave',
    "3": 'Special Privilege Leave',
    "4": 'Maternity Leave',
    "5": 'Paternity Leave',
    "6": 'Solo Parent Leave',
    "7": 'Study Leave',
    "8": 'Special Leave Benefits for Women',
    "9": 'Emergency Leave',  # Example of adding a new leave type
    # Add more leave types as per your application
}

@app.route('/recommended_applications')
def recommended_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "cto"').fetchall()
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave"
        ''').fetchall()

        for app in leave_recommended_apps:
            print(f"Leave Type from DB: {app[6]}")  # This will show you what leave_type values are coming from the database
        

        # Apply leave type mapping
        leave_recommended_apps = [
            (app[0], app[1], app[2], app[3], app[4], app[5], LEAVE_TYPE_MAP.get(app[6], "Unknown Leave Type"), app[7])
            for app in leave_recommended_apps

        ]
        # for app in cto_recommended_apps:
        #     print(f"CTO Date Recommended from DB: {app}")  # This will show you what date_recommended values are coming from the database

        travel_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('recommended_applications.html', cto_recommended_apps=cto_recommended_apps, leave_recommended_apps=leave_recommended_apps, travel_recommended_apps=travel_recommended_apps)

@app.route('/approved_applications')
def approved_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "cto"').fetchall()
        leave_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "leave"').fetchall()
        travel_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('approved_applications.html', cto_approved_apps=cto_approved_apps, leave_approved_apps=leave_approved_apps, travel_approved_apps=travel_approved_apps)

@app.route('/unit_head_dashboard')
def unit_head_dashboard():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Ensure the logged-in unit head's username is used

    with sqlite3.connect('documents.db') as conn:
        # Fetch applications specifically assigned to the logged-in unit head
        cto_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM cto_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        leave_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM leave_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        travel_authorities = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination 
            FROM travel_authority 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

    return render_template('unit_head_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)

@app.route('/recommended_head')
def recommended_head():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Logged-in unit head's username
    print(f"Unit Head Username: {unit_head_username}")  # Debugging line

    with sqlite3.connect('documents.db') as conn:
        # Fetch recommended CTO applications by this unit head
        cto_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "cto" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"CTO Recommended Apps: {len(cto_recommended_apps)}")  # Count instead of full output for cleaner debugging

        # Fetch recommended Leave applications by this unit head
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Leave Recommended Apps: {len(leave_recommended_apps)}")  # Cleaner output

        # Fetch recommended Travel Authority applications by this unit head
        travel_recommended_apps = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "travel_authority" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Travel Recommended Apps: {len(travel_recommended_apps)}")  # Cleaner output

    # Check if data is fetched and returned correctly
    if not cto_recommended_apps and not leave_recommended_apps and not travel_recommended_apps:
        flash("No recommended applications found.")
    
    return render_template('recommended_head.html', 
                           cto_recommended_apps=cto_recommended_apps, 
                           leave_recommended_apps=leave_recommended_apps, 
                           travel_recommended_apps=travel_recommended_apps)



if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))  # Get the PORT from environment, default to 5000
    app.run(debug=True, host='0.0.0.0', port=port)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SDO Calbayog Tracker</title>

    <!-- Keep Bootstrap 5 only for consistency -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Custom Styles -->
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    
    <style>
        body {
            background-color: #f8f9fa; /* Light gray background */
        }
        .navbar {
            margin-bottom: 20px; /* Spacing below navbar */
        }
        .table {
            margin-top: 20px; /* Spacing above table */
            border-radius: 0.5rem; /* Rounded corners */
            overflow: hidden; /* Prevents overflow from rounded corners */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Shadow effect */
        }
        .table th {
            background-color: #007bff; /* Bootstrap primary color */
            color: white; /* White text for header */
        }
        .table tbody tr:hover {
            background-color: #e9ecef; /* Light gray hover effect */
        }
        .btn-custom {
            background-color: #007bff; /* Primary button color */
            color: white; /* White text */
            border-radius: 0.5rem; /* Rounded corners */
        }
        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
    </style>
</head>
<body>
    <!-- Updated Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
            {% if session.get('username') %}
                {{ session['username'] }} <!-- Display username if logged in -->
            {% else %}
                DocApp <!-- Display "DocApp" on login page or when not logged in -->
            {% endif %}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <!-- Admin-specific links -->
                {% if session.get('role') == 'admin' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('admin_dashboard') }}">
                        <i class="fas fa-tachometer-alt"></i> Admin Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('view_users') }}">
                        <i class="fas fa-users"></i> View Users
                    </a>
                </li>
                {% endif %}

                <!-- Approver-specific links -->
                {% if session.get('role') == 'approver' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approver_dashboard') }}">
                        <i class="fas fa-check-circle"></i> Approver Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approved_applications') }}">
                        <i class="fas fa-file-signature"></i> Approved Applications <!-- Same icon as Recommended Applications -->
                    </a>
                </li>
                {% endif %}

                <!-- Recommender-specific links -->
                {% if session.get('role') == 'recommender' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommender_dashboard') }}">
                        <i class="fas fa-thumbs-up"></i> Recommender Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommended_applications') }}">
                        <i class="fas fa-file-signature"></i> Recommended Applications
                    </a>
                </li>
                {% endif %}

                <!-- Unit Head-specific links -->
                {% if session.get('role') == 'unit_head' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('unit_head_dashboard') }}">
                        <i class="fas fa-user-tie"></i> Unit Head Dashboard
                    </a>
                </li>
                {% endif %}                
                
                <!-- Common user links (if logged in) -->
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('user_dashboard') }}">
                        <i class="fas fa-user"></i> User Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('submit_document') }}">
                        <i class="fas fa-file-upload"></i> Submit Application
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('document_tracker') }}">
                        <i class="fas fa-folder-open"></i> Document Tracker
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        {% for category, message in messages %}
        <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
        {% endif %}
        {% endwith %}

        {% block content %}
        <!-- Example table to demonstrate improved design -->
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Document Name</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Document 1</td>
                    <td>Submitted</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>Document 2</td>
                    <td>Pending</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
        {% endblock %}
    </div>

    <!-- Bootstrap and Popper.js Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CTO Application</title>
</head>
<body>
    <form id="ctoForm" method="POST" action="{{ url_for('submit_and_print_cto_application') }}" target="_blank">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="position">Position:</label>
            <input type="text" id="position" name="position" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="days">No. of Days applied:</label>
            <input type="number" id="days" name="days" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="recommending_approval">Recommender:</label>
            <select id="recommending_approval" name="recommending_approval" class="form-control" required>
                <option value="">Select Recommender</option>
                {% for user in approving_users %}
                    <option value="{{ user }}">{{ user }}</option>
                {% endfor %}
            </select>
        </div>
        
        <!-- Submit and Print Button -->
        <button type="button" class="btn btn-primary" onclick="handleSubmit()">Submit and Print CTO Application</button>
    </form>
</body>
</html>

<script>
    function handleSubmit() {
        // Submit the form to open the print preview in a new tab
        const form = document.getElementById('ctoForm');
        form.submit();

        // Redirect to the dashboard after form submission
        setTimeout(function() {
            window.location.href = "{{ url_for('user_dashboard') }}";
        }, 500); // Short delay to ensure form submission happens first
    }
</script>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Leave Application</h2>
<form method="POST" action="{{ url_for('leave_application') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="days">No. of Days applied:</label>
        <input type="number" id="days" name="days" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="leave_type">Type of Leave to be Availed:</label>
        <select id="leave_type" name="leave_type" class="form-control" required>
            <option value="Vacation Leave">Vacation Leave</option>
            <option value="Mandatory/Forced Leave">Mandatory/Forced Leave</option>
            <option value="Sick Leave">Sick Leave</option>
            <option value="Maternity Leave">Maternity Leave</option>
            <option value="Paternity Leave">Paternity Leave</option>
            <option value="Special Privilege Leave">Special Privilege Leave</option>
            <option value="Solo Parent Leave">Solo Parent Leave</option>
            <option value="Study Leave">Study Leave</option>
            <option value="10-Day VAWC Leave">10-Day VAWC Leave</option>
            <option value="Rehabilitation Privilege">Rehabilitation Privilege</option>
            <option value="Special Leave Benefits for Women">Special Leave Benefits for Women</option>
            <option value="Special Emergency (Calamity) Leave">Special Emergency (Calamity) Leave</option>
            <option value="Adoption Leave">Adoption Leave</option>
        </select>
    </div>
    <div class="form-group">
        <label for="recommending_approval">Recommending Approval:</label>
        <select id="recommending_approval" name="recommending_approval" class="form-control" required>
            <option value="">Select Recommender</option>
            {% for user in approving_users %}
                <option value="{{ user }}">{{ user }}</option>
            {% endfor %}
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<a href="{{ url_for('submit_document') }}" class="btn btn-secondary mt-3">Back</a>
{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Schools Division of Calbayog City: Tracker</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <div class="container mt-5">
        <!-- Division Logo -->
        <div class="text-center">
            <img src="{{ url_for('static', filename='logo.png') }}" alt="Division Logo" class="mb-4" style="max-width: 150px;">
        </div>
        
        <h2 class="text-center">Login</h2>
        <form method="POST" action="{{ url_for('login') }}">
            <div class="form-group">
                <label for="username">Employee ID:</label>
                <input type="text" id="username" name="username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
        <a href="{{ url_for('register') }}" class="btn btn-secondary btn-block mt-3">Register</a>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


{% extends "base.html" %}
{% block content %}
<h2>Register</h2>
<form method="POST" action="{{ url_for('register') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="confirm_password">Confirm Password:</label>
        <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Submit Application</h2>
<form id="documentForm">
    <div class="form-group">
        <label for="document_type">Document Type:</label>
        <select id="document_type" name="document_type" class="form-control" required>
            <option value="Travel Authority">Travel Authority</option>
            <option value="CTO Application">CTO Application</option>
            <option value="Leave Application">Leave Application</option>
        </select>
    </div>
    
    <!-- New Division Dropdown -->
    <div class="form-group">
        <label for="division">Division:</label>
        <select id="division" name="division" class="form-control" required>
            <option value="OSDS">OSDS</option>
            <option value="SGOD">SGOD</option>
            <option value="CID">CID</option>
        </select>
    </div>

    <button type="button" class="btn btn-primary" onclick="redirectToForm()">Next</button>
</form>



<a href="{{ url_for('logout') }}" class="btn btn-secondary mt-3">Logout</a>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to My Dashboard</a>
<script>
function redirectToForm() {
    const documentType = document.getElementById('document_type').value;
    let redirectUrl = '';

    switch(documentType) {
        case 'Travel Authority':
            redirectUrl = "{{ url_for('travel_authority') }}";
            break;
        case 'CTO Application':
            redirectUrl = "{{ url_for('cto_application') }}";
            break;
        case 'Leave Application':
            redirectUrl = "{{ url_for('leave_application') }}";
            break;
    }

    window.location.href = redirectUrl;
}
</script>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Travel Authority</h2>
<form method="POST" action="{{ url_for('travel_authority') }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" required>
    </div>
    <!-- <div class="form-group">
        <label for="date">Date:</label>
        <input type="date" id="date" name="date" class="form-control" required>
    </div> -->
    <div class="form-group">
        <label for="purpose">Purpose:</label>
        <input type="text" id="purpose" name="purpose" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="host">Host of Activity:</label>
        <input type="text" id="host" name="host" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="start_date">Start Date:</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">End Date:</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="destination">Destination:</label>
        <input type="text" id="destination" name="destination" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="recommending_approval">Recommending Approval:</label>
        <select id="recommending_approval" name="recommending_approval" class="form-control" required>
            <option value="">Select Recommender</option>
            {% for user in approving_users %}
                <option value="{{ user }}">{{ user }}</option>
            {% endfor %}
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<a href="{{ url_for('submit_document') }}" class="btn btn-secondary mt-3">Back</a>
{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
       
    <div class="container mt-5">
        <h2 class="mb-4 text-center">User Management</h2>

        <!-- Search Field -->
        <form method="GET" action="{{ url_for('view_users') }}" class="form-inline mb-4">
            <input type="text" name="search" class="form-control mr-2" placeholder="Search by Name or Username" value="{{ request.args.get('search', '') }}">
            <button type="submit" class="btn btn-primary">Search</button>
        </form>

        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered shadow-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Employee ID</th>
                        <th>Name</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr>
                        <td>{{ user[0] }}</td>
                        <td>{{ user[1] }}</td>
                        <td>{{ user[2] }}</td>
                        <td>{{ user[4] }}</td>
                        <td>
                            {% if user[2] != 'Admin' %}
                            <form action="{{ url_for('change_role', user_id=user[0]) }}" method="post" class="form-inline d-inline-block">
                                <select name="role" class="form-control mr-2">
                                    <option value="user" {% if user[4] == 'user' %}selected{% endif %}>User</option>
                                    <option value="admin" {% if user[4] == 'admin' %}selected{% endif %}>Admin</option>
                                    <option value="approver" {% if user[4] == 'approver' %}selected{% endif %}>Approver</option>
                                    <option value="recommender" {% if user[4] == 'recommender' %}selected{% endif %}>Recommender</option>
                                    <option value="unit_head" {% if user[4] == 'unit_head' %}selected{% endif %}>Unit Head</option>
                                </select>
                                <button type="submit" class="btn btn-primary btn-sm">Update</button>
                            </form>
                            
                            <a href="{{ url_for('change_password', user_id=user[0]) }}" class="btn btn-warning btn-sm mt-1">Change Password</a>
                            <form action="{{ url_for('delete_user', user_id=user[0]) }}" method="post" class="d-inline-block mt-1" onsubmit="return confirm('Are you sure you want to delete this user and all their data?');">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <nav aria-label="User Pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if page > 1 %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page-1) }}" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
                {% endif %}
                {% for p in range(1, total_pages+1) %}
                <li class="page-item {% if p == page %}active{% endif %}">
                    <a class="page-link" href="{{ url_for('view_users', page=p) }}">{{ p }}</a>
                </li>
                {% endfor %}
                {% if page < total_pages %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page+1) }}" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
                {% endif %}
            </ul>
        </nav>

        <!-- Letter Indexes -->
        <div class="letter-indexes mt-4 text-center">
            {% for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' %}
            <a href="{{ url_for('view_users', letter=letter) }}" class="btn btn-outline-primary">{{ letter }}</a>
            {% endfor %}
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

{% endblock %}

{% extends "base.html" %}
{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2>Admin Dashboard</h2>

        <!-- Application Counts -->
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total CTO Applications</h5>
                        <p class="card-text">{{ total_cto }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total Leave Applications</h5>
                        <p class="card-text">{{ total_leave }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Total Travel Authorities</h5>
                        <p class="card-text">{{ total_travel }}</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="mt-4">Pending Applications</h3>
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Pending CTO Applications</h5>
                        <p class="card-text">{{ pending_cto }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Pending Leave Applications</h5>
                        <p class="card-text">{{ pending_leave }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Pending Travel Authorities</h5>
                        <p class="card-text">{{ pending_travel }}</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="mt-4">Applications for Recommending</h3>
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">For Recommending CTO Applications</h5>
                        <p class="card-text">{{ recommending_cto }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">For Recommending Leave Applications</h5>
                        <p class="card-text">{{ recommending_leave }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">For Recommending Travel Authorities</h5>
                        <p class="card-text">{{ recommending_travel }}</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="mt-4">Approved Applications</h3>
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Approved CTO Applications</h5>
                        <p class="card-text">{{ approved_cto }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Approved Leave Applications</h5>
                        <p class="card-text">{{ approved_leave }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Approved Travel Authorities</h5>
                        <p class="card-text">{{ approved_travel }}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

 <!-- Button Section -->
 <div class="container mt-4">
    <div class="row">
        <!-- View Users Button -->
        <div class="col-md-4 mb-3">
            <a href="{{ url_for('view_users') }}" class="btn btn-primary btn-block">View Users</a>
        </div>
        <!-- Export Users to Excel Button -->
        <div class="col-md-4 mb-3">
            <a href="{{ url_for('export_users_excel') }}" class="btn btn-success btn-block">Export Users to Excel</a>
        </div>
        <!-- Import Users from Excel Form -->
        <div class="col-md-4 mb-3">
            <form method="POST" action="{{ url_for('import_users_excel') }}" enctype="multipart/form-data">
                <div class="custom-file mb-2">
                    <input type="file" class="custom-file-input" name="file" accept=".xlsx" required>
                    <label class="custom-file-label" for="file">Choose Excel file</label>
                </div>
                <button type="submit" class="btn btn-warning btn-block">Import Users from Excel</button>
            </form>
        </div>
    </div>
    <div class="row mt-4">
        <!-- Submit Document Button -->
        <div class="col-md-6 mb-3">
            <a href="{{ url_for('submit_document') }}" class="btn btn-primary btn-block">Submit Application</a>
        </div>
        <div class="col-md-6 mb-3">
            <a href="{{ url_for('document_tracker') }}" class="btn btn-primary btn-block">Submit Document</a>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-md-12 mb-3">
            <a href="{{ url_for('user_dashboard') }}" class="btn btn-info btn-block">Go to User Dashboard</a>
        </div>
    </div>
</div>
<!-- <div class="row">
    <div class="col-md-12 text-center mt-4">
        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#confirmDeleteModal">
            Clear All Data
        </button>
    </div>
</div> -->
<!-- Modal for Delete Confirmation -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="deleteForm" method="POST" action="{{ url_for('clear_data') }}">
                    <p>Are you sure you want to delete all data? This action cannot be undone.</p>
                    <div class="form-group">
                        <label for="admin_password">Admin Password:</label>
                        <input type="password" id="admin_password" name="admin_password" class="form-control" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="submit" form="deleteForm" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>
</div>


<form action="{{ url_for('clear_data') }}" method="POST" onsubmit="return confirmClearData();">
    <input type="password" name="admin_password" placeholder="Enter admin password" required>
    <button type="submit" class="btn btn-danger">Clear All Data</button>
</form>

<script>
function confirmClearData() {
    return confirm('Are you sure you want to clear all data? This action cannot be undone.');
}
</script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Approver Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .table {
            margin-top: 20px;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .table th {
            background-color: #007bff;
            color: white;
        }
        .table tbody tr:hover {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #007bff;
            color: white;
            border-radius: 0.5rem;
        }
        .btn-custom:hover {
            background-color: #0056b3;
        }
    </style>
</head>

<body>

<div class="container">
    <h2 class="mb-4">Approver Dashboard</h2>

    <!-- CTO Applications Table -->
    <h4>CTO Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in cto_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[7] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success approve-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Approve
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Reject -->
                    </button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications Table -->
    <h4>Leave Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Leave Type</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in leave_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[7] }}</td>
                <td>{{ application[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success approve-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Approve
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authorities Table -->
    <h4>Travel Authorities</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for authority in travel_authorities %}
            <tr id="row-{{ authority[0] }}">
                <td>{{ authority[1] }}</td>
                <td>{{ authority[2] }}</td>
                <td>{{ authority[3] }}</td>
                <td>{{ authority[4] }}</td>
                <td>{{ authority[5] }}</td>
                <td>{{ authority[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success approve-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Approve
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for approving applications
        $('.approve-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/approve_application/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Approved').attr('disabled', true).removeClass('btn-success').addClass('btn-secondary');
                        alert('Application successfully approved!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // AJAX for rejecting applications
        $('.reject-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var rejectionComment = prompt("Please enter a reason for rejection:");

            if (rejectionComment) {
                $.ajax({
                    type: 'POST',
                    url: '/reject_application/' + appId,
                    data: { rejection_comment: rejectionComment },
                    success: function(response) {
                        if (response.success) {
                            alert("Application rejected with comment: " + rejectionComment);
                            button.closest('tr').remove();  // Remove the row from the table
                        } else {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>

</body>
<a href="{{ url_for('approved_applications') }}" class="btn btn-primary mb-3">See Approved Applications</a>
</html>

{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Approved Applications</h2>

<h3>CTO Applications</h3>
<input type="text" id="ctoInput" onkeyup="filterTable('ctoTable', 'ctoInput')" placeholder="Search for names..">
<table class="table table-striped" id="ctoTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Date Approved</th>
        </tr>
    </thead>
    <tbody>
        {% for app in cto_approved_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[9] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Leave Applications</h3>
<input type="text" id="leaveInput" onkeyup="filterTable('leaveTable', 'leaveInput')" placeholder="Search for names..">
<table class="table table-striped" id="leaveTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <!-- <th>Leave Type</th> Leave Type column -->
            <th>Date Approved</th>
        </tr>
    </thead>
    <tbody>
        {% for app in leave_approved_apps %}
        <tr>
            <td>{{ app[0] }}</td> <!-- ID -->
            <td>{{ app[2] }}</td> <!-- Name -->
            <td>{{ app[3] }}</td> <!-- Position -->
            <td>{{ app[4] }}</td> <!-- Days -->
            <td>{{ app[5] }}</td> <!-- Start Date -->
            <td>{{ app[6] }}</td> <!-- End Date -->
            <!-- <td>{{ app [7]}}</td> Leave Type -->
            <td>{{ app[9] }}</td> <!-- Date Approved -->
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Travel Authorities</h3>
<input type="text" id="travelInput" onkeyup="filterTable('travelTable', 'travelInput')" placeholder="Search for names..">
<table class="table table-striped" id="travelTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Destination</th>
            <th>Purpose</th>
            <th>Date Approved</th>
        </tr>
    </thead>
    <tbody>
        {% for app in travel_approved_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[7] }}</td>
            <td>{{ app[8] }}</td>
            <td>{{ app[9] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<script>
function filterTable(tableId, inputId) {
    var input, filter, table, tr, td, i, j, txtValue;
    input = document.getElementById(inputId);
    filter = input.value.toLowerCase();
    table = document.getElementById(tableId);
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 1; i < tr.length; i++) {
        tr[i].style.display = "none"; // Hide the row initially
        td = tr[i].getElementsByTagName("td");
        for (j = 0; j < td.length; j++) {
            if (td[j]) {
                txtValue = td[j].textContent || td[j].innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = ""; // Show the row if it matches
                    break; // No need to check other cells in the row
                }
            }
        }
    }
}
</script>

<a href="{{ url_for('approver_dashboard') }}" class="btn btn-primary mb-3">Go back to dashboard</a>

{% endblock %}


{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Change Password</h2>
    <form method="POST" action="{{ url_for('change_password', user_id=user_id) }}">
        <div class="form-group">
            <label for="new_password">New Password:</label>
            <input type="password" id="new_password" name="new_password" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="confirm_password">Confirm Password:</label>
            <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
    <a href="{{ url_for('view_users') }}" class="btn btn-secondary mt-3">Back to Users</a>
</div>
{% endblock %}


{% extends "base.html" %}

{% block content %}
<h2>This will be the Documents Tracker page</h2>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
{% endblock %}


{% extends "base.html" %}
{% block content %}
<h2>Recommended Applications</h2>

<h3>CTO Applications</h3>
<input type="text" id="ctoFilterInput" onkeyup="filterTable('ctoTable', 'ctoFilterInput')" placeholder="Search for names..">
<table id="ctoTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in cto_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Leave Applications</h3>
<input type="text" id="leaveFilterInput" onkeyup="filterTable('leaveTable', 'leaveFilterInput')" placeholder="Search for names..">
<table id="leaveTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Leave Type</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in leave_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[7] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<h3>Travel Authorities</h3>
<input type="text" id="travelFilterInput" onkeyup="filterTable('travelTable', 'travelFilterInput')" placeholder="Search for names..">
<table id="travelTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Destination</th>
            <th>Purpose</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in travel_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[7] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<script>
function filterTable(tableId, inputId) {
    var input, filter, table, tr, td, i, j, txtValue;
    input = document.getElementById(inputId);
    filter = input.value.toLowerCase();
    table = document.getElementById(tableId);
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 1; i < tr.length; i++) {
        tr[i].style.display = "none"; // Hide the row initially
        td = tr[i].getElementsByTagName("td");
        for (j = 0; j < td.length; j++) {
            if (td[j]) {
                txtValue = td[j].textContent || td[j].innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = ""; // Show the row if it matches
                    break; // No need to check other cells in the row
                }
            }
        }
    }
}
</script>

<a href="{{ url_for('recommender_dashboard') }}" class="btn btn-secondary mb-3">Go back to Dashboard</a>

{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recommender Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .table {
            margin-top: 20px;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .table th {
            background-color: #007bff;
            color: white;
        }
        .table tbody tr:hover {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #007bff;
            color: white;
            border-radius: 0.5rem;
        }
        .btn-custom:hover {
            background-color: #0056b3;
        }
    </style>
</head>

<body>

<div class="container">
    <h2 class="mb-4">Recommender Dashboard</h2>

    <!-- CTO Applications Table -->
    <h4>CTO Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in cto_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>
                    <button class="btn btn-primary recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications Table -->
    <h4>Leave Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Leave Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in leave_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[7] }}</td>
                <td>
                    <button class="btn btn-primary recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authorities Table -->
    <h4>Travel Authorities</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for authority in travel_authorities %}
            <tr id="row-{{ authority[0] }}">
                <td>{{ authority[1] }}</td>
                <td>{{ authority[2] }}</td>
                <td>{{ authority[3] }}</td>
                <td>{{ authority[4] }}</td>
                <td>{{ authority[5] }}</td>
                <td>
                    <button class="btn btn-primary recommend-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommend approval
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // AJAX for reject application
        $('.reject-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var rejectionComment = prompt("Please enter a reason for rejection:");

            if (rejectionComment) {
                $.ajax({
                    type: 'POST',
                    url: '/reject_application/' + appId,
                    data: { rejection_comment: rejectionComment },
                    success: function(response) {
                        if (response.success) {
                            alert("Application rejected with comment: " + rejectionComment);
                            button.closest('tr').remove();  // Remove the row from the table
                        } else {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>

</body>
<a href="{{ url_for('recommended_applications') }}" class="btn btn-primary mb-3">See Recommended Applications</a>
</html>

{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .table {
            margin-top: 20px;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .table th {
            background-color: #007bff;
            color: white;
        }
        .table tbody tr:hover {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #007bff;
            color: white;
            border-radius: 0.5rem;
        }
        .btn-custom:hover {
            background-color: #0056b3;
        }
        .filter-input {
            margin-bottom: 15px;
        }
    </style>

    <div class="container">
        <h2 class="mb-4">User Dashboard</h2>

        <!-- Filter inputs -->
        <div class="row">
            <div class="col-md-4">
                <input type="date" id="dateFilter" class="form-control filter-input" placeholder="Filter by Date">
            </div>
        </div>

        <!-- CTO Applications Table -->
        <h4>CTO Applications</h4>
        <table class="table table-striped" id="ctoTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                {% for application in cto_applications %}
                <tr>
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>
                        {% if application[7] == 'Approved' %}
                            Approved
                        {% elif application[6] == 'Recommended' %}
                            Recommended
                        {% elif application[7] == 'Rejected' %}
                            Rejected
                        {% else %}
                            Pending
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Leave Applications Table -->
        <h4>Leave Applications</h4>
        <table class="table table-striped" id="leaveTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Type of Leave</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                {% for application in leave_applications %}
                <tr>
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[6] }}</td>
                    <td>
                        {% if application[8] == 'Approved' %}
                            Approved
                        {% elif application[8] == 'Rejected' %}  <!-- Check for Rejected status -->
                            Rejected
                        {% elif application[7] == 'Recommended' %}  <!-- Check for Recommended status -->
                            Recommended
                        {% else %}
                            Pending
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <!-- Travel Authority Table -->
        <h4>Travel Authorities</h4>
        <table class="table table-striped" id="travelTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Purpose</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Destination</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                {% for authority in travel_authorities %}
                <tr>
                    <td>{{ authority[1] }}</td>
                    <td>{{ authority[2] }}</td>
                    <td>{{ authority[3] }}</td>
                    <td>{{ authority[4] }}</td>
                    <td>{{ authority[5] }}</td>
                    <td>{{ authority[6] }}</td>
                    <td>
                        {% if authority[8] == 'Approved' %}
                            Approved
                        {% elif authority[7] == 'Recommended' %}
                            Recommended
                        {% elif authority[8] == 'Rejected' %}  <!-- Check for Rejected status -->
                            Rejected
                        {% else %}
                            Pending
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

    </div>

    <script>
        document.getElementById('dateFilter').addEventListener('change', function() {
            filterTable();
        });

        function filterTable() {
            let dateFilter = document.getElementById('dateFilter').value;

            filterSpecificTable('ctoTable', dateFilter);
            filterSpecificTable('leaveTable', dateFilter);
            filterSpecificTable('travelTable', dateFilter);
        }

        function filterSpecificTable(tableId, dateFilter) {
            let table = document.getElementById(tableId);
            let tr = table.getElementsByTagName('tr');

            for (let i = 1; i < tr.length; i++) {
                let tdStartDate = tr[i].getElementsByTagName('td')[3];

                if (tdStartDate) {
                    let startDateValue = tdStartDate.textContent;

                    let dateMatch = dateFilter === "" || startDateValue.startsWith(dateFilter);

                    if (dateMatch) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }
    </script>
    <a href="{{ url_for('submit_document') }}" class="btn btn-secondary mb-3">Submit Application</a>
    <a href="{{ url_for('document_tracker') }}" class="btn btn-secondary mb-3">Submit Document</a>

</body>
</html>

{% endblock %}


{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unit Head Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .table {
            margin-top: 20px;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .table th {
            background-color: #007bff;
            color: white;
        }
        .table tbody tr:hover {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #007bff;
            color: white;
            border-radius: 0.5rem;
        }
        .btn-custom:hover {
            background-color: #0056b3;
        }
    </style>
</head>

<body>

<div class="container">
    <h2 class="mb-4">Unit Head Dashboard</h2>

    <!-- CTO Applications Table -->
    <h4>CTO Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in cto_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[7] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications Table -->
    <h4>Leave Applications</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in leave_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authorities Table -->
    <h4>Travel Authorities</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for authority in travel_authorities %}
            <tr id="row-{{ authority[0] }}">
                <td>{{ authority[1] }}</td>
                <td>{{ authority[2] }}</td>
                <td>{{ authority[3] }}</td>
                <td>{{ authority[4] }}</td>
                <td>{{ authority[5] }}</td>
                <td>{{ authority[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // AJAX for rejecting applications
        $('.reject-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var rejectionComment = prompt("Please enter a reason for rejection:");

            if (rejectionComment) {
                $.ajax({
                    type: 'POST',
                    url: '/reject_application/' + appId,
                    data: { rejection_comment: rejectionComment },
                    success: function(response) {
                        if (response.success) {
                            alert("Application rejected with comment: " + rejectionComment);
                            button.closest('tr').remove();  // Remove the row from the table
                        } else {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>

</body>
<a href="{{ url_for('recommended_head') }}" class="btn btn-primary mb-3">See Recommended Applications</a>
</html>

{% endblock %}


{% extends "base.html" %}

{% block content %}
<h2>Recommended Applications for Unit Head</h2>

<!-- CTO Applications -->
<h3>CTO Applications</h3>
<input type="text" id="ctoFilterInput" class="filter-input" onkeyup="filterTable('ctoTable', 'ctoFilterInput')" placeholder="Search for names..">
<table id="ctoTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in cto_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<!-- Leave Applications -->
<h3>Leave Applications</h3>
<input type="text" id="leaveFilterInput" class="filter-input" onkeyup="filterTable('leaveTable', 'leaveFilterInput')" placeholder="Search for names..">
<table id="leaveTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Days</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Leave Type</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in leave_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[7] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<!-- Travel Authority Applications -->
<h3>Travel Authority Applications</h3>
<input type="text" id="travelFilterInput" class="filter-input" onkeyup="filterTable('travelTable', 'travelFilterInput')" placeholder="Search for names..">
<table id="travelTable" class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Position</th>
            <th>Purpose</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Destination</th>
            <th>Date Recommended</th>
        </tr>
    </thead>
    <tbody>
        {% for app in travel_recommended_apps %}
        <tr>
            <td>{{ app[0] }}</td>
            <td>{{ app[1] }}</td>
            <td>{{ app[2] }}</td>
            <td>{{ app[3] }}</td>
            <td>{{ app[4] }}</td>
            <td>{{ app[5] }}</td>
            <td>{{ app[6] }}</td>
            <td>{{ app[7] }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<a href="{{ url_for('unit_head_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    // Filtering function
    function filterTable(tableId, inputId) {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById(inputId);
        filter = input.value.toUpperCase();
        table = document.getElementById(tableId);
        tr = table.getElementsByTagName("tr");

        for (i = 1; i < tr.length; i++) { // Skip the header row
            tr[i].style.display = "none";  // Initially hide all rows

            // Loop through all table columns (td) and search for matching content
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";  // Show the row if match is found
                        break;  // Break to avoid further checks for the same row
                    }
                }
            }
        }
    }

    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>
</body>
</html>

{% endblock %}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Change Password</h2>
        <form method="POST" action="{{ url_for('change_password_user') }}">
            <div class="form-group">
                <label for="current_password">Current Password:</label>
                <input type="password" id="current_password" name="current_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="new_password">New Password:</label>
                <input type="password" id="new_password" name="new_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="confirm_password">Confirm New Password:</label>
                <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Change Password</button>
        </form>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


