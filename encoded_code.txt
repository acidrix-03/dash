File: add_column.py (in W:\warm-hollows-62602)
import sqlite3

# Connect to the users.db database
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# SQL command to add the "division" column to the "users" table
try:
    cursor.execute("ALTER TABLE users ADD COLUMN division TEXT;")
    conn.commit()
    print("Column 'division' added successfully.")
except sqlite3.OperationalError as e:
    print(f"Error: {e}")

# Close the connection
conn.close()


File: app.py (in W:\warm-hollows-62602)
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import os
import pandas as pd
from io import BytesIO
from flask_babel import Babel
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify
from flask import jsonify
import openpyxl
import shutil
import time
import glob
from datetime import datetime
from flask import Flask, g, session, redirect, url_for, flash, render_template
import pytz
from datetime import datetime

# Set Manila timezone
LOCAL_TIMEZONE = pytz.timezone("Asia/Manila")


app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your_secret_key')

# Babel setup for multi-language support
babel = Babel(app)

# UPLOAD FOLDER for file uploads
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Allowed file extensions
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

# Database setup
def init_db():
    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             name TEXT NOT NULL,
                             username TEXT NOT NULL UNIQUE,
                             password TEXT NOT NULL,
                             role TEXT NOT NULL)''')
            admin_password = generate_password_hash('12345', method='pbkdf2:sha256')
            conn.execute('''INSERT OR IGNORE INTO users (name, username, password, role)
                            VALUES ('Admin', 'Admin', ?, 'admin')''', (admin_password,))
            conn.commit()
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

    try:
        with sqlite3.connect('documents.db') as conn:
            # Create CTO Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS cto_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL   
            )''')

            # Create a table for recommended applications
            conn.execute('''CREATE TABLE IF NOT EXISTS recommended_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_id INTEGER NOT NULL,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                leave_type TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create a table for approved applications
            conn.execute('''CREATE TABLE IF NOT EXISTS approved_applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                app_type TEXT NOT NULL,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT,
                purpose TEXT,
                date_recommended TEXT NOT NULL
            )''')

            # Create Leave Application table
            conn.execute('''CREATE TABLE IF NOT EXISTS leave_application (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                days INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL
            )''')

            # Create Travel Authority table
            conn.execute('''CREATE TABLE IF NOT EXISTS travel_authority (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                position TEXT NOT NULL,
                purpose TEXT NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                destination TEXT NOT NULL,
                recommending_approval TEXT DEFAULT NULL, 
                approval_status TEXT DEFAULT 'Pending',
                date_approved TEXT DEFAULT NULL 
            )''')
        print("Database initialized successfully")
    except sqlite3.DatabaseError as db_err:
        print(f"Database error: {db_err}")
    except Exception as e:
        print(f"General error: {e}")

def init_db():
    with sqlite3.connect('chat.db') as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS messages (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            message TEXT NOT NULL
                        )''')
        conn.commit()
import sqlite3


def add_rejection_comment_column():
    with sqlite3.connect('documents.db') as conn:
        # Adding rejection_comment column to cto_application
        conn.execute('ALTER TABLE cto_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE leave_application ADD COLUMN rejection_comment TEXT;')
        conn.execute('ALTER TABLE travel_authority ADD COLUMN rejection_comment TEXT;')
        conn.commit()
        print("Columns added successfully.")

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


# Routes
@app.route('/add_column')
def add_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"

def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/add_recommending_approval_column')
def add_recommending_approval_column():
    try:
        with sqlite3.connect('documents.db') as conn:
            conn.execute('ALTER TABLE recommended_applications ADD COLUMN recommending_approval TEXT')
        return "Column 'recommending_approval' added successfully!"
    except sqlite3.OperationalError as e:
        return f"Error: {e}"

@app.route('/search_user')
def search_user():
    query = request.args.get('query')
    if query:
        with sqlite3.connect('users.db') as conn:
            user = conn.execute("SELECT * FROM users WHERE name = ? OR username = ?", (query, query)).fetchone()
            return jsonify({"exists": bool(user)})
    return jsonify({"exists": False})

@app.route('/search_users', methods=['GET'])
def search_users():
    partial_username = request.args.get('q', '')  # Get the query parameter 'q' for the username
    if partial_username:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        # Query to find usernames that start with the user's input (use `LIKE` for partial matches)
        cursor.execute("SELECT username FROM users WHERE username LIKE ?", (partial_username + '%',))
        matching_usernames = [row[0] for row in cursor.fetchall()]
        
        conn.close()
        return jsonify(matching_usernames)
    return jsonify([])  # Return an empty list if no matches are found

# Function to fetch office suggestions from the database
def fetch_offices(query):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    
    # Fetch offices matching the query
    cursor.execute("SELECT DISTINCT office FROM users WHERE office LIKE ?", ('%' + query + '%',))
    offices = [row[0] for row in cursor.fetchall()]
    
    connection.close()
    return offices

@app.route('/search_offices')
def search_offices():
    q = request.args.get('q', '')
    offices = fetch_offices(q)
    return jsonify(offices)

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    name = request.form['username']
    password = request.form['password']
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE name = ?', (name,)).fetchone()
        if user and check_password_hash(user[3], password):
            session['user_id'] = user[0]
            session['username'] = user[2]
            session['position'] = user[5]
            session['role'] = user[4]
            session['division'] = user[8]

            # Redirect based on user role
            if user[4] == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user[4] == 'approver':
                return redirect(url_for('approver_dashboard'))
            elif user[4] == 'recommender':
                return redirect(url_for('recommender_dashboard'))
            elif user[4] == 'unit_head':
                return redirect(url_for('unit_head_dashboard'))
            else:
                return redirect(url_for('user_dashboard'))
        else:
            flash('Invalid credentials')
            return redirect(url_for('index'))


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        if password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('register'))

        # Check if the name already exists in the database
        with sqlite3.connect('users.db') as conn:
            user = conn.execute('SELECT * FROM users WHERE name = ?', (name,)).fetchone()
            if user:
                flash('Name already exists')
                return redirect(url_for('register'))
            
            # Proceed with registration if name is unique
            try:
                conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                             (name, username, generate_password_hash(password, method='pbkdf2:sha256'), 'user'))
                conn.commit()
                flash('Registration successful')
                return redirect(url_for('index'))
            except sqlite3.IntegrityError:
                flash('Username already exists')
                return redirect(url_for('register'))
    return render_template('register.html')

@app.route('/submit_document', methods=['GET', 'POST'])
def submit_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    if request.method == 'POST':
        name = request.form['name']
        division = request.form['division']
        document = request.files['document']
        submission_date = datetime.now() 
        if document and allowed_file(document.filename):
            filename = secure_filename(document.filename)
            document.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('Document uploaded successfully')
        else:
            flash('Invalid file format')
        return redirect(url_for('submit_document'))
    return render_template('submit_document.html')


@app.route('/admin_dashboard')
def admin_dashboard():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        # Count all applications
        total_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application').fetchone()[0]
        total_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application').fetchone()[0]
        total_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority').fetchone()[0]
        
        # Count pending applications
        pending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Pending"').fetchone()[0]
        pending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Pending"').fetchone()[0]

        # Count applications for recommending
        recommending_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]
        recommending_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE recommending_approval IS NOT NULL AND approval_status = "Pending"').fetchone()[0]

        # Count approved applications
        approved_cto_applications = conn.execute('SELECT COUNT(*) FROM cto_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_leave_applications = conn.execute('SELECT COUNT(*) FROM leave_application WHERE approval_status = "Approved"').fetchone()[0]
        approved_travel_authorities = conn.execute('SELECT COUNT(*) FROM travel_authority WHERE approval_status = "Approved"').fetchone()[0]

    return render_template('admin_dashboard.html', 
                           total_cto=total_cto_applications,
                           total_leave=total_leave_applications,
                           total_travel=total_travel_authorities,
                           pending_cto=pending_cto_applications,
                           pending_leave=pending_leave_applications,
                           pending_travel=pending_travel_authorities,
                           recommending_cto=recommending_cto_applications,
                           recommending_leave=recommending_leave_applications,
                           recommending_travel=recommending_travel_authorities,
                           approved_cto=approved_cto_applications,
                           approved_leave=approved_leave_applications,
                           approved_travel=approved_travel_authorities)

@app.route('/view_users')
def view_users():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    search = request.args.get('search', '')
    letter = request.args.get('letter', '')
    page = request.args.get('page', 1, type=int)  # Current page number (default is 1)
    per_page = 50

    query = 'SELECT id, name, username, position, role, office, division FROM users WHERE 1=1'
    params = []

    if search:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'%{search}%', f'%{search}%'])

    if letter:
        query += ' AND (name LIKE ? OR username LIKE ?)'
        params.extend([f'{letter}%', f'{letter}%'])

    query += ' LIMIT ? OFFSET ?'
    params.extend([per_page, (page - 1) * per_page])

    with sqlite3.connect('users.db') as conn:
        total_users = conn.execute('SELECT COUNT(*) FROM users WHERE 1=1').fetchone()[0]
        users = conn.execute(query, params).fetchall()

    # Calculate total pages
    total_pages = (total_users + per_page - 1) // per_page

    return render_template('view_users.html', users=users, page=page, total_pages=total_pages, search=search, letter=letter)


import os

@app.route('/clear_data', methods=['POST'])
def clear_data():
    admin_password = request.form['admin_password']
    with sqlite3.connect('users.db') as conn:
        admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('Admin',)).fetchone()
        if admin_user and check_password_hash(admin_user[3], admin_password):
            # Clear data from documents.db
            with sqlite3.connect('documents.db') as doc_conn:
                # Clear all application data
                doc_conn.execute('DELETE FROM cto_application')
                doc_conn.execute('DELETE FROM leave_application')
                doc_conn.execute('DELETE FROM travel_authority')
                doc_conn.execute('DELETE FROM recommended_applications')
                doc_conn.execute('DELETE FROM approved_applications')

            # Clear data from document_tracker.db
            with sqlite3.connect('document_tracker.db') as tracker_conn:
                tracker_conn.execute('DELETE FROM documents')
                tracker_conn.execute('DELETE FROM forwarding_history')
                tracker_conn.commit()
            
            # Clear all generated Excel files in the static/generated_files folder
            output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static', 'generated_files')
            if os.path.exists(output_dir):
                # Delete all files in the output directory
                for filename in os.listdir(output_dir):
                    file_path = os.path.join(output_dir, filename)
                    try:
                        if os.path.isfile(file_path):
                            os.remove(file_path)  # Delete the file
                    except Exception as e:
                        print(f"Error deleting file {file_path}: {e}")
            
            flash('All data and generated files have been cleared successfully', 'success')
        else:
            flash('Invalid admin password', 'danger')
    
    return redirect(url_for('admin_dashboard'))


@app.route('/change_position', methods=['GET', 'POST'])
def change_position():
    if 'user_id' not in session:
        flash('Please log in first.')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_position = request.form['position']
        
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET position = ? WHERE id = ?', (new_position, session['user_id']))
            conn.commit()
        
        session['position'] = new_position  # Update session with new position
        flash('Position updated successfully.')
        return redirect(url_for('user_dashboard'))

    # Check if 'position' exists in session
    current_position = session.get('position', 'Not set')  # Use default value if not set
    return render_template('change_position.html', current_position=current_position)

@app.route('/export_excel')
def export_excel():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        travel_authorities = pd.read_sql_query('SELECT * FROM travel_authority', conn)
        cto_applications = pd.read_sql_query('SELECT * FROM cto_application', conn)
        leave_applications = pd.read_sql_query('SELECT * FROM leave_application', conn)

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        travel_authorities.to_excel(writer, sheet_name='Travel Authorities', index=False)
        cto_applications.to_excel(writer, sheet_name='CTO Applications', index=False)
        leave_applications.to_excel(writer, sheet_name='Leave Applications', index=False)

    output.seek(0)
    return send_file(output, download_name='admin_data.xlsx', as_attachment=True)


@app.route('/export_users_excel')
def export_users_excel():
    with sqlite3.connect('users.db') as conn:
        users_df = pd.read_sql_query("SELECT * FROM users", conn)
    
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        users_df.to_excel(writer, sheet_name='Users', index=False)
    
    output.seek(0)
    return send_file(output, download_name='users_data.xlsx', as_attachment=True)

@app.route('/import_users_excel', methods=['POST'])
def import_users_excel():
    file = request.files['file']  # Handle file upload from the form
    if not file:
        flash('No file selected', 'error')
        return redirect(url_for('admin_dashboard'))

    try:
        users_df = pd.read_excel(file)
        
        # Convert all passwords to strings before hashing
        users_df['password'] = users_df['password'].astype(str)
        users_df['password'] = users_df['password'].apply(lambda x: generate_password_hash(x, method='pbkdf2:sha256'))

        with sqlite3.connect('users.db') as conn:
            for _, row in users_df.iterrows():
                try:
                    conn.execute('INSERT INTO users (name, username, password, role) VALUES (?, ?, ?, ?)', 
                                 (row['name'], row['username'], row['password'], row['role']))
                except sqlite3.IntegrityError:
                    flash(f"User {row['username']} already exists", 'warning')
        
        flash('Users imported successfully', 'success')
        return redirect(url_for('admin_dashboard'))
    except Exception as e:
        flash(f"Error importing users: {e}", 'error')
        return redirect(url_for('admin_dashboard'))

@app.route('/cancel_application/<int:app_id>/<string:app_type>', methods=['POST'])
def cancel_application(app_id, app_type):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    try:
        with sqlite3.connect('documents.db') as conn:
            if app_type == 'cto':
                conn.execute('DELETE FROM cto_application WHERE id = ?', (app_id,))
            elif app_type == 'leave':
                conn.execute('DELETE FROM leave_application WHERE id = ?', (app_id,))
            elif app_type == 'travel':
                conn.execute('DELETE FROM travel_authority WHERE id = ?', (app_id,))
            conn.commit()
        return jsonify({'success': 'Application cancelled successfully'})
    except Exception as e:
        print(f"Error occurred: {e}")
        return jsonify({'error': 'Failed to cancel application'}), 500



@app.route('/reject_application/<int:app_id>', methods=['POST'])
def reject_application(app_id):
    if 'user_id' not in session or session.get('role') != 'approver':
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']
    rejection_comment = request.form['rejection_comment']  # Capture the rejection comment

    with sqlite3.connect('documents.db') as conn:
        # Fetch the application data and update the status based on the type
        if application_type == 'cto':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM cto_application WHERE id = ?', (app_id,)).fetchone()

            name, position, days, start_date, end_date = application
            conn.execute('UPDATE cto_application SET approval_status = "Rejected", rejection_comment = ? WHERE id = ?', (rejection_comment, app_id))
            conn.execute('''INSERT INTO rejected_applications 
                            (app_type, name, position, days, start_date, end_date, rejection_comment, date_rejected)
                            VALUES (?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, rejection_comment))

        elif application_type == 'leave':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE leave_application SET approval_status = "Rejected", rejection_comment = ? WHERE id = ?', (rejection_comment, app_id))
            conn.execute('''INSERT INTO rejected_applications 
                            (app_type, name, position, days, start_date, end_date, rejection_comment, date_rejected)
                            VALUES (?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, rejection_comment))
            print(application) 

        elif application_type == 'travel_authority':
            application = conn.execute('SELECT name, position, purpose, start_date, end_date, destination FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            name, position, purpose, start_date, end_date, destination = application
            conn.execute('UPDATE travel_authority SET approval_status = "Rejected", rejection_comment = ? WHERE id = ?', (rejection_comment, app_id))
            conn.execute('''INSERT INTO rejected_applications 
                            (app_type, name, position, purpose, start_date, end_date, destination, rejection_comment, date_rejected)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, purpose, start_date, end_date, destination, rejection_comment))

        conn.commit()

    return jsonify({'success': True})


@app.route('/cto_application', methods=['GET', 'POST'])
def cto_application():
    user_id = session['user_id']  # Get the logged-in user's ID

    if request.method == 'POST':
        # Handle form submission
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']

        # Insert the new CTO application into the database
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            conn.commit()

        flash('CTO Application submitted successfully!')
        return redirect(url_for('user_dashboard'))

    else:
        # Fetch existing CTO application for this user
        with sqlite3.connect('documents.db') as conn:
            conn.row_factory = sqlite3.Row  # Allows access to rows as dictionaries
            cto_application = conn.execute('SELECT * FROM cto_application WHERE user_id = ?', (user_id,)).fetchone()

        # Fetch Unit Heads and Recommenders for the dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]

        return render_template('cto_application.html', approving_users=approving_users, cto_application=cto_application)


@app.route('/submit_and_print_cto_application_excel', methods=['POST'])
def submit_and_print_cto_application_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    days = request.form['days']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    recommender = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new CTO application into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (name, position, days, start_date, end_date, user_id, recommender))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', (recommender,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'cto_application_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['I19'] = name  
    sheet['I20'] = position  
    sheet['C11'] = start_date  
    sheet['E11'] = end_date  
    sheet['E19'] = recommender  
    sheet['E20'] = recommender_position  
    submission_date = datetime.now().strftime('%m-%d-%Y')
    sheet['J22'] = submission_date

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'cto_application_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('CTO Application Submitted Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_cto_application', filename=output_filename))



@app.route('/download_cto_application/<filename>', methods=['GET'])
def download_cto_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))


@app.route('/leave_application', methods=['GET', 'POST'])
def leave_application():
    user_id = session['user_id']  # Get the logged-in user's ID

    if request.method == 'POST':
        # Handle form submission
        name = request.form['name']
        position = request.form['position']
        days = request.form['days']
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']

        # Insert the new leave application into the database
        with sqlite3.connect('documents.db') as conn:
            conn.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                            VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            conn.commit()

        flash('Leave Application submitted successfully!')
        return redirect(url_for('user_dashboard'))

    else:
        # Fetch user details (office and salary) for this user from users.db
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row  # Allows access to rows as dictionaries
            user_details = conn.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()

        # Check if user_details is None (user not found)
        if user_details is None:
            flash('User details not found.', 'danger')
            return redirect(url_for('user_dashboard'))

        # Fetch Recommenders for the dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]

        return render_template('leave_application.html', approving_users=approving_users, user_details=user_details)

@app.route('/submit_and_print_leave_application_excel', methods=['POST'])
def submit_and_print_leave_application_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    office = request.form['office']  
    salary = request.form['salary']  
    days = request.form['days']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    leave_type = request.form['leave_type']
    recommender = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new Leave application into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, leave_type, user_id, recommending_approval)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', 
                       (name, position, days, start_date, end_date, leave_type, user_id, recommender))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', (recommender,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'leave_application_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['E5'] = name  
    sheet['E7'] = position
    sheet['C5'] = office
    sheet['I7'] = salary
    sheet['C45'] = days
    sheet['C48'] = start_date
    sheet['D48'] = end_date
    submission_date = datetime.now().strftime('%m-%d-%Y')
    sheet['C7'] = submission_date

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'leave_application_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('Leave Application Submitted Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_leave_application', filename=output_filename))


@app.route('/download_leave_application/<filename>', methods=['GET'])
def download_leave_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))


@app.route('/travel_authority', methods=['GET', 'POST'])
def travel_authority():
    user_id = session['user_id']  # Get the logged-in user's ID
    
    if request.method == 'POST':
        # Handle form submission (not required here as it redirects to another route)
        return redirect(url_for('submit_and_print_travel_authority_excel'))
    
    else:
        # Fetch recommenders for dropdown
        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]
        return render_template('travel_authority.html', approving_users=approving_users)

@app.route('/submit_and_print_travel_authority_excel', methods=['POST'])
def submit_and_print_travel_authority_excel():
    # Get form data
    name = request.form['name']
    position = request.form['position']
    purpose = request.form['purpose']
    host = request.form['host']
    destination = request.form['destination']
    start_date = request.form['start_date']
    end_date = request.form['end_date']
    recommending_approval = request.form['recommending_approval']

    user_id = session['user_id']  # Get the logged-in user's ID

    # Insert the new Travel Authority into the database
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO travel_authority 
                          (name, position, purpose, host, destination, start_date, end_date, user_id, recommending_approval)
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                       (name, position, purpose, host, destination, start_date, end_date, user_id, recommending_approval))
        app_id = cursor.lastrowid  # Get the last inserted ID
        conn.commit()

    # Fetch recommender's position from the users.db
    with sqlite3.connect('users.db') as user_conn:
        recommender_position = user_conn.execute('SELECT position FROM users WHERE username = ?', 
                                                 (recommending_approval,)).fetchone()
        recommender_position = recommender_position[0] if recommender_position else "Unknown Position"

    # Path to the template file in static folder
    template_path = os.path.join('static', 'travel_authority_template.xlsx')

    # Load the workbook and fill in the data
    wb = openpyxl.load_workbook(template_path)
    sheet = wb.active
    sheet['B4'] = name
    sheet['A13'] = name
    sheet['B5'] = position
    sheet['B7'] = purpose
    sheet['B8'] = host
    sheet['B9'] = start_date
    sheet['D9'] = end_date
    sheet['B10'] = destination

    submission_date = datetime.now().strftime('%m-%d-%Y')
    sheet['D14'] = submission_date

    # Ensure the 'generated_files' directory exists
    output_directory = os.path.join('static', 'generated_files')
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Save the file with a unique name (to avoid overwriting)
    output_filename = f'travel_authority_{app_id}_{int(time.time())}.xlsx'
    output_path = os.path.join(output_directory, output_filename)
    wb.save(output_path)
    wb.close()

    flash('Travel Authority Submitted and Excel Generated Successfully!', 'success')

    # Redirect to the download route with the generated file's name
    return redirect(url_for('download_travel_application', filename=output_filename))

@app.route('/download_travel_application/<filename>', methods=['GET'])
def download_travel_application(filename):
    file_path = os.path.join('static', 'generated_files', filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    else:
        flash('File not found.', 'danger')
        return redirect(url_for('user_dashboard'))

@app.route('/change_role/<int:user_id>', methods=['POST'])
def change_role(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    new_role = request.form['role']
    with sqlite3.connect('users.db') as conn:
        conn.execute('UPDATE users SET role = ? WHERE id = ?', (new_role, user_id))
        conn.commit()

    flash('User role updated successfully', 'success')
    return redirect(url_for('view_users'))

@app.route('/change_password/<int:user_id>', methods=['GET', 'POST'])
def change_password(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    if request.method == 'POST':
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']
        if new_password != confirm_password:
            flash('Passwords do not match')
            return redirect(url_for('change_password', user_id=user_id))

        hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, user_id))
            conn.commit()
        flash('Password updated successfully', 'success')
        return redirect(url_for('view_users'))

    return render_template('change_password.html', user_id=user_id)

@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        flash('Access denied')
        return redirect(url_for('index'))

    try:
        with sqlite3.connect('users.db') as user_conn:
            user = user_conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
            if user:
                user_conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
                user_conn.commit()

        with sqlite3.connect('documents.db') as doc_conn:
            doc_conn.execute('DELETE FROM travel_authority WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM cto_application WHERE user_id = ?', (user_id,))
            doc_conn.execute('DELETE FROM leave_application WHERE user_id = ?', (user_id,))
            doc_conn.commit()

        flash('User and all associated data deleted successfully', 'success')
    except sqlite3.Error as e:
        flash(f"An error occurred: {e}", 'danger')

    return redirect(url_for('view_users'))

@app.route('/change_password_user', methods=['GET', 'POST'])
def change_password_user():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    if request.method == 'POST':
        current_password = request.form['current_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            flash('New passwords do not match')
            return redirect(url_for('change_password_user'))

        with sqlite3.connect('users.db') as conn:
            user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
            if user and check_password_hash(user[3], current_password):
                hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')
                conn.execute('UPDATE users SET password = ? WHERE id = ?', (hashed_password, session['user_id']))
                conn.commit()
                flash('Password updated successfully', 'success')
                return redirect(url_for('user_dashboard'))
            else:
                flash('Current password is incorrect')
                return redirect(url_for('change_password_user'))

    return render_template('change_password_user.html')

import pandas as pd
from flask import send_file
import io

@app.route('/applications_dashboard', methods=['GET', 'POST'])
def applications_dashboard():
    user_id = session['user_id']  # Get the logged-in user's ID
    
    if request.method == 'POST':
        # Retrieve form data
        application_type = request.form['application_type']  # 'cto', 'leave', or 'travel'
        name = request.form['name']
        position = request.form['position']
        days = request.form.get('days')
        start_date = request.form['start_date']
        end_date = request.form['end_date']
        recommending_approval = request.form['recommending_approval']
        
        # Create a DataFrame based on the form data
        data = {
            'Name': [name],
            'Position': [position],
            'Days Applied': [days] if days else '',
            'Start Date': [start_date],
            'End Date': [end_date],
            'Recommender': [recommending_approval]
        }

        # Additional fields for leave or travel applications
        if application_type == 'leave':
            leave_type = request.form['leave_type']
            data['Leave Type'] = [leave_type]
            flash('Leave Application submitted successfully!')
        elif application_type == 'travel':
            purpose = request.form['purpose']
            destination = request.form['destination']
            data['Purpose'] = [purpose]
            data['Destination'] = [destination]
            flash('Travel Authority submitted successfully!')
        else:
            flash('CTO Application submitted successfully!')

        # Insert application into the database
        with sqlite3.connect('documents.db') as conn:
            if application_type == 'cto':
                conn.execute('''INSERT INTO cto_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                                VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            elif application_type == 'leave':
                conn.execute('''INSERT INTO leave_application (name, position, days, start_date, end_date, user_id, recommending_approval)
                                VALUES (?, ?, ?, ?, ?, ?, ?)''', (name, position, days, start_date, end_date, user_id, recommending_approval))
            elif application_type == 'travel':
                conn.execute('''INSERT INTO travel_authority (name, position, purpose, start_date, end_date, destination, user_id, recommending_approval)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', (name, position, purpose, start_date, end_date, destination, user_id, recommending_approval))
            conn.commit()

        # Create an Excel file in memory
        df = pd.DataFrame(data)
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name=application_type.capitalize())
        
        output.seek(0)  # Reset the pointer to the start of the stream

        # Send the file as a download
        filename = f"{application_type}_application_{name}.xlsx"
        return send_file(output, as_attachment=True, download_name=filename, mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    
    else:
        # Fetch required data for GET request
        with sqlite3.connect('documents.db') as conn:
            conn.row_factory = sqlite3.Row
            cto_application = conn.execute('SELECT * FROM cto_application WHERE user_id = ?', (user_id,)).fetchone()
            leave_application = conn.execute('SELECT * FROM leave_application WHERE user_id = ?', (user_id,)).fetchone()
            travel_authority = conn.execute('SELECT * FROM travel_authority WHERE user_id = ?', (user_id,)).fetchone()

        with sqlite3.connect('users.db') as conn:
            approving_users = [row[0] for row in conn.execute('SELECT username FROM users WHERE role IN ("unit_head", "recommender")').fetchall()]
            user_details = conn.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()
            if user_details is None:
                flash('User details not found.', 'danger')
                return redirect(url_for('user_dashboard'))

        return render_template(
            'applications_dashboard.html', 
            approving_users=approving_users, 
            user_details=user_details, 
            cto_application=cto_application,
            leave_application=leave_application,
            travel_authority=travel_authority
        )


@app.route('/approver_dashboard')
def approver_dashboard():
    if 'user_id' not in session or session.get('role') != 'approver':
        flash('Access denied')
        return redirect(url_for('index'))

    approver_username = session['username']  # Correctly fetch the logged-in approver's username

    # Fetch applications assigned for approval
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT *, recommend_name FROM cto_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        leave_applications = conn.execute('SELECT *, recommend_name FROM leave_application WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()
        travel_authorities = conn.execute('SELECT *, recommend_name FROM travel_authority WHERE recommending_approval = "Recommended" AND approval_status = "Pending"').fetchall()

    return render_template(
        'approver_dashboard.html',
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities
    )



@app.route('/approve_application/<int:app_id>', methods=['POST'])
def approve_application(app_id):
    if 'user_id' not in session or session.get('role') != 'approver':
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']
    
    with sqlite3.connect('documents.db') as conn:
        # Fetch the application data based on the type
        if application_type == 'cto':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE cto_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'leave':
            application = conn.execute('SELECT name, position, days, start_date, end_date FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            name, position, days, start_date, end_date = application
            conn.execute('UPDATE leave_application SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, days, start_date, end_date, None, None))
        
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT name, position, purpose, start_date, end_date, destination FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            name, position, purpose, start_date, end_date, destination = application
            conn.execute('UPDATE travel_authority SET approval_status = "Approved" WHERE id = ?', (app_id,))
            conn.execute('''INSERT INTO approved_applications 
                            (app_type, name, position, days, start_date, end_date, destination, purpose, date_recommended)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, date("now"))''', 
                            (application_type, name, position, 0, start_date, end_date, destination, purpose))
        
        conn.commit()
    
    return jsonify({'success': True})

@app.route('/recommend_approval/<int:app_id>', methods=['POST'])
def recommend_approval(app_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Access denied'}), 403

    user_role = session.get('role')
    username = session.get('username')

    # Allow both recommenders and unit heads to recommend approval
    if user_role not in ['recommender', 'unit_head']:
        return jsonify({'error': 'Access denied'}), 403

    application_type = request.form['application_type']

    with sqlite3.connect('documents.db') as conn:
        if application_type == 'cto':
            application = conn.execute('SELECT * FROM cto_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('''
                UPDATE cto_application
                SET recommending_approval = "Recommended", recommend_name = ?
                WHERE id = ?
            ''', (username, app_id))
        elif application_type == 'leave':
            application = conn.execute('SELECT * FROM leave_application WHERE id = ?', (app_id,)).fetchone()
            conn.execute('''
                UPDATE leave_application
                SET recommending_approval = "Recommended", recommend_name = ?
                WHERE id = ?
            ''', (username, app_id))
        elif application_type == 'travel_authority':
            application = conn.execute('SELECT * FROM travel_authority WHERE id = ?', (app_id,)).fetchone()
            conn.execute('''
                UPDATE travel_authority
                SET recommending_approval = "Recommended", recommend_name = ?
                WHERE id = ?
            ''', (username, app_id))
        else:
            return jsonify({'error': 'Invalid application type'}), 400

        # Insert into recommended_applications table
        conn.execute('''
            INSERT INTO recommended_applications 
            (app_id, app_type, name, position, days, start_date, end_date, destination, purpose, leave_type, date_recommended, recommending_approval)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, date("now"), ?)
        ''', (
            app_id,  # Application ID
            application_type,  # Type of the application (cto/leave/travel_authority)
            application[1],  # Name
            application[2],  # Position
            application[3],  # Days (for leave or CTO)
            application[4],  # Start Date
            application[5],  # End Date
            application[6] if application_type == 'travel_authority' else None,  # Destination for travel authority
            application[7] if application_type == 'travel_authority' else None,  # Purpose for travel authority
            application[6] if application_type == 'leave' else None,  # Leave type for leave applications
            username  # The person recommending approval (e.g., the unit head or recommender)
        ))
        conn.commit()

    return jsonify({'success': True})

import sqlite3

def fetch_approver_dashboard_data():
    conn = sqlite3.connect('your_database.db')
    cursor = conn.cursor()

    # Fetch CTO Applications
    cursor.execute('''
        SELECT id, name, position, days, start_date, end_date, recommending_approval
        FROM cto_applications
    ''')
    cto_applications = cursor.fetchall()

    # Fetch Leave Applications
    cursor.execute('''
        SELECT id, name, position, days, start_date, end_date, leave_type, status, recommending_approval
        FROM leave_applications
    ''')
    leave_applications = cursor.fetchall()

    # Fetch Travel Authorities
    cursor.execute('''
        SELECT id, name, position, purpose, destination, start_date, end_date, status, recommending_approval
        FROM travel_authorities
    ''')
    travel_authorities = cursor.fetchall()

    conn.close()
    return cto_applications, leave_applications, travel_authorities

@app.route('/dashboard')
def dashboard():
    cto_applications = get_all_cto_applications()  # Fetch all CTO applications
    leave_applications = get_all_leave_applications()  # Fetch all leave applications
    travel_authorities = get_all_travel_authorities()  # Fetch all travel authorities
    

    cto_pending = len([app for app in cto_applications if not app.is_approved])
    leave_pending = len([app for app in leave_applications if not app.is_approved])
    travel_pending = len([app for app in travel_authorities if not app.is_approved])



    return render_template('dashboard.html', 
                           cto_count=len(cto_applications),
                           leave_count=len(leave_applications),
                           travel_count=len(travel_authorities),
                           cto_pending=cto_pending,
                           leave_pending=leave_pending,
                           travel_pending=travel_pending,
                           cto_applications=cto_applications,
                           leave_applications=leave_applications,
                           travel_authorities=travel_authorities)


@app.route('/recommender_dashboard')
def recommender_dashboard():
    if 'user_id' not in session or session.get('role') != 'recommender':
        flash('Access denied')
        return redirect(url_for('index'))

    recommender_username = session['username']  # Get the logged-in recommender's username

    # Fetch applications assigned to this recommender
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('''SELECT * FROM cto_application 
                                           WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                        (recommender_username,)).fetchall()
        print(f"CTO Applications: {cto_applications}")  
        leave_applications = conn.execute('''SELECT * FROM leave_application 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()
        print(f"Leave Applications: {leave_applications}")
        travel_authorities = conn.execute('''SELECT * FROM travel_authority 
                                             WHERE recommending_approval = ? AND recommending_approval IS NOT NULL''', 
                                          (recommender_username,)).fetchall()
        print(f"Travel Authorities: {travel_authorities}") 
    return render_template('recommender_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)


LEAVE_TYPE_MAP = {
    "1": 'Vacation Leave',
    "2": 'Mandatory/Forced Leave',
    "3": 'Sick Leave',
    "4": 'Maternity Leave',
    "5": 'Paternity Leave',
    "6": 'Special Privilege Leave',
    "7": 'Solo Parent Leave',
    "8": 'Study Leave',
    "9": '10-Day VAWC Leave',
    "10": 'Rehabilitation Privilege',
    "11": 'Speical Leave for Women',
    "12": 'Calamity Leave',
    "13": 'Adoption Leave',
    "14": 'Monetization'
 }

@app.route('/recommended_applications')
def recommended_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "cto"').fetchall()
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave"
        ''').fetchall()

        for app in leave_recommended_apps:
            print(f"Leave Type from DB: {app[6]}")  # This will show you what leave_type values are coming from the database
        

        # Apply leave type mapping
        leave_recommended_apps = [
            (app[0], app[1], app[2], app[3], app[4], app[5], LEAVE_TYPE_MAP.get(app[6], "Unknown Leave Type"), app[7])
            for app in leave_recommended_apps
        ]

        travel_recommended_apps = conn.execute('SELECT * FROM recommended_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('recommended_applications.html', cto_recommended_apps=cto_recommended_apps, leave_recommended_apps=leave_recommended_apps, travel_recommended_apps=travel_recommended_apps)

@app.route('/approved_applications')
def approved_applications():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    with sqlite3.connect('documents.db') as conn:
        cto_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "cto"').fetchall()
        leave_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "leave"').fetchall()
        travel_approved_apps = conn.execute('SELECT * FROM approved_applications WHERE app_type = "travel_authority"').fetchall()

    return render_template('approved_applications.html', cto_approved_apps=cto_approved_apps, leave_approved_apps=leave_approved_apps, travel_approved_apps=travel_approved_apps)

@app.route('/unit_head_dashboard')
def unit_head_dashboard():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Ensure the logged-in unit head's username is used

    with sqlite3.connect('documents.db') as conn:
        # Fetch applications specifically assigned to the logged-in unit head
        cto_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM cto_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        leave_applications = conn.execute('''
            SELECT id, name, position, days, start_date, end_date 
            FROM leave_application 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

        travel_authorities = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination 
            FROM travel_authority 
            WHERE recommending_approval = ? 
            AND approval_status = "Pending"
        ''', (unit_head_username,)).fetchall()

    return render_template('unit_head_dashboard.html', 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)

@app.route('/recommended_head')
def recommended_head():
    if 'user_id' not in session or session.get('role') != 'unit_head':
        flash('Access denied')
        return redirect(url_for('index'))

    unit_head_username = session['username']  # Logged-in unit head's username
    print(f"Unit Head Username: {unit_head_username}")  # Debugging line

    with sqlite3.connect('documents.db') as conn:
        # Fetch recommended CTO applications by this unit head
        cto_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "cto" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"CTO Recommended Apps: {len(cto_recommended_apps)}")  # Count instead of full output for cleaner debugging

        # Fetch recommended Leave applications by this unit head
        leave_recommended_apps = conn.execute('''
            SELECT id, name, position, days, start_date, end_date, leave_type, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "leave" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Leave Recommended Apps: {len(leave_recommended_apps)}")  # Cleaner output

        # Fetch recommended Travel Authority applications by this unit head
        travel_recommended_apps = conn.execute('''
            SELECT id, name, position, purpose, start_date, end_date, destination, date_recommended 
            FROM recommended_applications 
            WHERE app_type = "travel_authority" AND recommending_approval = ?
        ''', (unit_head_username,)).fetchall()
        print(f"Travel Recommended Apps: {len(travel_recommended_apps)}")  # Cleaner output

    # Check if data is fetched and returned correctly
    if not cto_recommended_apps and not leave_recommended_apps and not travel_recommended_apps:
        flash("No recommended applications found.")
    
    return render_template('recommended_head.html', 
                           cto_recommended_apps=cto_recommended_apps, 
                           leave_recommended_apps=leave_recommended_apps, 
                           travel_recommended_apps=travel_recommended_apps)

@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        position = request.form['position']
        division = request.form['division']  # New field
        office = request.form['office']      # New field
        role = request.form['role']
        
        # Update the user details including the position
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET name = ?, username = ?, position = ?, division = ?, office = ?, role = ? WHERE id = ?', 
                         (name, username, position, division, office, role, user_id))
            conn.commit()

        # If the logged-in user is being edited, update the session position
        if user_id == session.get('user_id'):
            session['position'] = position  # Update the position in session data

        flash('User details updated successfully')
        return redirect(url_for('view_users'))

    # Fetch user details for the form
    with sqlite3.connect('users.db') as conn:
        user = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()

    return render_template('edit_user.html', user=user)

import os
import openpyxl
from openpyxl.drawing.image import Image
from flask import send_file
import sqlite3

def add_office_and_salary_columns():
    with sqlite3.connect('users.db') as conn:
        # Add 'office' column if it doesn't already exist
        try:
            conn.execute('ALTER TABLE users ADD COLUMN office TEXT')
        except sqlite3.OperationalError:
            print("Column 'office' already exists.")
        
        # Add 'salary' column if it doesn't already exist
        try:
            conn.execute('ALTER TABLE users ADD COLUMN salary INTEGER')
        except sqlite3.OperationalError:
            print("Column 'salary' already exists.")
        
        conn.commit()

@app.route('/update_user_info', methods=['POST'])
def update_user_info():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    user_id = session['user_id']

    # Capture the updated information from the form
    office = request.form.get('office')
    salary = request.form.get('salary')
    position = request.form.get('position')
    division = request.form.get('division')

    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute('UPDATE users SET office = ?, salary = ?, position = ?, division = ? WHERE id = ?',
                         (office, salary, position, division, user_id))
            conn.commit()
    except Exception as e:
        flash('Failed to update user information: ' + str(e))
        return redirect(url_for('user_dashboard'))  # Or wherever you want to redirect on failure
    
    # Fetch updated user details
    user_details = fetch_user_details(user_id)

    # Update session variables to reflect changes
    session.update({'position': position, 'office': office, 'salary': salary, 'division': division})
    flash('User information updated successfully!')

    # Fetch applications from documents.db
    cto_applications, leave_applications, travel_authorities = fetch_applications(user_id)

    # Pass updated user details and application data to the dashboard template
    return render_template('user_dashboard.html', 
                           user_details=user_details, 
                           cto_applications=cto_applications, 
                           leave_applications=leave_applications, 
                           travel_authorities=travel_authorities)

def fetch_user_details(user_id):
    with sqlite3.connect('users.db') as conn:
        return conn.execute('SELECT office, salary, position, division FROM users WHERE id = ?', (user_id,)).fetchone()

def fetch_applications(user_id):
    with sqlite3.connect('documents.db') as conn:
        cto_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, recommending_approval, approval_status, date_recommended FROM cto_application WHERE user_id = ?', (user_id,)).fetchall()
        leave_applications = conn.execute('SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, approval_status, date_recommended FROM leave_application WHERE user_id = ?', (user_id,)).fetchall()
        travel_authorities = conn.execute('SELECT id, name, position, purpose, start_date, end_date, destination, recommending_approval, approval_status FROM travel_authority WHERE user_id = ?', (user_id,)).fetchall()
    
    return cto_applications, leave_applications, travel_authorities


@app.route('/download_application/<string:app_type>/<int:app_id>', methods=['GET'])
def download_application(app_type, app_id):
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    base_dir = os.path.join('static', 'generated_files')
    base_dir = os.path.normpath(base_dir)
    if app_type == 'cto':
        file_pattern = os.path.join(base_dir, f'cto_application_{app_id}_*.xlsx')
    elif app_type == 'leave':
        file_pattern = os.path.join(base_dir, f'leave_application_{app_id}_*.xlsx')
    elif app_type == 'travel':
        file_pattern = os.path.join(base_dir, f'travel_authority_{app_id}_*.xlsx')
    else:
        flash('Invalid application type')
        return redirect(url_for('user_dashboard'))
    matching_files = glob.glob(file_pattern)
    if matching_files:
        return send_file(matching_files[0], as_attachment=True)
    else:
        flash('Application file not found')
        return redirect(url_for('user_dashboard'))

# Document Tracker Codes --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  
# Document Tracker Codes --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes 
# Document Tracker Codes --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes  --  # Document Tracker Codes 

def user_exists(username):
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE username = ?", (username,))
        return cursor.fetchone() is not None

def convert_to_localtime(utc_dt):
    """Convert UTC datetime to Manila timezone."""
    return utc_dt.replace(tzinfo=pytz.UTC).astimezone(LOCAL_TIMEZONE)

@app.route('/user_dashboard', methods=['GET', 'POST'])
def user_dashboard():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']
    username = session.get('username')
    
    if request.method == 'POST':
        session['division'] = request.form['division']
        session['office'] = request.form['office']
        return redirect(url_for('user_dashboard'))

    # Fetch user details and statistics
    user_details, stats = get_user_info_and_stats(user_id)
    
    # Fetch applications (CTO, Leave, Travel Authority) from `documents.db`
    with sqlite3.connect('documents.db') as conn:
        cursor = conn.cursor()
        
        # CTO Applications
        cursor.execute('''SELECT id, name, position, days, start_date, end_date, recommending_approval, 
                          approval_status, rejection_comment, date_recommended 
                          FROM cto_application WHERE user_id = ?''', (user_id,))
        cto_applications = cursor.fetchall()
        
        # Leave Applications
        cursor.execute('''SELECT id, name, position, days, start_date, end_date, leave_type, recommending_approval, 
                          approval_status, rejection_comment, date_recommended 
                          FROM leave_application WHERE user_id = ?''', (user_id,))
        leave_applications = cursor.fetchall()
        
        # Travel Authority Applications
        cursor.execute('''SELECT id, name, position, purpose, start_date, end_date, destination, 
                          recommending_approval, approval_status, rejection_comment 
                          FROM travel_authority WHERE user_id = ?''', (user_id,))
        travel_authorities = cursor.fetchall()
    
    # Fetch submitted and received documents from `document_tracker.db`
    with sqlite3.connect('document_tracker.db') as conn:
        cursor = conn.cursor()
        
    # Documents submitted by the user
        cursor.execute('''SELECT id, document_type, forwarded_to, office_forwarded_to, details, submission_date 
                        FROM documents WHERE submitted_by = ?''', (username,))
        submitted_documents = cursor.fetchall()

        # Fetch forwarding history and convert timestamps to Manila time
        forwarding_histories = {}
        manila_tz = pytz.timezone('Asia/Manila')
        
        for doc in submitted_documents:
            document_id = doc[0]
            cursor.execute(
                '''SELECT forwarded_by, forwarded_to, comments, forwarded_at 
                FROM forwarding_history 
                WHERE document_id = ? ORDER BY forwarded_at DESC''', 
                (document_id,)
            )
            history_records = cursor.fetchall()

            # Convert timestamps to Manila time
            converted_history = []
            for record in history_records:
                forwarded_by, forwarded_to, comments, forwarded_at = record
                utc_time = datetime.fromisoformat(forwarded_at).replace(tzinfo=pytz.utc)
                manila_time = utc_time.astimezone(manila_tz).strftime('%Y-%m-%d %H:%M:%S')
                converted_history.append((forwarded_by, forwarded_to, comments, manila_time))

            forwarding_histories[document_id] = converted_history

    # Fetch the office info for each `forwarded_to` entry in submitted_documents
    forwarded_to_offices = {}
    with sqlite3.connect('users.db') as users_conn:
        users_cursor = users_conn.cursor()
        forwarded_to_usernames = [doc[2] for doc in submitted_documents]  # Collect all "forwarded_to" usernames
        placeholders = ','.join('?' * len(forwarded_to_usernames))
        
        if forwarded_to_usernames:  # Only query if there are usernames
            users_cursor.execute(f'''SELECT username, office FROM users WHERE username IN ({placeholders})''', 
                                 forwarded_to_usernames)
            
            # Map each username to their office
            forwarded_to_offices = {row[0]: row[1] for row in users_cursor.fetchall()}

    # Fetch documents forwarded to the user
    with sqlite3.connect('document_tracker.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''SELECT id, name, position, division, office, document_type, submitted_by, details 
                          FROM documents WHERE forwarded_to = ?''', (username,))
        received_documents = cursor.fetchall()
        
    # Determine office options based on selected division
    division = session.get('division', '')
    officeOptions = {
        'OSDS': ["Accounting", "Admin", "Budget", "ICT", "Legal", "Office of the ASDS", "Office of the SDS", "Payroll", "Personnel", "Records"],
        'SGOD': ["Education Facilities", "Health", "HRD", "Planning & Research", "SGOD", "SMME", "SMN"],
        'CID': ["ALS", "CID", "LR", "PSDS"]
    }.get(division, [])

    # Render the template with all required data
    return render_template(
        'user_dashboard.html',
        user_details=user_details,
        stats=stats,
        cto_applications=cto_applications,
        leave_applications=leave_applications,
        travel_authorities=travel_authorities,
        submitted_documents=submitted_documents,
        received_documents=received_documents,
        forwarding_histories=forwarding_histories,
        forwarded_to_offices=forwarded_to_offices,
        officeOptions=officeOptions
    )

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('document_tracker.db')
    return db

# Close database connection after request
@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

@app.route('/document_tracker')
def document_tracker():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    db = get_db()
    cursor = db.cursor()
    
    # Fetch submitted documents by the user, including office_forwarded_to
    cursor.execute("""
        SELECT id, name, document_type, status, date_submitted, office_forwarded_to 
        FROM documents 
        WHERE submitted_by = ?
    """, (session['user_id'],))
    submitted_documents = cursor.fetchall()
    print("Submitted Documents:", submitted_documents)  
    
    # Fetch forwarded documents to the user
    cursor.execute("""
        SELECT id, name, document_type, status, date_received 
        FROM documents 
        WHERE forwarded_to = ?
    """, (session['user_id'],))
    forwarded_documents = cursor.fetchall()

    return render_template('document_tracker.html', submitted_documents=submitted_documents, forwarded_documents=forwarded_documents)


@app.route('/submit_document_tracker', methods=['POST'])
def submit_document_tracker():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    user_id = session['user_id']
    username = session.get('username')  # Retrieve username if stored in the session
    
    # Retrieve form data
    name = request.form.get('name')
    position = request.form.get('position')
    division = request.form.get('division')
    office = request.form.get('office')
    document_type = request.form.get('document_type')
    forwarded_to = request.form.get('forwarded_to')
    office_forwarded_to = request.form.get('office_forwarded_to')
    details = request.form.get('details', '')  # Using get to avoid KeyError if not provided
    submission_date = datetime.now().strftime("%m/%d/%Y %H:%M:%S")

    # Check if the 'forwarded_to' user exists in users.db
    try:
        with sqlite3.connect('users.db') as users_conn:
            users_cursor = users_conn.cursor()
            users_cursor.execute("SELECT 1 FROM users WHERE username = ?", (forwarded_to,))
            user_exists = users_cursor.fetchone()

        if not user_exists:
            flash("The 'Forwarded to' user does not exist. Please select from the Suggestions.", "error")
            return redirect(url_for('document_tracker'))  # Redirect to the correct page

        # Save to the document_tracker.db database
        with sqlite3.connect('document_tracker.db') as conn:
            conn.execute(
                '''INSERT INTO documents (name, position, division, office, document_type, forwarded_to, office_forwarded_to, details, submitted_by, submission_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                (name, position, division, office, document_type, forwarded_to, office_forwarded_to, details, username, submission_date)
            )
            conn.commit()

        flash('Document submitted successfully')
        return redirect(url_for('user_dashboard'))

    except sqlite3.Error as e:
        flash(f"Database error: {e}", "error")
        return redirect(url_for('document_tracker'))


def get_user_info_and_stats(user_id):
    try:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            user_details = cursor.execute('SELECT office, salary FROM users WHERE id = ?', (user_id,)).fetchone()
            if user_details is None:
                raise ValueError(f"No user found with id {user_id}")

        with sqlite3.connect('document_tracker.db') as conn:
            cursor = conn.cursor()
            # Count of pending, recommended, and approved applications
            pending_count = cursor.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Pending"', (user_id,)).fetchone()[0]
            recommended_count = cursor.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Recommended"', (user_id,)).fetchone()[0]
            approved_count = cursor.execute('SELECT COUNT(*) FROM leave_application WHERE user_id = ? AND approval_status = "Approved"', (user_id,)).fetchone()[0]
            
            stats = {
                'pending': pending_count,
                'recommended': recommended_count,
                'approved': approved_count
            }

        return user_details, stats

    except sqlite3.Error as e:
        print(f"Database error: {e}")
        return None, None
    except Exception as e:
        print(f"Error: {e}")
        return None, None



@app.route('/forward_document_page/<int:document_id>', methods=['GET', 'POST'])
def forward_document_page(document_id):
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        forwarded_to = request.form.get('forwarded_to')
        comments = request.form.get('comments')

        # Check if the 'forwarded_to' user exists
        if not user_exists(forwarded_to):
            flash("The 'Forwarded to' user does not exist. Please select from the suggestions.", "error")
            return redirect(url_for('forward_document_page', document_id=document_id))
        
        with sqlite3.connect('document_tracker.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''UPDATE documents SET forwarded_to = ?, comments = ? WHERE id = ?''', (forwarded_to, comments, document_id))
            conn.commit()
        
        flash('Document forwarded successfully')
        return redirect(url_for('user_dashboard'))
    
    return render_template('forward_document.html', document_id=document_id)


@app.route('/forward_document', methods=['POST'])
def forward_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))

    document_id = request.form.get('document_id')
    forwarded_to = request.form.get('forwarded_to')
    
    # Check if forwarded_to is retrieved correctly and if user exists
    if not forwarded_to or not user_exists(forwarded_to):
        flash("The 'Forwarded to' user does not exist. Please select from the suggestions.", "error")
        return redirect(url_for('forward_document_page', document_id=document_id))

    return redirect(url_for('forward_document_page', document_id=document_id))


@app.route('/submit_forward_document', methods=['POST'])
def submit_forward_document():
    if 'user_id' not in session:
        flash('Please log in first')
        return redirect(url_for('index'))
    
    document_id = request.form.get('document_id')
    forwarded_to = request.form.get('forwarded_to')
    comments = request.form.get('comments')
    forwarded_by = session.get('username')

    if not forwarded_to or not user_exists(forwarded_to):
        flash("The 'Forwarded to' user does not exist. Please select from the suggestions.", "error")
        return redirect(url_for('forward_document_page', document_id=document_id))

    try:
        with sqlite3.connect('document_tracker.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''UPDATE documents SET forwarded_to = ? WHERE id = ?''', (forwarded_to, document_id))
            cursor.execute('''INSERT INTO forwarding_history (document_id, forwarded_by, forwarded_to, comments) VALUES (?, ?, ?, ?)''', (document_id, forwarded_by, forwarded_to, comments))
            conn.commit()
            flash('Document forwarded successfully')
    except sqlite3.Error as e:
        flash(f'An error occurred while forwarding the document: {e}', 'error')
    
    return redirect(url_for('user_dashboard'))


# Define the relative path to the database
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, 'document_tracker.db')

@app.route('/delete_document/<int:document_id>', methods=['POST'])
def delete_document(document_id):
    try:
        # Connect to the database
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Begin transaction
        cursor.execute("BEGIN TRANSACTION;")
        
        # Delete entries from forwarding_history table for this document_id
        cursor.execute("DELETE FROM forwarding_history WHERE document_id = ?", (document_id,))
        
        # Delete the document entry from documents table
        cursor.execute("DELETE FROM documents WHERE id = ?", (document_id,))
        
        # Check if any document was deleted
        if cursor.rowcount == 0:
            conn.rollback()
            return jsonify(success=False, error="No matching document found in database")
        
        # Commit the transaction
        conn.commit()
        
        # Close the connection
        conn.close()
        
        return jsonify(success=True)
    
    except Exception as e:
        # Rollback if there was an error
        conn.rollback()
        return jsonify(success=False, error=str(e))

# CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   
# CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   
# CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   # CHAT FUNCTION   

def create_chat_table():
    with sqlite3.connect('chat.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS chat_messages (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER NOT NULL,
                            username TEXT NOT NULL,
                            message TEXT NOT NULL,
                            timestamp TEXT NOT NULL DEFAULT (datetime('now', 'localtime'))
                          )''')
        conn.commit()

create_chat_table()

@app.route('/fetch_messages', methods=['GET'])
def fetch_messages():
    with sqlite3.connect('chat.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT username, message, timestamp FROM chat_messages ORDER BY timestamp DESC LIMIT 50")
        messages = cursor.fetchall()
    return jsonify(messages)

@app.route('/send_message', methods=['POST'])
def send_message():
    if 'user_id' in session:
        user_id = session['user_id']
        username = session.get('username')
        message = request.form['message']

        with sqlite3.connect('chat.db') as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO chat_messages (user_id, username, message) VALUES (?, ?, ?)", 
                           (user_id, username, message))
            conn.commit()

        return jsonify(success=True)
    return jsonify(success=False), 401


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))  # Get the PORT from environment, default to 5000
    app.run(debug=True, host='0.0.0.0', port=port)

File: test.py (in W:\warm-hollows-62602)
import sqlite3

# Connect to the chat.db database (it will create the database if it doesn't exist)
conn = sqlite3.connect('chat.db')
cursor = conn.cursor()

# Create a table named 'messages' with columns for id, sender, message, and timestamp
cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sender TEXT NOT NULL,
    message TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')

# Commit the changes and close the connection
conn.commit()
conn.close()

print("chat.db has been created successfully with the 'messages' table.")


File: style.css (in W:\warm-hollows-62602\static)
body {
    background-color: #f8f9fa; /* Light gray background */
}

.navbar {
    margin-bottom: 20px; /* Spacing below navbar */
}

.table {
    margin-top: 20px; /* Spacing above table */
    border-radius: 0.5rem; /* Rounded corners */
    overflow: hidden; /* Prevents overflow from rounded corners */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Shadow effect */
}

.table th {
    background-color: #007bff; /* Bootstrap primary color */
    color: white; /* White text for header */
}

.table tbody tr:hover {
    background-color: #e9ecef; /* Light gray hover effect */
}

.btn-custom {
    background-color: #007bff; /* Primary button color */
    color: white; /* White text */
    border-radius: 0.5rem; /* Rounded corners */
}

.btn-custom:hover {
    background-color: #0056b3; /* Darker shade on hover */
}

.container {
    width: 100%;  /* Ensure container spans the full width */
    max-width: 1000px; /* Set a max-width if needed */
    margin: auto; /* Center container */
}

.table {
    table-layout: auto;  /* Allow the table to adjust based on content */
    width: 100%;  /* Force table to stay within container's width */
    min-width: 800px;  /* Set a minimum width for the table to trigger scrolling */
}

.table th, .table td {
    white-space: nowrap;  /* Prevent text wrapping */
    overflow: visible;  /* Allow content to expand without truncating */
    text-overflow: clip; /* Make sure no ellipsis is used */
}

.table-responsive {
    overflow-x: auto;  /* Enable horizontal scroll when table content overflows */
    max-width: 100%;  /* Ensure the table stays within the container's width */
}

body {
    background-color: #f7f9fc; /* Light background */
  }
  
  .card {
    border-radius: 8px;
  }
  
  .card-title {
    color: #333;
    font-weight: 600;
  }
  
  #search-result {
    font-size: 1rem;
    margin-top: 10px;
  }
  
  .form-control:focus {
    border-color: #4CAF50;
    box-shadow: 0 0 5px rgba(0, 204, 0, 0.3);
  }
  

File: style.css (in W:\warm-hollows-62602\static\css)
body {
    font-family: 'Inter', sans-serif;
    background-color: #f7f7f7;
    color: #333;
    margin: 0;
    padding: 0;
}

h2 {
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: #333;
}

.form-control, .btn {
    font-size: 1rem;
    padding: 10px;
    border-radius: 6px;
}

.container {
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

input, select, button {
    margin-bottom: 15px;
}

.navbar {
    background-color: #0056b3;
    border-bottom: 1px solid #eee;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.navbar .navbar-brand,
.navbar .nav-link {
    color: #ffffff;
    font-weight: bold;
}

.navbar .nav-link:hover {
    color: #e0e0e0;
}

.navbar-toggler-icon {
    background-color: #ffffff;
}

.btn-primary {
    background-color: #4CAF50;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    color: white;
    transition: background-color 0.3s ease;
}

.btn-primary:hover {
    background-color: #45a049;
}

.btn-secondary {
    background-color: #f0f0f0;
    color: #333;
    border-radius: 6px;
    padding: 10px 20px;
    transition: background-color 0.3s ease;
}

.btn-secondary:hover {
    background-color: #ddd;
}

.form-control {
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 6px;
    padding: 12px;
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 15px;
    font-size: 16px;
    transition: all 0.3s ease-in-out;
}

.form-control:focus {
    border-color: #4CAF50;
    transform: scale(1.02);
    transition: transform 0.2s ease-in-out;
}

.navbar-brand {
    font-weight: 600;
    font-size: 1.2rem;
}

button, input {
    transition: all 0.3s ease-in-out;
}

button:hover, input:focus {
    transform: scale(1.02);
}

.table {
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.btn {
    border-radius: 0.3rem;
}

.btn-warning {
    background-color: #ffc107;
    border-color: #ffc107;
}

.btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
}

.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 4px;
    border: 1px solid transparent;
    display: block;
}

.alert-danger {
    color: #a94442;
    background-color: #f2dede;
    border-color: #ebccd1;
}



File: admin_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"> <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            display: flex;
            height: 100vh; /* Full height */
            background-color: #121212; /* Dark background */
            color: #f1f1f1; /* Light text */
        }

        .navbar {
            width: 100%;
            position: fixed;
            top: 0;
            z-index: 1000;
            background-color: #1f1f1f;
            color: white;
        }

        .navbar-brand {
            color: white;
        }

        .navbar-toggler {
            border-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar {
            background: #1f1f1f;
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            height: calc(100vh - 56px); /* Full height minus navbar height */
            position: fixed;
            top: 56px;
            left: 0;
            width: 250px;
            transition: all 0.3s ease;
            overflow-y: auto; /* Scrollable if content exceeds height */
            color: #f1f1f1;
        }

        .sidebar h3 {
            color: #f1f1f1;
            margin-bottom: 20px;
        }

        .sidebar a {
            margin-bottom: 15px;
            padding: 10px 15px;
            font-size: 16px;
            color: #f1f1f1;
        }

        .btn-block {
            border-radius: 10px;
            transition: background-color 0.3s;
            background-color: #333;
            color: #f1f1f1;
        }

        .btn-block:hover {
            background-color: #007bff;
            color: white;
        }

        .sidebar.collapsed {
            width: 0;
            padding: 0;
            overflow: hidden;
        }

        .content {
            margin-left: 250px;
            margin-top: 56px;
            padding: 20px;
            flex-grow: 1;
            transition: margin-left 0.3s ease;
            background-color: #121212;
        }

        .content.collapsed {
            margin-left: 0;
        }

        .toggle-sidebar-btn {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1001;
            background-color: #333;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card {
        background-color: #1f1f1f;
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
        text-align: center;
        padding: 10px; /* Reduced padding */
        color: #f1f1f1;
        width: 200px; /* Adjust the width */
        margin: 10px auto; /* Center the card and add margin */
        }

        .card:hover {
            transform: translateY(-5px); /* Reduced hover effect */
        }

        .card-body {
            padding: 10px; /* Reduced padding */
        }

        .card h5 {
            font-size: 1rem; /* Reduced font size */
            font-weight: bold;
            color: #f1f1f1;
        }

        .card p {
            font-size: 1.2rem; /* Reduced font size */
            font-weight: bold;
        }

        .card-icon {
            font-size: 2rem; /* Reduced icon size */
            color: #007bff;
        }

        .modal-header {
            background-color: #333;
            color: white;
        }

        .modal-footer .btn-danger {
            background-color: #dc3545;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .form-group label {
            font-weight: bold;
            color: #f1f1f1;
        }

        .custom-file-label {
            background-color: #333;
            color: #f1f1f1;
        }

        .custom-file-input {
            background-color: #333;
            color: #f1f1f1;
        }
    </style>
</head>

<body>
    <!-- Collapsible Sidebar -->
    <div class="sidebar" id="sidebar">
        <h3>Actions</h3>
        <a href="{{ url_for('view_users') }}" class="btn btn-primary btn-block">View Users</a>
        <a href="{{ url_for('export_users_excel') }}" class="btn btn-success btn-block">Export Users to Excel</a>
        <a href="{{ url_for('approved_applications') }}" class="btn btn-info btn-custom mb-0">See Approved Applications</a>
        <form method="POST" action="{{ url_for('import_users_excel') }}" enctype="multipart/form-data">
            <div class="custom-file mb-2">
                <input type="file" class="custom-file-input" name="file" accept=".xlsx" required>
                <label class="custom-file-label" for="file">Choose Excel file</label>
            </div>
            <button type="submit" class="btn btn-warning btn-block">Import Users from Excel</button>
        </form>
        <a href="{{ url_for('submit_document') }}" class="btn btn-primary btn-block">Submit Application</a>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-info btn-block">Go to User Dashboard</a>
        <button type="button" class="btn btn-danger btn-block" data-toggle="modal" data-target="#confirmDeleteModal">
            Clear Data
        </button>
    </div>

    <!-- Main Content Area -->
    <div class="content" id="content">
        <div class="container mt-5">
            <h2>Admin Dashboard</h2>

            <!-- Charts Section -->
            <div class="chart-container">
                <h3>Application Data Analysis</h3>
                <canvas id="applicationsChart" class="chart"></canvas>
            </div>

            <!-- Application Counts -->
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-file-alt card-icon"></i>
                        <h5>Total CTO Applications</h5>
                        <p>{{ total_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-calendar-alt card-icon"></i>
                        <h5>Total Leave Applications</h5>
                        <p>{{ total_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-plane-departure card-icon"></i>
                        <h5>Total Travel Authorities</h5>
                        <p>{{ total_travel }}</p>
                    </div>
                </div>
            </div>

            <!-- Pending Applications -->
            <h3 class="mt-4">Pending Applications</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending CTO Applications</h5>
                        <p>{{ pending_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending Leave Applications</h5>
                        <p>{{ pending_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-hourglass-half card-icon"></i>
                        <h5>Pending Travel Authorities</h5>
                        <p>{{ pending_travel }}</p>
                    </div>
                </div>
            </div>

            
            <!-- Approved Applications -->
            <h3 class="mt-4">Approved Applications</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved CTO Applications</h5>
                        <p>{{ approved_cto }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved Leave Applications</h5>
                        <p>{{ approved_leave }}</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card card-minimized">
                        <i class="fas fa-check-circle card-icon"></i>
                        <h5>Approved Travel Authorities</h5>
                        <p>{{ approved_travel }}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toggle Sidebar Button -->
    <button class="toggle-sidebar-btn" id="toggleSidebar">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Modal for Delete Confirmation -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="deleteForm" method="POST" action="{{ url_for('clear_data') }}">
                        <p>Are you sure you want to delete all data? This action cannot be undone.</p>
                        <div class="form-group">
                            <label for="admin_password">Admin Password:</label>
                            <input type="password" id="admin_password" name="admin_password" class="form-control" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" form="deleteForm" class="btn btn-danger">Delete</button>
                    
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('toggleSidebar').addEventListener('click', function() {
            var sidebar = document.getElementById('sidebar');
            var content = document.getElementById('content');
            sidebar.classList.toggle('collapsed');
            content.classList.toggle('collapsed');
        });

        function confirmClearData() {
            return confirm('Are you sure you want to clear all data? This action cannot be undone.');
        }
    </script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.getElementById('toggleSidebar').addEventListener('click', function () {
                var sidebar = document.getElementById('sidebar');
                sidebar.style.display = (sidebar.style.display === 'none') ? 'block' : 'none';
            });
    
            // Chart.js for displaying data analysis
            const ctx = document.getElementById('applicationsChart').getContext('2d');
            const applicationsChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['CTO', 'Leave', 'Travel'],
                    datasets: [{
                        label: 'Applications',
                        data: [{{ total_cto }}, {{ total_leave }}, {{ total_travel }}],
                        backgroundColor: ['#007bff', '#28a745', '#ffc107']
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

{% endblock %}


File: applications_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applications Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container mt-5">
        <h2>Applications Dashboard</h2>

        <!-- Tabs for each application type -->
        <ul class="nav nav-tabs" id="applicationTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="cto-tab" data-bs-toggle="tab" href="#cto" role="tab" aria-controls="cto" aria-selected="true">CTO Application</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="leave-tab" data-bs-toggle="tab" href="#leave" role="tab" aria-controls="leave" aria-selected="false">Leave Application</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="travel-tab" data-bs-toggle="tab" href="#travel" role="tab" aria-controls="travel" aria-selected="false">Travel Authority</a>
            </li>
        </ul>

        <!-- Tab content for each application form -->
        <div class="tab-content mt-4">
            <!-- CTO Application Form -->
            <div class="tab-pane fade show active" id="cto" role="tabpanel" aria-labelledby="cto-tab">
                <form action="{{ url_for('submit_and_print_cto_application_excel') }}" method="post">
                    <div class="form-group mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="position" class="form-label">Position:</label>
                        <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="days" class="form-label">No. of Days applied:</label>
                        <input type="number" id="days" name="days" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="start_date" class="form-label">Start Date:</label>
                        <input type="date" id="start_date" name="start_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="end_date" class="form-label">End Date:</label>
                        <input type="date" id="end_date" name="end_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="recommending_approval" class="form-label">Recommender:</label>
                        <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                            <option value="" disabled selected>Select Recommender</option>
                            {% for user in approving_users %}
                                <option value="{{ user }}">{{ user }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="d-flex justify-content-between">
                        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                        <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Excel</button>
                    </div>
                </form>
            </div>

            <!-- Leave Application Form -->
            <div class="tab-pane fade" id="leave" role="tabpanel" aria-labelledby="leave-tab">
                <form action="{{ url_for('submit_and_print_leave_application_excel') }}" method="post">
                    <div class="form-group mb-3">
                        <label for="leaveName" class="form-label">Name:</label>
                        <input type="text" id="leaveName" name="name" value="{{ session['username'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="leavePosition" class="form-label">Position:</label>
                        <input type="text" id="leavePosition" name="position" value="{{ session['position'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="office" class="form-label">Office:</label>
                        <input type="text" id="office" name="office" value="{{ user_details[0] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="salary" class="form-label">Salary:</label>
                        <input type="number" id="salary" name="salary" value="{{ user_details[1] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="days" class="form-label">No. of Days applied:</label>
                        <input type="number" id="days" name="days" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="start_date" class="form-label">Start Date:</label>
                        <input type="date" id="start_date" name="start_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="end_date" class="form-label">End Date:</label>
                        <input type="date" id="end_date" name="end_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="leave_type" class="form-label">Leave Type:</label>
                        <select id="leave_type" name="leave_type" class="form-select" required>
                            <option value="" disabled selected>Select Leave Type</option>
                            <option value="Vacation Leave">Vacation Leave</option>
                            <option value="Mandatory/Forced Leave">Mandatory/Forced Leave</option>
                            <option value="Sick Leave">Sick Leave</option>
                            <option value="Maternity Leave">Maternity Leave</option>
                            <option value="Paternity Leave">Paternity Leave</option>
                            <option value="Special Privilege Leave">Special Privilege Leave</option>
                            <option value="Solo Parent Leave">Solo Parent Leave</option>
                            <option value="Study Leave">Study Leave</option>
                            <option value="10-Day VAWC Leave">10-Day VAWC Leave</option>
                            <option value="Rehabilitation Privilege">Rehabilitation Privilege</option>
                            <option value="Special Leave for Women">Special Leave for Women</option>
                            <option value="Calamity Leave">Calamity Leave</option>
                            <option value="Adoption Leave">Adoption Leave</option>
                            <option value="Monetization">Monetization</option>
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="recommending_approval" class="form-label">Recommender:</label>
                        <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                            <option value="" disabled selected>Select Recommender</option>
                            {% for user in approving_users %}
                                <option value="{{ user }}">{{ user }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="d-flex justify-content-between">
                        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                        <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Excel</button>
                    </div>
                </form>
            </div>

            <!-- Travel Authority Form -->
            <div class="tab-pane fade" id="travel" role="tabpanel" aria-labelledby="travel-tab">
                <form action="{{ url_for('submit_and_print_travel_authority_excel') }}" method="post">
                    <div class="form-group mb-3">
                        <label for="travelName" class="form-label">Name:</label>
                        <input type="text" id="travelName" name="name" value="{{ session['username'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="travelPosition" class="form-label">Position:</label>
                        <input type="text" id="travelPosition" name="position" value="{{ session['position'] }}" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="purpose" class="form-label">Purpose:</label>
                        <input type="text" id="purpose" name="purpose" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="destination" class="form-label">Destination:</label>
                        <input type="text" id="destination" name="destination" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="travel_date" class="form-label">Start Date:</label>
                        <input type="date" id="travel_date" name="start_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="return_date" class="form-label">End Date:</label>
                        <input type="date" id="return_date" name="end_date" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="host" class="form-label">Host of Activity:</label>
                        <input type="text" id="host" name="host" class="form-control" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="recommending_approval" class="form-label">Recommender:</label>
                        <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                            <option value="" disabled selected>Select Recommender</option>
                            {% for user in approving_users %}
                                <option value="{{ user }}">{{ user }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="d-flex justify-content-between">
                        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                        <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Travel Authority</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

<script>
    function handleFormSubmit() {
        setTimeout(function() {
            window.location.href = "{{ url_for('user_dashboard') }}";
        }, 1000);
    }
</script>
{% endblock %}


File: approved_applications.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="text-center mb-4">Approved Applications</h2>

    <!-- Global Search Bar -->
    <div class="mb-4">
        <input type="text" id="globalSearch" onkeyup="filterAllTables()" class="form-control" placeholder="Search for applications...">
    </div>

    <!-- CTO Applications -->
    <div class="application-section">
        <h3 class="section-title">CTO Applications</h3>
        <table class="table table-striped table-bordered" id="ctoTable">
            <thead class="thead-dark">
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Name</th>
                    <th class="sortable">Position</th>
                    <th class="sortable">Days</th>
                    <th class="sortable">Start Date</th>
                    <th class="sortable">End Date</th>
                    <th class="sortable" data-sort="date">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in cto_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td data-date="{{ app[9] }}">{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="ctoPagination" class="pagination-controls"></div>
    </div>

    <!-- Leave Applications -->
    <div class="application-section mt-4">
        <h3 class="section-title">Leave Applications</h3>
        <table class="table table-striped table-bordered" id="leaveTable">
            <thead class="thead-dark">
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Name</th>
                    <th class="sortable">Position</th>
                    <th class="sortable">Days</th>
                    <th class="sortable">Start Date</th>
                    <th class="sortable">End Date</th>
                    <th class="sortable" data-sort="date">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in leave_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td data-date="{{ app[9] }}">{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="leavePagination" class="pagination-controls"></div>
    </div>

    <!-- Travel Authorities -->
    <div class="application-section mt-4">
        <h3 class="section-title">Travel Authorities</h3>
        <table class="table table-striped table-bordered" id="travelTable">
            <thead class="thead-dark">
                <tr>
                    <th class="sortable">ID</th>
                    <th class="sortable">Name</th>
                    <th class="sortable">Position</th>
                    <th class="sortable">Start Date</th>
                    <th class="sortable">End Date</th>
                    <th class="sortable">Destination</th>
                    <th class="sortable">Purpose</th>
                    <th class="sortable" data-sort="date">Date Approved</th>
                </tr>
            </thead>
            <tbody>
                {% for app in travel_approved_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[8] }}</td>
                    <td data-date="{{ app[9] }}">{{ app[9] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="travelPagination" class="pagination-controls"></div>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('approver_dashboard') }}" class="btn btn-primary">Go back to dashboard</a>
    </div>
</div>

<!-- Pagination and Sorting/Filtering JavaScript -->
<script>
function filterAllTables() {
    let input = document.getElementById('globalSearch');
    let filter = input.value.toUpperCase();
    let tables = ['ctoTable', 'leaveTable', 'travelTable'];
    
    tables.forEach(tableId => {
        let table = document.getElementById(tableId);
        let tr = table.getElementsByTagName('tr');
        for (let i = 1; i < tr.length; i++) {
            let tdArray = tr[i].getElementsByTagName('td');
            let rowContainsSearchText = Array.from(tdArray).some(td => {
                return td.textContent.toUpperCase().indexOf(filter) > -1;
            });
            tr[i].style.display = rowContainsSearchText ? '' : 'none';
        }
    });
}

function sortTable(tableId, colIndex) {
    let table = document.getElementById(tableId);
    let rows = Array.from(table.getElementsByTagName('tbody')[0].getElementsByTagName('tr'));
    let isNumeric = !isNaN(rows[0].getElementsByTagName('td')[colIndex].innerText);
    let isDate = rows[0].getElementsByTagName('td')[colIndex].getAttribute('data-date') !== null;
    
    rows.sort((a, b) => {
        let aVal = a.getElementsByTagName('td')[colIndex].getAttribute('data-date') || a.getElementsByTagName('td')[colIndex].innerText;
        let bVal = b.getElementsByTagName('td')[colIndex].getAttribute('data-date') || b.getElementsByTagName('td')[colIndex].innerText;

        if (isDate) {
            return new Date(aVal) - new Date(bVal);
        } else if (isNumeric) {
            return parseFloat(aVal) - parseFloat(bVal);
        } else {
            return aVal.localeCompare(bVal);
        }
    });

    if (table.getAttribute("data-sort-order") === "desc") {
        rows.reverse();
        table.setAttribute("data-sort-order", "asc");
    } else {
        table.setAttribute("data-sort-order", "desc");
    }

    let tbody = table.getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));
}

function paginateTable(tableId, itemsPerPage) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let paginationControls = document.getElementById(tableId + 'Pagination');
    let totalPages = Math.ceil(rows.length / itemsPerPage);
    let currentPage = 1;

    function showPage(page) {
        let start = (page - 1) * itemsPerPage;
        let end = start + itemsPerPage;
        
        for (let i = 0; i < rows.length; i++) {
            rows[i].style.display = (i >= start && i < end) ? '' : 'none';
        }
    }

    function createPagination() {
        paginationControls.innerHTML = '';
        for (let i = 1; i <= totalPages; i++) {
            let btn = document.createElement('button');
            btn.innerText = i;
            btn.classList.add('btn', 'btn-secondary');
            if (i === currentPage) btn.classList.add('active');
            btn.addEventListener('click', function() {
                currentPage = i;
                showPage(currentPage);
                createPagination();
            });
            paginationControls.appendChild(btn);
        }
    }

    showPage(currentPage);
    createPagination();
}

window.onload = function() {
    const tables = ['ctoTable', 'leaveTable', 'travelTable'];
    tables.forEach(tableId => {
        let headers = document.getElementById(tableId).getElementsByTagName('th');
        for (let i = 0; i < headers.length; i++) {
            headers[i].onclick = () => sortTable(tableId, i);
        }
    });

    sortTable('ctoTable', 6);
    sortTable('leaveTable', 6);
    sortTable('travelTable', 7);
    
    paginateTable('ctoTable', 5);
    paginateTable('leaveTable', 5);
    paginateTable('travelTable', 5);
}
</script>

<style>
    .application-section {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }

    thead th {
        background-color: #000; /* Set header background to black */
        color: #fff;            /* Set header text color to white */
        border: 1px solid #fff; /* Optional: Add a white border for better visibility */
    }

    .sortable:hover {
        cursor: pointer;
        text-decoration: underline;
    }

    .pagination-controls button {
        margin: 0 2px;
    }

    .pagination-controls {
        margin-top: 15px;
        text-align: center;
    }

    .thead-dark th {
        background-color: #000; /* Ensure this is also set to black */
        color: #fff;
    }

    .btn.active {
        background-color: #007bff;
        color: white;
    }
</style>


{% endblock %}


File: approver_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Approver Dashboard</h2>

    <!-- CTO Applications Table -->
    <div class="application-section">
        <h4 class="section-title">CTO Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Recommended by:</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in cto_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[14] }}</td>
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="cto">
                            Approve
                        </button>
                        <button class="btn btn-danger reject-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="cto">
                            Reject
                         </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Leave Applications Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Leave Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Leave Type</th>
                    <th>Recommended by</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in leave_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[7] }}</td>
                    <td>{{ application[15] }}</td> <!-- Display the status -->
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="leave">
                            Approve
                        </button>
                        <button class="btn btn-danger reject-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="leave">
                            Reject
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Travel Authorities Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Travel Authorities</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Purpose</th>
                    <th>Destination</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Recommended by</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for authority in travel_authorities %}
                <tr id="row-{{ authority[0] }}">
                    <td>{{ authority[1] }}</td>
                    <td>{{ authority[2] }}</td>
                    <td>{{ authority[3] }}</td>
                    <td>{{ authority[7] }}</td>
                    <td>{{ authority[5] }}</td>
                    <td>{{ authority[6] }}</td>
                    <td>{{ authority[15] }}</td> <!-- Display the status -->
                    <td>
                        <button class="btn btn-success approve-btn" 
                                data-id="{{ authority[0] }}" 
                                data-type="travel_authority">
                            Approve
                        </button>
                        <button class="btn btn-danger reject-btn" 
                                data-id="{{ authority[0] }}" 
                                data-type="travel_authority">
                            Reject
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('approved_applications') }}" class="btn btn-primary mb-3">See Approved Applications</a>
    </div>
</div>

    <!-- Modal for Rejection Comment -->
    <div class="modal fade" id="rejectionModal" tabindex="-1" role="dialog" aria-labelledby="rejectionModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rejectionModalLabel">Reject Application</h5>
                    <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button> -->
                    <p>Press Escape to Canel</p>
                </div>
                <div class="modal-body">
                    <form id="rejection-form">
                        <div class="form-group">
                            <label for="rejection-comment">Reason for Rejection</label>
                            <textarea class="form-control" id="rejection-comment" rows="3" required></textarea>
                        </div>
                        <input type="hidden" id="reject-app-id">
                        <input type="hidden" id="reject-app-type">
                    </form>
                </div>
                <div class="modal-footer">
                    <!-- <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button> -->
                    <button type="button" class="btn btn-danger" id="submit-rejection">Reject</button>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for approving applications
        $('.approve-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/approve_application/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Approved').attr('disabled', true).removeClass('btn-success').addClass('btn-secondary');
                        alert('Application successfully approved!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // Show the rejection modal on clicking the Reject button
        $('.reject-btn').on('click', function() {
            var appId = $(this).data('id');
            var appType = $(this).data('type');
            $('#reject-app-id').val(appId);
            $('#reject-app-type').val(appType);
            $('#rejectionModal').modal('show');
        });

        // Submit rejection with reason
        $('#submit-rejection').on('click', function() {
            var appId = $('#reject-app-id').val();
            var appType = $('#reject-app-type').val();
            var rejectionComment = $('#rejection-comment').val();

            $.ajax({
                type: 'POST',
                url: '/reject_application/' + appId,
                data: { application_type: appType, rejection_comment: rejectionComment },
                success: function(response) {
                    if (response.success) {
                        $('#row-' + appId + ' .reject-btn').text('Rejected').attr('disabled', true).removeClass('btn-danger').addClass('btn-secondary');
                        $('#rejectionModal').modal('hide');
                        alert('Application rejected!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<style>
    body {
        background-color: #f8f9fa;
    }
    .application-section {
        background-color: #ffffff;
        border-radius: 0.5rem;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .section-title {
        font-weight: bold;
        color: #343a40;
    }
    .table th {
        background-color: #007bff;
        color: white;
    }
    .table tbody tr:hover {
        background-color: #e9ecef;
    }
    .btn-custom {
        background-color: #007bff;
        color: white;
        border-radius: 0.5rem;
    }
    .btn-custom:hover {
        background-color: #0056b3;
    }
</style>

{% endblock %}




File: base.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SDO Calbayog DASH</title>

    <!-- Keep Bootstrap 5 only for consistency -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Custom Styles -->
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    
    <style>
        body {
            background-color: #f8f9fa; /* Light gray background */
        }
        .navbar {
            margin-bottom: 20px; /* Spacing below navbar */
        }
        .table {
            margin-top: 20px; /* Spacing above table */
            border-radius: 0.5rem; /* Rounded corners */
            overflow: hidden; /* Prevents overflow from rounded corners */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Shadow effect */
        }
        .table th {
            background-color: #007bff; /* Bootstrap primary color */
            color: white; /* White text for header */
        }
        .table tbody tr:hover {
            background-color: #e9ecef; /* Light gray hover effect */
        }
        .btn-custom {
            background-color: #007bff; /* Primary button color */
            color: white; /* White text */
            border-radius: 0.5rem; /* Rounded corners */
        }
        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
    </style>
</head>
<body>
    <!-- Updated Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
            {% if session.get('username') %}
                {{ session['username'] }} (Position: {{ session['position'] }}) <!-- Display username and position if logged in -->
            {% else %}
                DocApp <!-- Display "DocApp" on login page or when not logged in -->
            {% endif %}
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <!-- Admin-specific links -->
                {% if session.get('role') == 'admin' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('admin_dashboard') }}">
                        <i class="fas fa-tachometer-alt"></i> Admin Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('view_users') }}">
                        <i class="fas fa-users"></i> View Users
                    </a>
                </li>
                {% endif %}

                <!-- Approver-specific links -->
                {% if session.get('role') == 'approver' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approver_dashboard') }}">
                        <i class="fas fa-check-circle"></i> Approver Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('approved_applications') }}">
                        <i class="fas fa-file-signature"></i> Approved Applications
                    </a>
                </li>
                {% endif %}

                <!-- Recommender-specific links -->
                {% if session.get('role') == 'recommender' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommender_dashboard') }}">
                        <i class="fas fa-thumbs-up"></i> Recommender Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('recommended_applications') }}">
                        <i class="fas fa-file-signature"></i> Recommended Applications
                    </a>
                </li>
                {% endif %}

                <!-- Unit Head-specific links -->
                {% if session.get('role') == 'unit_head' %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('unit_head_dashboard') }}">
                        <i class="fas fa-user-tie"></i> Unit Head Dashboard
                    </a>
                </li>
                {% endif %}                
                
                <!-- Common user links (if logged in) -->
                {% if session.get('username') %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('user_dashboard') }}">
                        <i class="fas fa-user"></i> User Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('applications_dashboard') }}">
                        <i class="fas fa-file-upload"></i> Submit Application
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('document_tracker') }}">
                        <i class="fas fa-folder-open"></i> Document Tracker
                    </a>
                </li>
                <!-- <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('change_position') }}">
                        <i class="fas fa-user-cog"></i> Change Position
                    </a>
                </li> -->
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        {% for category, message in messages %}
        <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
        {% endif %}
        {% endwith %}

        {% block content %}
        <!-- Example table to demonstrate improved design -->
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Document Name</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Document 1</td>
                    <td>Submitted</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>Document 2</td>
                    <td>Pending</td>
                    <td>
                        <button class="btn btn-custom">View</button>
                        <button class="btn btn-custom">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
        {% endblock %}
    </div>

    <!-- Bootstrap and Popper.js Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


File: change_password.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Change Password</h2>
    <form method="POST" action="{{ url_for('change_password', user_id=user_id) }}">
        <div class="form-group">
            <label for="new_password">New Password:</label>
            <input type="password" id="new_password" name="new_password" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="confirm_password">Confirm Password:</label>
            <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
    <a href="{{ url_for('view_users') }}" class="btn btn-secondary mt-3">Back to Users</a>
</div>
{% endblock %}


File: change_password_user.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Change Password</h2>
        <form method="POST" action="{{ url_for('change_password_user') }}">
            <div class="form-group">
                <label for="current_password">Current Password:</label>
                <input type="password" id="current_password" name="current_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="new_password">New Password:</label>
                <input type="password" id="new_password" name="new_password" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="confirm_password">Confirm New Password:</label>
                <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Change Password</button>
        </form>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


File: change_position.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2>Change Position</h2>
    <form method="POST" action="{{ url_for('change_position') }}">
        <div class="form-group">
            <label for="position">Current Position:</label>
            <input type="text" id="position" name="position" class="form-control" value="{{ current_position }}" required>
        </div>
        <button type="submit" class="btn btn-primary">Update Position</button>
        <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-2">Cancel</a>
    </form>
</div>

{% endblock %}


File: Coded.py (in W:\warm-hollows-62602\templates)
file_names = [
    r'W:\warm-hollows-62602\app.py', 
    r'W:\warm-hollows-62602\templates\base.html', 
    r'W:\warm-hollows-62602\templates\cto_application.html', 
    r'W:\warm-hollows-62602\templates\leave_application.html', 
    r'W:\warm-hollows-62602\templates\login.html', 
    r'W:\warm-hollows-62602\templates\register.html', 
    r'W:\warm-hollows-62602\templates\submit_document.html', 
    r'W:\warm-hollows-62602\templates\travel_authority.html', 
    r'W:\warm-hollows-62602\templates\view_users.html',
    r'W:\warm-hollows-62602\templates\admin_dashboard.html',
    r'W:\warm-hollows-62602\templates\approver_dashboard.html',
    r'W:\warm-hollows-62602\templates\approved_applications.html',
    r'W:\warm-hollows-62602\templates\change_password.html',
    r'W:\warm-hollows-62602\templates\document_tracker.html',
    r'W:\warm-hollows-62602\templates\recommended_applications.html',
    r'W:\warm-hollows-62602\templates\recommender_dashboard.html',
    r'W:\warm-hollows-62602\templates\user_dashboard.html',
    r'W:\warm-hollows-62602\templates\unit_head_dashboard.html',
    r'W:\warm-hollows-62602\templates\recommended_head.html',   
    r'W:\warm-hollows-62602\templates\change_password_user.html',     
    r'W:\warm-hollows-62602\templates\cto_print_template.html',
    r'W:\warm-hollows-62602\templates\edit_user.html',
    r'W:\warm-hollows-62602\templates\travel_authority_print_template.html',
    r'W:\warm-hollows-62602\templates\change_position.html',
    ]

# Open the output file in write mode
with open('full_program.txt', 'w', encoding='utf-8') as outfile:
    for fname in file_names:
        try:
            with open(fname, 'r', encoding='utf-8') as infile:
                # Write the content of each file to the output file
                outfile.write(infile.read())
                outfile.write("\n\n")  # Add a newline to separate contents of each file
        except FileNotFoundError:
            print(f"File {fname} not found, skipping.")
        except Exception as e:
            print(f"An error occurred while processing {fname}: {e}")

print("All tabs saved to full_program.txt")


File: codes.py (in W:\warm-hollows-62602\templates)
import os

def encode_files_to_text(folder_path, output_file):
    with open(output_file, 'w') as out_file:
        for root, _, files in os.walk(folder_path):
            for file in files:
                if file.endswith(('.py', '.html', '.css', '.js')):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r') as f:
                        content = f.read()
                    out_file.write(f'File: {file} (in {root})\n{content}\n\n')

folder_path = r'W:\warm-hollows-62602'
output_file = 'encoded_code.txt'
print('Success: Whole Program encoded to encoded_code.txt')

encode_files_to_text(folder_path, output_file)


File: cto_application.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">CTO Application</h2>
        </div>
        <div class="card-body">
            <form id="ctoForm" method="POST" action="{{ url_for('submit_and_print_cto_application_excel') }}">
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="position" class="form-label">Position:</label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="days" class="form-label">No. of Days applied:</label>
                    <input type="number" id="days" name="days" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="start_date" class="form-label">Start Date:</label>
                    <input type="date" id="start_date" name="start_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="end_date" class="form-label">End Date:</label>
                    <input type="date" id="end_date" name="end_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="recommending_approval" class="form-label">Recommender:</label>
                    <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                        <option value="" disabled selected>Select Recommender</option>
                        {% for user in approving_users %}
                            <option value="{{ user }}">{{ user }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="d-flex justify-content-between">
                    <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                    <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Excel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function handleFormSubmit() {
        setTimeout(function() {
            window.location.href = "{{ url_for('user_dashboard') }}";
        }, 1000); 
    }
</script>
{% endblock %}


File: cto_application_print.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CTO Application - Print</title>
    <style>
        @media print {
            .no-print {
                display: none; /* Hide the print button during printing */
            }
        }
    </style>
</head>
<body>
    <h1>CTO Application</h1>
    <p><strong>Name:</strong> {{ name }}</p>
    <p><strong>Position:</strong> {{ position }}</p>
    <p><strong>Days Applied:</strong> {{ days }}</p>
    <p><strong>Start Date:</strong> {{ start_date }}</p>
    <p><strong>End Date:</strong> {{ end_date }}</p>
    <p><strong>Recommending Approval:</strong> {{ recommending_approval }}</p>

    <button class="no-print" onclick="window.print()">Print Application</button>
    <a class="no-print" href="{{ url_for('user_dashboard') }}">Back to Dashboard</a>
</body>
</html>


File: cto_application_success.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}
<div class="container mt-4">
    <h2>CTO Application Submitted Successfully!</h2>
    <p>Your CTO application has been generated. You can download it below or go back to the dashboard.</p>

    <!-- Download the generated application -->
    <a href="{{ download_url }}" class="btn btn-success">Download Application</a>
    
    <!-- Print button -->
    <button onclick="window.print()" class="btn btn-primary">Print Application</button>
    
    <!-- Back to dashboard -->
    <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
</div>
{% endblock %}


File: cto_print_template.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Print CTO Application</title>
    <style>
        .cto-template {
            position: relative;
            width: 800px;
            height: 600px;
        }
        img {
            width: 100%;
            height: auto;
        }
        .field {
            position: absolute;
            font-size: 16px;
            font-family: Arial, sans-serif;
            color: black;
            text-transform: uppercase;
        }
        .name { top: 487px; left: 555px; }
        .position { top: 506px; left: 580px; }
        .days { top: 210px; left: 100px; }
        .start-date { top: 305px; left: 210px; }
        .end-date { top: 325px; left: 210px; }
        .recommender { top: 487px; left: 350px; } /* Adjust position for Recommender */
    </style>
</head>
<body>
    <div class="cto-template">
        <img src="/static/cto_application_template.jpg" alt="CTO Template">
        
        <div class="field name">{{ name }}</div>
        <!-- <div class="field position">{{ position }}</div> -->
        <!-- <div class="field days">{{ days }}</div> -->
        <div class="field start-date">{{ start_date }}</div>
        <div class="field end-date">{{ end_date }}</div>
        <div class="field recommender">{{ recommending_approval }}</div> <!-- Recommender is printed -->
    </div>
    <script>
        window.onload = function() {
            window.print();
        };
    </script>
</body>
</html>


File: document_tracker.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Tracker</title>
    <link rel="stylesheet" href="style.css"> <!-- Shared CSS file link -->
    <style>
        /* Base styling */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            color: #333;
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: #ecf0f1;
            display: flex;
            flex-direction: column;
            padding: 20px;
            box-shadow: 4px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar h2 {
            font-size: 20px;
            margin-bottom: 1em;
        }

        .sidebar a {
            color: #ecf0f1;
            text-decoration: none;
            margin: 10px 0;
            font-size: 16px;
        }

        .sidebar a:hover {
            color: #3498db;
        }

        .content {
            flex: 1;
            padding: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            width: 100%;
        }

        .page-title {
            font-size: 28px;
            margin-bottom: 30px;
            color: #34495e;
            text-align: center;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .form-field label {
            font-size: 14px;
            color: #555;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .input-text, .input-select {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .input-text:focus, .input-select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
        }

        #other_document_type {
            display: none;
        }

        .autocomplete-suggestions {
            position: absolute;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-height: 150px;
            overflow-y: auto;
            z-index: 1000;
            width: calc(100% - 20px);
            top: calc(100% + 2px);
            left: 10px;
            display: none;
        }

        .autocomplete-suggestions.active {
            display: block;
        }

        .autocomplete-suggestion {
            padding: 10px;
            cursor: pointer;
            font-size: 14px;
        }

        .autocomplete-suggestion:hover {
            background-color: #3498db;
            color: #fff;
        }

        .btn-submit {
            background-color: #3498db;
            color: #fff;
            padding: 12px 20px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            width: 100%;
        }

        .btn-submit:hover {
            background-color: #2980b9;
        }
        .alert {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }
        
    </style>
    <script>
        function toggleOtherInput() {
            const documentType = document.getElementById("document_type").value;
            const otherInput = document.getElementById("other_document_type");

            otherInput.style.display = documentType === "Other" ? "block" : "none";
        }

        async function searchNames() {
            const input = document.getElementById("forwarded_to").value;
            const suggestionsBox = document.getElementById("autocomplete-suggestions");

            if (input.length < 1) {
                suggestionsBox.innerHTML = '';
                suggestionsBox.classList.remove("active");
                return;
            }

            try {
                const response = await fetch(`/search_users?q=${encodeURIComponent(input)}`);
                if (!response.ok) throw new Error("Network response was not ok");
                const usernames = await response.json();
                console.log(usernames); // Debugging line to check received data

                suggestionsBox.innerHTML = '';
                usernames.forEach(username => {
                    const div = document.createElement("div");
                    div.classList.add("autocomplete-suggestion");
                    div.textContent = username;

                    div.onclick = () => {
                        document.getElementById("forwarded_to").value = username;
                        suggestionsBox.innerHTML = '';
                        suggestionsBox.classList.remove("active");
                    };

                    suggestionsBox.appendChild(div);
                });

                if (usernames.length > 0) {
                    suggestionsBox.classList.add("active");
                } else {
                    suggestionsBox.classList.remove("active");
                }

            } catch (error) {
                console.error("Error fetching usernames:", error);
            }
        }
    </script>
</head>
<body>
    <div class="content">
        <div class="container">
            <h2 class="page-title">Document Tracker</h2>
            <form action="{{ url_for('submit_document_tracker') }}" method="POST" class="form-group">
                
                <!-- Hidden Name field -->
                <div class="form-field" style="display: none;">
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="input-text" required>
                </div>

                <!-- Hidden Position field -->
                <div class="form-field" style="display: none;">
                    <label for="position">Position:</label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}" class="input-text" required>
                </div>

                <!-- Hidden Office field -->
                <div class="form-field" style="display: none;">
                    <label for="office">Office:</label>
                    <input type="text" id="office" name="office" value="{{ session['office'] }}" class="input-text">
                </div>
                
                <div class="form-field" style="display: none;">
                    <label for="division">Division:</label>
                    <input type="text" id="division" name="division" value="{{ session['division'] }}" class="input-text" required>
                </div>
                <div class="form-field">
                    <label for="document_type">Document Type:</label>
                    <select id="document_type" name="document_type" onchange="toggleOtherInput()" required class="input-select">
                        <option value="" disabled selected>Select Document Type</option>
                        <option value="ACR">ACR</option>
                        <option value="Advisory">Advisory</option>
                        <option value="Application Papers">Application Papers</option>
                        <option value="BAC Documents">BAC Documents</option>
                        <option value="Bonding Request">Bonding Request</option>
                        <option value="Budget Proposal">Budget Proposal</option>
                        <option value="Cash Advance">Cash Advance</option>
                        <option value="Change of Name Application">Change of Name Application</option>
                        <option value="COC Request">COC Request</option>
                        <option value="Complaint">Complaint</option>
                        <option value="Contract">Contract</option>
                        <option value="CTO Application">CTO Application</option>
                        <option value="Disbursement Voucher">Disbursement Voucher</option>
                        <option value="Endorsement">Endorsement</option>
                        <option value="E-SIP">E-SIP</option>
                        <option value="Form 48">Form 48</option>
                        <option value="Form 5">Form 5</option>
                        <option value="Form 6">Form 6</option>
                        <option value="Government Permit">Government Permit</option>
                        <option value="Invitation">Invitation</option>
                        <option value="Job Description">Job Description</option>
                        <option value="Justification">Justification</option>
                        <option value="Leave Application">Leave Application</option>
                        <option value="Letter">Letter</option>
                        <option value="Logistics Request">Logistics Request</option>
                        <option value="Memorandum">Memorandum</option>
                        <option value="MOA/MOU">MOA/MOU</option>
                        <option value="Monthly Schedule">Monthly Schedule</option>
                        <option value="Office Order">Office Order</option>
                        <option value="ORF">ORF</option>
                        <option value="Purchase Request">Purchase Request</option>
                        <option value="Quarterly Report">Quarterly Report</option>
                        <option value="Request">Request</option>
                        <option value="Resume">Resume</option>
                        <option value="Travel Authority">Travel Authority</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div class="form-field">
                    <label for="details">Details:</label>
                    <input type="text" id="details" name="details" class="input-text" required>
                </div>

                <div class="form-field">
                    <label for="forward_to_division">Forward to Division:</label>
                    <select id="forward_to_division" name="forward_to_division" class="input-select" onchange="updateOfficeOptions()" required>
                        <option value="" disabled selected>Select Division</option>
                        <option value="SGOD">SGOD</option>
                        <option value="OSDS">OSDS</option>
                        <option value="CID">CID</option>
                    </select>
                </div>                

                <div class="form-field">
                    <label for="office_forwarded_to">Office Forwarded to:</label>
                    <select id="office_forwarded_to" name="office_forwarded_to" class="input-select" required>
                        <option value="">Select Office</option>
                        {% for office in officeOptions %}
                            <option value="{{ office }}" {{ 'selected' if session['office'] == office else '' }}>{{ office }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="form-field">
                    <label for="forwarded_to">Forwarded to:</label>
                    <div style="position: relative;">
                        <input type="text" id="forwarded_to" name="forwarded_to" class="input-text" oninput="searchNames()" autocomplete="off">
                        <div id="autocomplete-suggestions" class="autocomplete-suggestions"></div>
                    </div>
                </div>

                <button type="submit" class="btn-submit">Submit</button>
                <div class="text-center mt-4">
                    <a href="{{ url_for('user_dashboard') }}" class="btn btn-primary mb-3">Back to Dashboard</a>
                </div>
            </form>

            {% with messages = get_flashed_messages(with_categories=True) %}
                {% if messages %}
                <div class="flash-messages">
                    {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                    {% endfor %}
                </div>
                {% endif %}
            {% endwith %}
        </div>
    </div>

    <script>
        const officeOptions = {
            OSDS: ["Accounting", "Admin", "Budget", "ICT", "Legal", "Office of the ASDS", "Office of the SDS", "Payroll", "Personnel", "Records"],
            SGOD: ["Education Facilities", "Health", "HRD", "Planning & Research", "SGOD", "SMME", "SMN"],
            CID: ["ALS", "CID", "LR", "PSDS"]
        };

        function updateOfficeOptions() {
            const divisionSelect = document.getElementById("forward_to_division");
            const officeSelect = document.getElementById("office_forwarded_to");

            // Clear current options
            officeSelect.innerHTML = '<option value="">Select Office</option>';

            // Get selected division
            const selectedDivision = divisionSelect.value;

            // Populate offices based on selected division
            if (officeOptions[selectedDivision]) {
                officeOptions[selectedDivision].forEach(office => {
                    const option = document.createElement("option");
                    option.value = office;
                    option.text = office;
                    officeSelect.appendChild(option);
                });
            }
        }
    </script>
</body>
</html>


File: edit_user.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}

<form method="POST" action="{{ url_for('edit_user', user_id=user[0]) }}">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" value="{{ user[1] }}" required>
    </div>
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" class="form-control" value="{{ user[2] }}" required>
    </div>
    <div class="form-group">
        <label for="position">Position:</label>
        <input type="text" id="position" name="position" class="form-control" value="{{ user[5] }}" required> <!-- Change the index to user[3] -->
    </div>
    <div class="form-group">
        <label for="division">Division:</label>
        <select id="division" name="division" class="form-control" required>
            <option value="" disabled>Select Division</option>
            <option value="OSDS" {% if user[6] == 'OSDS' %}selected{% endif %}>OSDS</option>
            <option value="CID" {% if user[6] == 'CID' %}selected{% endif %}>CID</option>
            <option value="SGOD" {% if user[6] == 'SGOD' %}selected{% endif %}>SGOD</option>
        </select>
    </div>    
    <div class="form-group">
        <label for="office">Office:</label>
        <input type="text" id="office" name="office" class="form-control" value="{{ user[7] }}" required> <!-- Adjust the index as per your database -->
    </div>
    <div class="form-group">
        <label for="role">Role:</label>
        <select name="role" class="form-control">
            <option value="user" {% if user[4] == 'user' %}selected{% endif %}>User</option>
            <option value="admin" {% if user[4] == 'admin' %}selected{% endif %}>Admin</option>
            <option value="approver" {% if user[4] == 'approver' %}selected{% endif %}>Approver</option>
            <option value="unit_head" {% if user[4] == 'unit_head' %}selected{% endif %}>Unit Head</option>
            <option value="recommender" {% if user[4] == 'recommender' %}selected{% endif %}>Recommender</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Save Changes</button>
</form>

{% endblock %}


File: forward_document.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}
<style>
    .autocomplete-suggestions {
        border: 1px solid #ccc;
        background-color: #fff;
        max-height: 150px;
        overflow-y: auto;
        position: absolute;
        z-index: 1000;
        width: 100%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .autocomplete-suggestion {
        padding: 10px;
        cursor: pointer;
    }

    .autocomplete-suggestion:hover {
        background-color: #f0f0f0;
    }

    .form-field {
        margin-bottom: 15px;
    }

    .form-field label {
        font-weight: bold;
    }

    .form-field input,
    .form-field textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .form-field input:focus,
    .form-field textarea:focus {
        border-color: #007bff;
        outline: none;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }
</style>

<script>
    function toggleOtherInput() {
        const documentType = document.getElementById("document_type").value;
        const otherInput = document.getElementById("other_document_type");

        otherInput.style.display = documentType === "Other" ? "block" : "none";
    }

    async function searchNames() {
        const input = document.getElementById("forwarded_to").value;
        const suggestionsBox = document.getElementById("autocomplete-suggestions");

        if (input.length < 1) {
            suggestionsBox.innerHTML = '';
            suggestionsBox.classList.remove("active");
            return;
        }

        try {
            const response = await fetch(`/search_users?q=${encodeURIComponent(input)}`);
            if (!response.ok) throw new Error("Network response was not ok");
            const usernames = await response.json();
            console.log(usernames); // Debugging line to check received data

            suggestionsBox.innerHTML = '';
            usernames.forEach(username => {
                const div = document.createElement("div");
                div.classList.add("autocomplete-suggestion");
                div.textContent = username;

                div.onclick = () => {
                    document.getElementById("forwarded_to").value = username;
                    suggestionsBox.innerHTML = '';
                    suggestionsBox.classList.remove("active");
                };

                suggestionsBox.appendChild(div);
            });

            if (usernames.length > 0) {
                suggestionsBox.classList.add("active");
            } else {
                suggestionsBox.classList.remove("active");
            }

        } catch (error) {
            console.error("Error fetching usernames:", error);
        }
    }
</script>

<div class="container mt-5">
    <h2 class="mb-4">Forward Document</h2>
    <form action="{{ url_for('submit_forward_document') }}" method="POST">
        <input type="hidden" name="document_id" value="{{ document_id }}">
        <div class="form-field">
            <label for="forwarded_to">Forwarded to:</label>
            <div style="position: relative;">
                <input type="text" id="forwarded_to" name="forwarded_to" class="input-text" oninput="searchNames()" autocomplete="off">
                <div id="autocomplete-suggestions" class="autocomplete-suggestions"></div>
            </div>
        </div>
        <div class="form-field">
            <label for="office">Office Forwarded to:</label>
            <textarea class="form-control" id="office" name="office" rows="3"></textarea>
        </div>
        <div class="form-field">
            <label for="comments">Comments:</label>
            <textarea class="form-control" id="comments" name="comments" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Forward</button>
    </form>
</div>
{% endblock %}


File: leave_application.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Leave Application</h2>
        </div>
        <div class="card-body">
            <form id="leaveForm" method="POST" action="{{ url_for('submit_and_print_leave_application_excel') }}">
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="position" class="form-label">Position:</label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
                </div>

                <!-- Add Office Field -->
                <div class="form-group mb-3">
                    <label for="office" class="form-label">Office:</label>
                    <input type="text" id="office" name="office" value="{{ user_details[0] }}" class="form-control" required>
                </div>

                <!-- Add Salary Field -->
                <div class="form-group mb-3">
                    <label for="salary" class="form-label">Salary:</label>
                    <input type="number" id="salary" name="salary" value="{{ user_details[1] }}" class="form-control" required>
                </div>

                <div class="form-group mb-3">
                    <label for="days" class="form-label">No. of Days applied:</label>
                    <input type="number" id="days" name="days" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="start_date" class="form-label">Start Date:</label>
                    <input type="date" id="start_date" name="start_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="end_date" class="form-label">End Date:</label>
                    <input type="date" id="end_date" name="end_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="leave_type" class="form-label">Leave Type:</label>
                    <select id="leave_type" name="leave_type" class="form-select" required>
                        <option value="" disabled selected>Select Leave Type</option>
                        <option value="Vacation Leave">Vacation Leave</option>
                        <option value="Mandatory/Forced Leave">Mandatory/Forced Leave</option>
                        <option value="Sick Leave">Sick Leave</option>
                        <option value="Maternity Leave">Maternity Leave</option>
                        <option value="Paternity Leave">Paternity Leave</option>
                        <option value="Special Privilege Leave">Special Privilege Leave</option>
                        <option value="Solo Parent Leave">Solo Parent Leave</option>
                        <option value="Study Leave">Study Leave</option>
                        <option value="10-Day VAWC Leave">10-Day VAWC Leave</option>
                        <option value="Rehabilitation Privilege">Rehabilitation Privilege</option>
                        <option value="Special Leave for Women">Special Leave for Women</option>
                        <option value="Calamity Leave">Calamity Leave</option>
                        <option value="Adoption Leave">Adoption Leave</option>
                        <option value="Monetization">Monetization</option>
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="recommending_approval" class="form-label">Recommender:</label>
                    <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                        <option value="" disabled selected>Select Recommender</option>
                        {% for user in approving_users %}
                            <option value="{{ user }}">{{ user }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div class="d-flex justify-content-between">
                    <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                    <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Excel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function handleFormSubmit() {
        setTimeout(function() {
            window.location.href = "{{ url_for('user_dashboard') }}";
        }, 1000);
    }
</script>
{% endblock %}


File: leave_application_print.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<div class="container">
    <div class="template-container">
        <img src="{{ url_for('static', filename='leave_application_template.jpg') }}" alt="Leave Application Template" class="template">

        <div class="text-field name">{{ name }}</div>
        <div class="text-field position">{{ position }}</div>
        <div class="text-field office">{{ office }}</div> <!-- Office -->
        <div class="text-field salary">{{ salary }}</div> <!-- Salary -->
        <div class="text-field days">{{ days }}</div> <!-- No. of Days Applied -->
        <div class="text-field start-date">{{ start_date }}</div>
        <div class="text-field end-date">{{ end_date }}</div>
        <div class="text-field leave-type">{{ leave_type }}</div>
        <div class="text-field recommender">{{ recommending_approval }}</div>
    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }
    .container {
        position: relative;
        width: 100%;
        height: 100%;
    }
    .template {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        z-index: -1; /* Set behind the text fields */
    }
    .text-field {
        position: absolute;
        font-family: Arial, sans-serif;
    }
    /* Adjust positions according to where you want the text to appear on the template */
    .name {
        top: 150px; /* Adjust the position */
        left: 120px; /* Adjust the position */
        font-size: 20px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .position {
        top: 200px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .office {
        top: 250px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .salary {
        top: 300px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .days {
        top: 350px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .start-date {
        top: 400px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .end-date {
        top: 400px;
        left: 300px; /* Adjust the position */
        font-size: 18px;
    }
    .leave-type {
        top: 450px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
    .recommender {
        top: 500px; /* Adjust the position */
        left: 120px;
        font-size: 18px;
    }
</style>

{% endblock %}


File: login.html (in W:\warm-hollows-62602\templates)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DASH: Document Application System Hub - Login</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(to right, #2c3e50, #3498db); 
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            max-width: 400px;
            background: #1c1e21;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            text-align: center;
        }
        .form-group label {
            font-weight: 600;
            color: #fff;
        }
        .form-control {
            border-radius: 8px;
            background-color: #f3f3f3;
        }
        .form-control:focus {
            border-color: #ff7f50;
            box-shadow: 0 0 5px rgba(255, 127, 80, 0.5);
        }
        .btn-primary {
            background-color: #ff7f50;
            border-color: #ff7f50;
            font-weight: 600;
            border-radius: 8px;
            margin-top: 10px;
        }
        .btn-primary:hover {
            background-color: #e06e39;
            border-color: #e06e39;
        }
        .search-section {
            background-color: #222;
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
            color: #fff;
        }
        .search-results {
            max-height: 150px;
            overflow-y: auto;
        }
        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #ff7f50;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 15px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="text-center">
            <img src="{{ url_for('static', filename='logo.png') }}" alt="Division Logo" style="max-width: 120px; margin-bottom: 15px;">
        </div>
        <h2>Login to DASH</h2>
        <p> Document Application System Hub</p>

        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
          <div class="alert alert-danger flash-message">
            {% for category, message in messages %}
              <p>{{ message }}</p>
            {% endfor %}
          </div>
        {% endif %}
        {% endwith %}

        <!-- Login Form -->
        <form method="POST" action="{{ url_for('login') }}">
            <div class="form-group">
                <label for="username">Employee ID:</label>
                <input type="text" id="username" name="username" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>

        <!-- Search Form -->
        <div class="search-section mt-4">
            <h5>Check Registration</h5>
            <form id="user-search-form" class="form-inline justify-content-center">
                <input type="text" id="search-input" name="search-input" class="form-control mr-2" placeholder="Enter Employee ID" required>
                <button type="button" class="btn btn-info" onclick="searchUser()">Search</button>
            </form>
            <p id="search-result" class="mt-2 font-weight-bold text-info"></p>
        </div>
        <a href="{{ url_for('register') }}" class="btn btn-secondary btn-block mt-4">Register</a>
        <footer class="text-center" style="color: #ffa55b; margin-top: 20px;">
            <p>&copy; 2024 Schools Division of Calbayog City. All rights reserved.</p>
        </footer>

        <script>
            function searchUser() {
                const query = document.getElementById("search-input").value;
                fetch(`/search_user?query=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        const result = data.exists ? "User already registered." : "No user exists, please register.";
                        document.getElementById("search-result").textContent = result;
                        document.getElementById("search-result").style.color = data.exists ? "lightgreen" : "salmon";
                    });
            }
        </script>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


File: recommended_applications.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Recommended Applications</h2>

    <!-- Global Search Bar -->
    <div class="mb-4">
        <input type="text" id="globalSearch" class="form-control" onkeyup="filterAllTables()" placeholder="Search for applications...">
    </div>

    <!-- CTO Applications Section -->
    <div class="application-section mb-4">
        <h3>CTO Applications</h3>
        <table id="ctoTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('ctoTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('ctoTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('ctoTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('ctoTable', 3)" class="sortable">Days</th>
                    <th onclick="sortTable('ctoTable', 4)" class="sortable">Start Date</th>
                    <th onclick="sortTable('ctoTable', 5)" class="sortable">End Date</th>
                    <th onclick="sortTable('ctoTable', 6)" class="sortable">Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in cto_recommended_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[6] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[11] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="ctoPagination" class="pagination-controls"></div>
    </div>

    <!-- Leave Applications Section -->
    <div class="application-section mb-4">
        <h3>Leave Applications</h3>
        <table id="leaveTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('leaveTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('leaveTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('leaveTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('leaveTable', 3)" class="sortable">Days</th>
                    <th onclick="sortTable('leaveTable', 4)" class="sortable">Start Date</th>
                    <th onclick="sortTable('leaveTable', 5)" class="sortable">End Date</th>
                    <th onclick="sortTable('leaveTable', 6)" class="sortable">Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in leave_recommended_apps %}
                <tr>
                    <td>{{ app[0] }}</td>
                    <td>{{ app[1] }}</td>
                    <td>{{ app[2] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[7] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="leavePagination" class="pagination-controls"></div>
    </div>

    <!-- Travel Authorities Section -->
    <div class="application-section mb-4">
        <h3>Travel Authorities</h3>
        <table id="travelTable" class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable('travelTable', 0)" class="sortable">ID</th>
                    <th onclick="sortTable('travelTable', 1)" class="sortable">Name</th>
                    <th onclick="sortTable('travelTable', 2)" class="sortable">Position</th>
                    <th onclick="sortTable('travelTable', 3)" class="sortable">Start Date</th>
                    <th onclick="sortTable('travelTable', 4)" class="sortable">End Date</th>
                    <th onclick="sortTable('travelTable', 5)" class="sortable">Destination</th>
                    <th onclick="sortTable('travelTable', 6)" class="sortable">Purpose</th>
                    <th onclick="sortTable('travelTable', 7)" class="sortable">Date Recommended</th>
                </tr>
            </thead>
            <tbody>
                {% for app in travel_recommended_apps %}
                <tr>
                    <td>{{ app[1] }}</td>
                    <td>{{ app[3] }}</td>
                    <td>{{ app[4] }}</td>
                    <td>{{ app[7] }}</td>
                    <td>{{ app[8] }}</td>
                    <td>{{ app[9] }}</td>
                    <td>{{ app[5] }}</td>
                    <td>{{ app[11] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <div id="travelPagination" class="pagination-controls"></div>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommender_dashboard') }}" class="btn btn-secondary mb-3">Go back to Dashboard</a>
    </div>
</div>

<script>
// Filtering function for global search
function filterAllTables() {
    let input = document.getElementById('globalSearch');
    let filter = input.value.toUpperCase();
    let tables = ['ctoTable', 'leaveTable', 'travelTable'];
    
    tables.forEach(tableId => {
        let table = document.getElementById(tableId);
        let tr = table.getElementsByTagName('tr');
        for (let i = 1; i < tr.length; i++) {
            let tdArray = tr[i].getElementsByTagName('td');
            let rowContainsSearchText = Array.from(tdArray).some(td => {
                return td.textContent.toUpperCase().indexOf(filter) > -1;
            });
            tr[i].style.display = rowContainsSearchText ? '' : 'none';
        }
    });
}

// Function to sort table by a given column index
function sortTable(tableId, colIndex) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let sortedRows = Array.from(rows).sort((a, b) => {
        let aVal = a.getElementsByTagName('td')[colIndex].innerText;
        let bVal = b.getElementsByTagName('td')[colIndex].innerText;

        // Sort by date if the column is a date
        if (colIndex >= 4) { // Assuming start/end/date columns are at index 4 or higher
            return new Date(bVal) - new Date(aVal);  // Descending sort
        }

        return aVal.localeCompare(bVal); // Default string sort
    });

    // Clear and re-append rows in sorted order
    let tbody = table.getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    sortedRows.forEach(row => tbody.appendChild(row));
}

// Function to paginate the table
function paginateTable(tableId, itemsPerPage) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let totalPages = Math.ceil(rows.length / itemsPerPage);

    // Create pagination controls
    let pagination = document.getElementById(tableId + 'Pagination');
    pagination.innerHTML = ''; // Clear previous pagination

    for (let i = 1; i <= totalPages; i++) {
        let button = document.createElement('button');
        button.innerText = i;
        button.classList.add('btn', 'btn-outline-primary', 'mx-1');
        button.onclick = function () {
            displayPage(tableId, i, itemsPerPage);
        };
        pagination.appendChild(button);
    }
}

// Function to display specific page
function displayPage(tableId, pageNum, itemsPerPage) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    for (let i = 0; i < rows.length; i++) {
        rows[i].style.display = (Math.floor(i / itemsPerPage) === pageNum - 1) ? '' : 'none';
    }
}

// Initialize tables on document ready
$(document).ready(function() {
    const itemsPerPage = 5; // Set number of items per page
    paginateTable('ctoTable', itemsPerPage);
    paginateTable('leaveTable', itemsPerPage);
    paginateTable('travelTable', itemsPerPage);
});
</script>

<style>
body {
    background-color: #f8f9fa;
}
.application-section {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}
.sortable {
    cursor: pointer;
}
.pagination-controls {
    margin-top: 20px;
}
</style>

{% endblock %}


File: recommended_head.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Recommended Applications for Unit Head</h2>

    <!-- Global Search Bar -->
    <div class="mb-4">
        <input type="text" id="globalSearch" class="form-control" onkeyup="filterAllTables()" placeholder="Search for applications...">
    </div>

    <!-- CTO Applications -->
    <h3>CTO Applications</h3>
    <table id="ctoTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th onclick="sortTable('ctoTable', 0)" class="sortable">ID</th>
                <th onclick="sortTable('ctoTable', 1)" class="sortable">Name</th>
                <th onclick="sortTable('ctoTable', 2)" class="sortable">Position</th>
                <th onclick="sortTable('ctoTable', 3)" class="sortable">Days</th>
                <th onclick="sortTable('ctoTable', 4)" class="sortable">Start Date</th>
                <th onclick="sortTable('ctoTable', 5)" class="sortable">End Date</th>
                <th onclick="sortTable('ctoTable', 6)" class="sortable">Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in cto_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <div id="ctoPagination" class="pagination-controls"></div>

    <!-- Leave Applications -->
    <h3>Leave Applications</h3>
    <table id="leaveTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th onclick="sortTable('leaveTable', 0)" class="sortable">ID</th>
                <th onclick="sortTable('leaveTable', 1)" class="sortable">Name</th>
                <th onclick="sortTable('leaveTable', 2)" class="sortable">Position</th>
                <th onclick="sortTable('leaveTable', 3)" class="sortable">Days</th>
                <th onclick="sortTable('leaveTable', 4)" class="sortable">Start Date</th>
                <th onclick="sortTable('leaveTable', 5)" class="sortable">End Date</th>
                <th onclick="sortTable('leaveTable', 6)" class="sortable">Leave Type</th>
                <th onclick="sortTable('leaveTable', 7)" class="sortable">Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in leave_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <div id="leavePagination" class="pagination-controls"></div>

    <!-- Travel Authority Applications -->
    <h3>Travel Authority Applications</h3>
    <table id="travelTable" class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th onclick="sortTable('travelTable', 0)" class="sortable">ID</th>
                <th onclick="sortTable('travelTable', 1)" class="sortable">Name</th>
                <th onclick="sortTable('travelTable', 2)" class="sortable">Position</th>
                <th onclick="sortTable('travelTable', 3)" class="sortable">Destination</th>
                <th onclick="sortTable('travelTable', 4)" class="sortable">Host</th>
                <th onclick="sortTable('travelTable', 5)" class="sortable">Start Date</th>
                <th onclick="sortTable('travelTable', 6)" class="sortable">End Date</th>
                <th onclick="sortTable('travelTable', 7)" class="sortable">Date Recommended</th>
            </tr>
        </thead>
        <tbody>
            {% for app in travel_recommended_apps %}
            <tr>
                <td>{{ app[0] }}</td>
                <td>{{ app[1] }}</td>                
                <td>{{ app[2] }}</td>
                <td>{{ app[3] }}</td>
                <td>{{ app[4] }}</td>
                <td>{{ app[5] }}</td>
                <td>{{ app[6] }}</td>
                <td>{{ app[7] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <div id="travelPagination" class="pagination-controls"></div>

    <a href="{{ url_for('unit_head_dashboard') }}" class="btn btn-secondary mt-3">Back to Dashboard</a>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
// Filtering function for global search
function filterAllTables() {
    let input = document.getElementById('globalSearch');
    let filter = input.value.toUpperCase();
    let tables = ['ctoTable', 'leaveTable', 'travelTable'];
    
    tables.forEach(tableId => {
        let table = document.getElementById(tableId);
        let tr = table.getElementsByTagName('tr');
        for (let i = 1; i < tr.length; i++) {
            let tdArray = tr[i].getElementsByTagName('td');
            let rowContainsSearchText = Array.from(tdArray).some(td => {
                return td.textContent.toUpperCase().indexOf(filter) > -1;
            });
            tr[i].style.display = rowContainsSearchText ? '' : 'none';
        }
    });
}

// Function to sort table by a given column index
function sortTable(tableId, colIndex) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let sortedRows = Array.from(rows).sort((a, b) => {
        let aVal = a.getElementsByTagName('td')[colIndex].innerText;
        let bVal = b.getElementsByTagName('td')[colIndex].innerText;

        // Sort by date if the column is a date
        if (colIndex >= 4) { // Assuming start/end/date columns are at index 4 or higher
            return new Date(bVal) - new Date(aVal);  // Descending sort
        }

        return aVal.localeCompare(bVal); // Default string sort
    });

    // Clear and re-append rows in sorted order
    let tbody = table.getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    sortedRows.forEach(row => tbody.appendChild(row));
}

// Function to paginate the table
function paginateTable(tableId, itemsPerPage) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let totalPages = Math.ceil(rows.length / itemsPerPage);

    // Create pagination controls
    let pagination = document.getElementById(tableId + 'Pagination');
    pagination.innerHTML = ''; // Clear previous pagination

    for (let i = 1; i <= totalPages; i++) {
        let button = document.createElement('button');
        button.innerText = i;
        button.classList.add('btn', 'btn-outline-primary', 'mx-1');
        button.onclick = function () {
            displayPage(tableId, i, itemsPerPage);
        };
        pagination.appendChild(button);
    }
}

// Function to display specific page
function displayPage(tableId, pageNum, itemsPerPage) {
    let table = document.getElementById(tableId);
    let rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    for (let i = 0; i < rows.length; i++) {
        rows[i].style.display = (Math.floor(i / itemsPerPage) === pageNum - 1) ? '' : 'none';
    }
}

// Initialize tables on document ready
$(document).ready(function() {
    const itemsPerPage = 5; // Set number of items per page
    paginateTable('ctoTable', itemsPerPage);
    paginateTable('leaveTable', itemsPerPage);
    paginateTable('travelTable', itemsPerPage);

    // AJAX for recommending applications
    $('.recommend-btn').on('click', function() {
        var button = $(this);
        var appId = button.data('id');  // Get application ID
        var applicationType = button.data('type');  // Get application type

        $.ajax({
            type: 'POST',
            url: '/recommend_approval/' + appId,
            data: { application_type: applicationType },
            success: function(response) {
                if (response.success) {
                    button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                    alert('Application successfully recommended!');
                } else {
                    alert('Error: ' + response.error);
                }
            },
            error: function() {
                alert('An error occurred. Please try again.');
            }
        });
    });
});
</script>

<style>
body {
    background-color: #f8f9fa;
}
.table th {
    background-color: #ff0000; /* Change header color to black */
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
.sortable:hover {
    cursor: pointer;
    text-decoration: underline;
}
.pagination-controls {
    margin-top: 15px;
    text-align: center;
}
</style>

{% endblock %}


File: recommender_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<div class="container mt-5">
    <h2 class="text-center mb-4">Recommender Dashboard</h2>

    <!-- CTO Applications Table -->
    <div class="application-section">
        <h4 class="section-title">CTO Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in cto_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="cto">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Leave Applications Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Leave Applications</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Days</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Leave Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for application in leave_applications %}
                <tr id="row-{{ application[0] }}">
                    <td>{{ application[1] }}</td>
                    <td>{{ application[2] }}</td>
                    <td>{{ application[3] }}</td>
                    <td>{{ application[4] }}</td>
                    <td>{{ application[5] }}</td>
                    <td>{{ application[7] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ application[0] }}" 
                                data-type="leave">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Travel Authorities Table -->
    <div class="application-section mt-4">
        <h4 class="section-title">Travel Authorities</h4>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>Position</th>
                    <th>Purpose</th>
                    <th>Destination</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for authority in travel_authorities %}
                <tr id="row-{{ authority[0] }}">
                    <td>{{ authority[1] }}</td>
                    <td>{{ authority[2] }}</td>
                    <td>{{ authority[3] }}</td>
                    <td>{{ authority[7] }}</td>
                    <td>{{ authority[5] }}</td>
                    <td>{{ authority[6] }}</td>
                    <td>
                        <button class="btn btn-primary recommend-btn" 
                                data-id="{{ authority[0] }}" 
                                data-type="travel_authority">
                            Recommend
                        </button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommended_applications') }}" class="btn btn-primary mb-3">See Recommended Applications</a>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommend approval
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
</script>

<style>
    body {
        background-color: #f8f9fa;
    }
    .application-section {
        background-color: #ffffff;
        border-radius: 0.5rem;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .section-title {
        font-weight: bold;
        color: #343a40;
    }
    .table th {
        background-color: #007bff;
        color: white;
    }
    .table tbody tr:hover {
        background-color: #e9ecef;
    }
    .btn-primary {
        border-radius: 0.5rem;
    }
    .btn-primary:hover {
        background-color: #0056b3;
    }
</style>

{% endblock %}


File: register.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<h2>Register</h2>
<form method="POST" action="{{ url_for('register') }}">
    <div class="form-group">
        <label for="name">Employee ID:</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="username">Name (Last, First, MI):</label>
        <input type="text" id="username" name="username" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="confirm_password">Confirm Password:</label>
        <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}


File: reject_application.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container">
    <h2>Reject {{ application.app_type }} Application</h2>  <!-- Corrected to show the right type -->
    <p><strong>Name:</strong> {{ application.name }}</p>    <!-- Corrected to show the user name -->
    <p><strong>Applying for:</strong> {{ application.app_type }}</p>

    <form method="POST" action="{{ url_for('submit_rejection', app_id=application.app_id, app_type=application.app_type) }}">
        <div class="form-group">
            <label for="rejection_reason">Reason for Rejection:</label>
            <textarea class="form-control" id="rejection_reason" name="rejection_reason" rows="4" required></textarea>
        </div>
        <button type="submit" class="btn btn-danger">Confirm Rejection</button>
        <a href="{{ url_for('approver_dashboard') }}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}


File: submit_document.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Submit Application</h2>
        </div>
        <div class="card-body">
            <form id="documentForm">
                <div class="form-group mb-3">
                    <label for="document_type" class="form-label">Document Type:</label>
                    <select id="document_type" name="document_type" class="form-select" required aria-label="Document Type">
                        <option value="" disabled selected>Select Document Type</option>
                        <option value="Travel Authority">Travel Authority</option>
                        <option value="CTO Application">CTO Application</option>
                        <option value="Leave Application">Leave Application</option>
                    </select>
                </div>
                
                <!-- New Division Dropdown -->
                <div class="form-group mb-3">
                    <label for="division" class="form-label">Division:</label>
                    <select id="division" name="division" class="form-select" required aria-label="Division">
                        <option value="" disabled selected>Select Division</option>
                        <option value="OSDS">OSDS</option>
                        <option value="SGOD">SGOD</option>
                        <option value="CID">CID</option>
                    </select>
                </div>

                <button type="button" class="btn btn-primary" onclick="redirectToForm()">Next</button>

            </form>
        </div>
    </div>
</div>
<a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary ms-2">Back to My Dashboard</a>

<script>
function redirectToForm() {
    const documentType = document.getElementById('document_type').value;
    const division = document.getElementById('division').value;

    if (!documentType || !division) {
        alert('Please select both Document Type and Division.');
        return;
    }

    let redirectUrl = '';

    switch(documentType) {
        case 'Travel Authority':
            redirectUrl = "{{ url_for('travel_authority') }}";
            break;
        case 'CTO Application':
            redirectUrl = "{{ url_for('cto_application') }}";
            break;
        case 'Leave Application':
            redirectUrl = "{{ url_for('leave_application') }}";
            break;
    }

    window.location.href = redirectUrl;
}
</script>
{% endblock %}


File: travel_authority.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Travel Authority Application</h2>
        </div>
        <div class="card-body">
            <form id="travelAuthorityForm" method="POST" action="{{ url_for('submit_and_print_travel_authority_excel') }}">
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="position" class="form-label">Position:</label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="purpose" class="form-label">Purpose:</label>
                    <input type="text" id="purpose" name="purpose" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="destination" class="form-label">Destination:</label>
                    <input type="text" id="destination" name="destination" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="start_date" class="form-label">Start Date:</label>
                    <input type="date" id="start_date" name="start_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="end_date" class="form-label">End Date:</label>
                    <input type="date" id="end_date" name="end_date" class="form-control" required>
                </div>
                <div class="form-group mb-3">
                    <label for="recommending_approval" class="form-label">Recommender:</label>
                    <select id="recommending_approval" name="recommending_approval" class="form-select" required>
                        <option value="" disabled selected>Select Recommender</option>
                        {% for user in approving_users %}
                            <option value="{{ user }}">{{ user }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="host" class="form-label">Host of Activity:</label>
                    <input type="text" id="host" name="host" class="form-control" required>
                </div>

                <div class="d-flex justify-content-between">
                    <a href="{{ url_for('user_dashboard') }}" class="btn btn-secondary">Back to My Dashboard</a>
                    <button type="submit" class="btn btn-primary" onclick="handleFormSubmit()">Submit and Download Travel Authority</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function handleFormSubmit() {
        setTimeout(function() {
            window.location.href = "{{ url_for('user_dashboard') }}";
        }, 1000);
    }
</script>
{% endblock %}


File: travel_authority_print_template.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}
{% block content %}

<div class="container">
    <div class="template-container">
        <img src="{{ url_for('static', filename='travel_authority_template.jpg') }}" alt="Travel Authority Template" class="template">

        <div class="text-field name1">{{ name }}</div>
        <div class="text-field name">{{ name }}</div>
        <div class="text-field position">{{ position }}</div>
        <div class="text-field purpose">{{ purpose }}</div>
        <div class="text-field host">{{ host }}</div> <!-- Host of Activity -->
        <div class="text-field start-date">{{ start_date }} - </div>
        <div class="text-field end-date">{{ end_date }}</div>
        <div class="text-field destination">{{ destination }}</div>
        <div class="text-field recommender">{{ recommending_approval }}</div> <!-- Recommender -->
        <div class="text-field recommender-position">{{ recommender_position }}</div> <!-- Recommender's Position -->
    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }
    .container {
        position: relative;
        width: 100%;
        height: 100%;
    }
    .template {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        z-index: -1; /* Set behind the text fields */
    }
    .text-field {
        position: absolute;
        font-family: Arial, sans-serif;
    }
    .name1 {
        top: 512px;
        left: 495px;
        font-size: 20px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .name {
        top: 1075px;
        left: 140px;
        font-size: 20px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .position {
        top: 565px;
        left: 495px;
        font-size: 18px;
    }
    .purpose {
        top: 670px;
        left: 495px;
        font-size: 18px;
    }
    .host {
        top: 750px;
        left: 495px;
        font-size: 18px;
    }
    .start-date {
        top: 805px;
        left: 495px;
        font-size: 18px;
    }
    .end-date {
        top: 805px;
        left: 600px;
        font-size: 18px;
    }
    .destination {
        top: 860px;
        left: 495px;
        font-size: 18px;
    }
    .recommender {
        top: 1330px;
        left: 140px;
        font-size: 20px;
        font-weight: bold;
    }
    .recommender-position {
        top: 1360px; /* Adjust this to position it correctly */
        left: 140px;
        font-size: 18px; /* Slightly smaller font size */
        font-weight: normal;
    }
</style>

{% endblock %}


File: unit_head_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">Unit Head Dashboard</h2>

    <!-- CTO Applications Table -->
    <h4>CTO Applications</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in cto_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="cto">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Leave Applications Table -->
    <h4>Leave Applications</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Days</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for application in leave_applications %}
            <tr id="row-{{ application[0] }}">
                <td>{{ application[1] }}</td>
                <td>{{ application[2] }}</td>
                <td>{{ application[3] }}</td>
                <td>{{ application[4] }}</td>
                <td>{{ application[5] }}</td>
                <td>{{ application[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Recommend
                    </button>
                    <!-- <button class="btn btn-danger reject-btn" 
                            data-id="{{ application[0] }}" 
                            data-type="leave">
                        Reject
                    </button> -->
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Travel Authorities Table -->
    <h4>Travel Authorities</h4>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Purpose</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for authority in travel_authorities %}
            <tr id="row-{{ authority[0] }}">
                <td>{{ authority[1] }}</td>
                <td>{{ authority[2] }}</td>
                <td>{{ authority[3] }}</td>
                <td>{{ authority[4] }}</td>
                <td>{{ authority[5] }}</td>
                <td>{{ authority[8] }}</td> <!-- Display the status -->
                <td>
                    <button class="btn btn-success recommend-btn" 
                            data-id="{{ authority[0] }}" 
                            data-type="travel_authority">
                        Recommend
                    </button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div class="text-center mt-4">
        <a href="{{ url_for('recommended_head') }}" class="btn btn-danger mb-3">See Recommended Applications</a>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        // AJAX for recommending applications
        $('.recommend-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var applicationType = button.data('type');  // Get application type

            $.ajax({
                type: 'POST',
                url: '/recommend_approval/' + appId,
                data: { application_type: applicationType },
                success: function(response) {
                    if (response.success) {
                        button.text('Recommended').attr('disabled', true).removeClass('btn-primary').addClass('btn-secondary');
                        alert('Application successfully recommended!');
                    } else {
                        alert('Error: ' + response.error);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        // AJAX for rejecting applications
        $('.reject-btn').on('click', function() {
            var button = $(this);
            var appId = button.data('id');  // Get application ID
            var rejectionComment = prompt("Please enter a reason for rejection:");

            if (rejectionComment) {
                $.ajax({
                    type: 'POST',
                    url: '/reject_application/' + appId,
                    data: { rejection_comment: rejectionComment },
                    success: function(response) {
                        if (response.success) {
                            alert("Application rejected with comment: " + rejectionComment);
                            button.closest('tr').remove();  // Remove the row from the table
                        } else {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>

<style>
body {
    background-color: #f8f9fa;
}
.table th {
    background-color: #ff0000;
    color: white;
}
.table tbody tr:hover {
    background-color: #e9ecef;
}
.btn-custom {
    background-color: #007bff;
    color: white;
    border-radius: 0.5rem;
}
.btn-custom:hover {
    background-color: #0056b3;
}
</style>

{% endblock %}


File: user_dashboard.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> <!-- jQuery for AJAX -->


    <style>
        /* General Styling */
        body {
            background-color: #ffffff;
            color: #000000;
        }
        
        /* Sidebar Styling */
        #sidebar {
            width: 25%; /* Adjust as needed */
            background-color: #f4f4f4;
            padding: 10px;
            display: flex;
            flex-direction: column;
            height: 100vh; /* Full viewport height */
            border-right: 1px solid #ddd;
        }
        .tab-label-container {
        display: flex;
        align-items: center;
          }

        @keyframes flash {
        0%, 100% { opacity: 1; }
        50% { opacity: 0; }
        }

        .badge-danger {
            animation: flash 1s infinite;
        }
        /* Chatbox Styling */
        #chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            max-height: calc(100vh - 20px); /* Adjusts for padding */
            border: 1px solid #ccc;
            background: #fff;
        }
    
        #chat-header {
            background: #0078d7;
            color: #fff;
            padding: 10px;
            text-align: center;
            font-weight: bold;
        }
    
        #chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
    
        #chat-input {
            display: flex;
            border-top: 1px solid #ccc;
            padding: 10px;
        }
    
        #messageInput {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
        }
    
        .chat-message {
            margin: 5px 0;
        }
    
        .timestamp {
            font-size: 0.8em;
            color: #888;
        }
    
        /* Button Styling */
        button {
            padding: 8px;
            background: #0078d7;
            color: #fff;
            border: none;
            cursor: pointer;
        }
    
        .btn-custom {
            background-color: #17a2b8;
            color: white;
        }
    
        .btn-custom:hover {
            background-color: #138496;
        }
    
        /* Topbar Styling */
        .topbar {
            background-color: #343a40;
            color: white;
            padding: 15px;
            border-radius: 0.25rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
    
        .topbar .form-inline {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: center;
        }
    
        .topbar .form-group {
            margin-bottom: 0;
        }
    
        .topbar input {
            width: auto;
            min-width: 150px;
        }
    
        .topbar .btn-group {
            display: flex;
            gap: 10px;
        }
    
        /* Tooltip Styling */
        .tooltip-inner {
            text-align: left;
            white-space: normal; /* Text wrapping */
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
            font-size: 0.85em;
        }
    
        /* Table Styling */
        .table-container {
            width: 100%;
        }
    
        .table {
            width: 100%;
            margin-top: 20px;
            background-color: #f8f9fa;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 0.25rem;
            overflow: hidden;
            table-layout: auto;
        }
    
        .table thead th {
            background-color: #6c757d;
            color: white;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 1;
        }
    
        .table tbody td {
            text-align: center;
            vertical-align: middle;
            word-wrap: break-word;
            white-space: normal;
            padding: 8px;
        }
    
        .table th.wrap, .table td.wrap {
            max-width: 100px; /* Adjust the width as needed */
            word-wrap: break-word;
            white-space: normal;
        }
    
        /* Forwarding History Styling */
        .forwarding-history {
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            margin-left: 20px; /* Left indent */
            text-align: left;
        }
    
        .forwarding-history:nth-child(odd) {
            background-color: #e9ecef;
        }
    
        .forwarding-history:nth-child(even) {
            background-color: #f8f9fa;
        }
    
        /* Tab Navigation Styling */
        .nav-tabs {
            margin-bottom: 20px;
        }
    
        /* Responsive Styling */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
    
            .sidebar {
                display: none; /* Hide sidebar on smaller screens */
            }
    
            .content {
                width: 100%;
                margin: 0;
                padding: 0;
            }
    
            .table {
                font-size: 12px;
                overflow-x: auto;
            }
    
            .topbar {
                padding: 10px;
            }
        }
    
        @media (max-width: 480px) {
            .table {
                font-size: 10px;
            }
    
            .navbar {
                flex-direction: column;
            }
    
            .topbar {
                flex-direction: column;
                align-items: flex-start;
            }
    
            .topbar .user-info {
                font-size: 14px;
            }
    
            .card {
                margin-bottom: 10px;
            }
        }
    </style>
    

</head>

<body>
    <div class="topbar">
        <div class="form-inline">
            <span>User Info:</span>
            <form method="POST" action="{{ url_for('update_user_info') }}" class="form-inline">
                <div class="form-group">
                    <label for="name">Name: </label>
                    <input type="text" id="name" name="name" value="{{ session['username'] }}" class="form-control mx-2"
                        readonly>
                </div>
                <div class="form-group">
                    <label for="position">Position: </label>
                    <input type="text" id="position" name="position" value="{{ session['position'] }}"
                        class="form-control mx-2" required>
                    </div>
                    <select id="division" name="division" class="form-control mx-2" required onchange="filterOffices()">
                        <option value="">Select Division</option>
                        <option value="OSDS" {{ 'selected' if session['division'] == 'OSDS' else '' }}>OSDS</option>
                        <option value="SGOD" {{ 'selected' if session['division'] == 'SGOD' else '' }}>SGOD</option>
                        <option value="CID" {{ 'selected' if session['division'] == 'CID' else '' }}>CID</option>
                    </select>
                
                    <div class="form-group">
                        <label for="office">Office: </label>
                        <select id="office" name="office" class="form-control mx-2" required>
                            <option value="">Select Office</option>
                            {% for office in officeOptions %}
                                <option value="{{ office }}" {{ 'selected' if session['office'] == office else '' }}>{{ office }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <!-- <div class="form-group">
                        <label for="office">Office: </label>
                        <select id="office" name="office" class="form-control mx-2" required>
                            <option value="">Select Office</option>
                            <option value="OSDS" {% if session['office'] == "OSDS" %}selected{% endif %}>OSDS</option>
                            <option value="SGOD" {% if session['office'] == "SGOD" %}selected{% endif %}>SGOD</option>
                            <option value="CID" {% if session['office'] == "CID" %}selected{% endif %}>CID</option>
                            <option value="Accounting" {% if session['office'] == "Accounting" %}selected{% endif %}>Accounting</option>
                            <option value="Accounting-PAU" {% if session['office'] == "Accounting-PAU" %}selected{% endif %}>Accounting PAU</option>
                            <option value="Admin" {% if session['office'] == "CID" %}selected{% endif %}>Admin</option>
                            <option value="ALS" {% if session['office'] == "ALS" %}selected{% endif %}>ALS - Alternative Learning Sytstem</option>
                            <option value="BAC" {% if session['office'] == "BAC" %}selected{% endif %}>BAC</option>
                            <option value="Budget" {% if session['office'] == "Budget" %}selected{% endif %}>Budget</option>
                            <option value="EF" {% if session['office'] == "EF" %}selected{% endif %}>EF - Education Facilities</option>
                            <option value="Health" {% if session['office'] == "Health" %}selected{% endif %}>Health</option>
                            <option value="HRD" {% if session['office'] == "HRD" %}selected{% endif %}>HRD - Human Resource Development</option>
                            <option value="ICT" {% if session['office'] == "ICT" %}selected{% endif %}>ICT</option>
                            <option value="Legal" {% if session['office'] == "Legal" %}selected{% endif %}>Legal</option>
                            <option value="LR" {% if session['office'] == "LR" %}selected{% endif %}>LR</option>
                            <option value="ASDS" {% if session['office'] == "ASDS" %}selected{% endif %}>Office of the ASDS</option>
                            <option value="SDS" {% if session['office'] == "SDS" %}selected{% endif %}>Office the SDS</option>
                            <option value="Payroll" {% if session['office'] == "Payroll" %}selected{% endif %}>Payroll</option>
                            <option value="Personnel" {% if session['office'] == "Personnel" %}selected{% endif %}>Personnel</option>
                            <option value="Planning & Research" {% if session['office'] == "PNR" %}selected{% endif %}>Planning & Research</option>
                            <option value="PSDS" {% if session['office'] == "PSDS" %}selected{% endif %}>PSDS</option>
                            <option value="Records" {% if session['office'] == "Records" %}selected{% endif %}>Records</option>
                            <option value="SMME" {% if session['office'] == "SMME" %}selected{% endif %}>SMME</option>
                            <option value="SMN" {% if session['office'] == "SMN" %}selected{% endif %}>SMN</option>
                            <option value="Supply" {% if session['office'] == "Supply" %}selected{% endif %}>Supply</option>
                            class="form-control mx-2" required>
                    </div> -->
    
                <div class="form-group">
                    <label for="salary">Salary: </label>
                    <input type="number" id="salary" name="salary" value="{{ session['salary'] }}"
                        class="form-control mx-3" required>
                </div>
                <button type="submit" class="btn btn-danger">Update Info</button>
            </form>
        </div>
        <div class="btn-group">
            <a href="{{ url_for('applications_dashboard') }}" class="btn btn-custom">Submit Application</a>
            <a href="{{ url_for('document_tracker') }}" class="btn btn-custom">Submit Documents</a>
            <a href="{{ url_for('change_password_user') }}" class="btn btn-warning">Change Password</a>
        </div>
    </div>

    <!-- <div class="d-flex"> -->
        <!-- Sidebar with Chatbox on the left -->
        <!-- <div id="sidebar" class="col-md-3">
            <div id="chat-container">
                <div id="chat-header">Group Chat</div>
                <div id="chat-messages"></div>
                <div id="chat-input">
                    <input type="text" id="messageInput" placeholder="Type a message..." />
                    <button onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div> -->

    <!-- Tab Navigation -->
    <div class="container-fluid">
        <ul class="nav nav-tabs" id="applicationTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="summary-tab" data-toggle="tab" href="#summary" role="tab"
                    aria-controls="summary" aria-selected="true">Summary</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="cto-tab" data-toggle="tab" href="#cto" role="tab" aria-controls="cto"
                    aria-selected="false">CTO Applications</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="leave-tab" data-toggle="tab" href="#leave" role="tab" aria-controls="leave"
                    aria-selected="false">Leave Applications</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="travel-tab" data-toggle="tab" href="#travel" role="tab" aria-controls="travel"
                    aria-selected="false">Travel Authorities</a>
            </li>
        </ul>

        <div class="tab-content" id="applicationTabsContent">

            <!-- Summary Tab -->
            <div class="tab-pane fade show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                <div class="card">
                    <div class="card-body">
                        <h4>Applications for Leave, CTO, and Travel Order Summary</h4>
                        <p>Pending: <span id="pendingCount">0</span></p>
                        <p>Recommended: <span id="recommendedCount">0</span></p>
                        <p>Approved: <span id="approvedCount">0</span></p>
                        <p>Rejected: <span id="rejectedCount">0</span></p>
                    </div>
                </div>
            </div>

            <!-- CTO Applications Tab -->
            <div class="tab-pane fade" id="cto" role="tabpanel" aria-labelledby="cto-tab">
                <div class="table-container">
                    <table id="ctoTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Days</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in cto_applications %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>
                                    {% if application[7] == 'Approved' %}
                                    Approved
                                    {% elif application[7] == 'Rejected' %}
                                    Rejected
                                    {% elif application[6] == 'Recommended' %}
                                    Recommended
                                    {% else %}
                                    Pending
                                    {% endif %}
                                </td>
                                <td>
                                    {% if application[7] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="cto">Cancel</button>
                                    {% endif %}
                                    {% if application[7] != 'Rejected' %}
                                    <a href="{{ url_for('download_application', app_type='cto', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                    {% endif %}
                                </td>
                                <td>{{ application[8] }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Leave Applications Tab -->
            <div class="tab-pane fade" id="leave" role="tabpanel" aria-labelledby="leave-tab">
                <div class="table-container">
                    <table id="leaveTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Days</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Type of Leave</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in leave_applications %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>{{ application[6] }}</td>
                                <td>
                                    {% if application[8] == 'Approved' %}
                                        Approved
                                    {% elif application[8] == 'Rejected' %}
                                        Rejected
                                    {% elif application[7] == 'Recommended' %}
                                        Recommended
                                    {% else %}
                                        Pending
                                    {% endif %}
                                </td>                              
                                <td>
                                    {% if application[8] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="leave">Cancel</button>
                                    {% endif %}
                                    {% if application[8] != 'Rejected' %}
                                    <a href="{{ url_for('download_application', app_type='leave', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                    {% endif %}
                                </td>                             
                                <td>{{ application[9] }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="tab-pane fade" id="travel" role="tabpanel" aria-labelledby="travel-tab">
                <div class="table-container">
                    <table id="travelTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Purpose</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Destination</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for application in travel_authorities %}
                            <tr>
                                <td>{{ application[1] }}</td>
                                <td>{{ application[2] }}</td>
                                <td>{{ application[3] }}</td>
                                <td>{{ application[4] }}</td>
                                <td>{{ application[5] }}</td>
                                <td>{{ application[6] }}</td>
                                <td>
                                    {% if application[8] == 'Approved' %}
                                    Approved
                                    {% elif application[8] == 'Rejected' %}
                                    Rejected
                                    {% elif application[7] == 'Recommended' %}
                                    Recommended
                                    {% else %}
                                    Pending
                                    {% endif %}
                                </td>
                                <td>
                                    {% if application[8] != 'Approved' %}
                                    <button class="btn btn-danger btn-sm btn-cancel" data-id="{{ application[0] }}"
                                        data-type="travel">Cancel</button>
                                    {% endif %}
                                    {% if application[8] != 'Rejected' %}
                                    <a href="{{ url_for('download_application', app_type='travel', app_id=application[0]) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-save"></i>
                                    </a>
                                    {% endif %}

                                </td>         
                                <td>{{ application[9] }}</td>                
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

<!-- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -->
<!-- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -->
<!-- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -- DOCUMENT TRACKER -->

    <div class="container-fluid">
        <ul class="nav nav-tabs" id="applicationTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="track-tab" data-toggle="tab" href="#track" role="tab" aria-controls="track" aria-selected="true">Document Tracker</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="docsub-tab" data-toggle="tab" href="#submitted" role="tab" aria-controls="submitted" aria-selected="false">Documents Submitted</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="docrec-tab" data-toggle="tab" href="#received" role="tab" aria-controls="received" aria-selected="false">
                    <span class="tab-label-container">
                        Documents Received
                        <span id="notification-badge" class="badge badge-danger" style="display: none; margin-left: 5px;">New</span>
                    </span>
                </a>
            </li>
        </ul>
        <div class="tab-content" id="applicationTabsContent">
            <div class="tab-pane fade show active" id="track" role="tabpanel" aria-labelledby="track-tab">
                <div class="card">
                    <div class="card-body">
                        <h4>Document Tracker Summary</h4>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Summary</th>
                                    <th>Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Number of Documents Submitted</td>
                                    <td id="numSubmitted">0</td>
                                </tr>
                                <tr>
                                    <td>Number of Documents Received</td>
                                    <td id="numReceived">0</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Documents Submitted Table -->
            <div class="tab-pane fade" id="submitted" role="tabpanel" aria-labelledby="docsub-tab">
                <div class="table-container">
                    <h4>Documents Submitted</h4>
                    <table id="submittedDocumentsTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th class="wrap">Cancel/ Completed</th>
                                <th class="wrap">Forwarded To</th>
                                <th class="wrap">To Office</th>
                                <th>Document</th>
                                <th>Forwarding History</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for doc in submitted_documents %}
                            <tr>
                                <td>
                                    <button class="btn btn-danger btn-sm btn-delete" data-id="{{ doc[0] }}">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                                <td class="wrap">{{ doc[2] }}</td>
                                <!-- <td class="wrap">{{ forwarded_to_offices[doc[2]] }}</td>  -->
                                <td class="wrap">{{ doc[3] }}</td>
                                <td></small>Document Type: {{ doc[1] }}<br></small>Details: {{ doc[4] }}</small><br><small>Created at: {{ doc[5] }}</small></td>
                                    <td>
                                        <button type="button" class="btn btn-secondary" data-toggle="tooltip" title="
                                            {% if forwarding_histories[doc[0]] %}
                                                {% for history in forwarding_histories[doc[0]] %}
                                                    Forwarded To: {{ history[1] }}<br>Forwarded by: {{ history[0] }}<br>Comments: {{ history[2] }}<br>At: {{ history[3] }}<hr>
                                                {% endfor %}
                                            {% else %}
                                                No forwarding history.
                                            {% endif %}
                                        ">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </td>                                    
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Documents Received Table -->
            <div class="tab-pane fade" id="received" role="tabpanel" aria-labelledby="docrec-tab">
                <div class="table-container">
                    <h4>Documents Received</h4>
                    <table id="receivedDocumentsTable" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Division</th>
                                <th>Office</th>
                                <th>Document Type</th>
                                <th>Details</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for doc in received_documents %}
                            <tr>
                                <td>{{ doc[1] or 'N/A' }}</td>
                                <td>{{ doc[2] or 'N/A' }}</td>
                                <td>{{ doc[3] or 'N/A' }}</td>
                                <td>{{ doc[4] or 'N/A' }}</td>
                                <td>{{ doc[5] or 'N/A' }}</td>
                                <td>{{ doc[7] or 'N/A' }}</td>
                                <td>
                                    <form action="{{ url_for('forward_document') }}" method="POST">
                                        <input type="hidden" name="document_id" value="{{ doc[0] }}">
                                        <button type="submit" class="btn btn-primary">Forward Document</button>
                                    </form>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>


<!-- SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS  SCRIPTS   -->
<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Get the length of received documents from the template variable
        const receivedDocuments = parseInt("{{ received_documents|length }}", 10);
        if (receivedDocuments > 0) {
            document.getElementById("notification-badge").style.display = "inline";
        }
    });
</script>
        <script>
            $(document).ready(function() {
                $('.btn-delete').on('click', function () {
                    var documentId = $(this).data('id');
                    var row = $(this).closest('tr'); // Get the table row to remove
            
                    if (confirm("Are you sure you want to delete this document entry?")) {
                        $.ajax({
                            url: `/delete_document/${documentId}`,
                            method: "POST",
                            success: function (response) {
                                if (response.success) {
                                    alert("Document entry successfully deleted");
                                    row.remove(); // Remove the row from the table without reloading
                                } else {
                                    alert("Error: " + response.error);
                                }
                            },
                            error: function () {
                                alert("There was an error deleting the document entry.");
                            }
                        });
                    }
                });
            });            
        </script>
        
        <script src="path/to/jquery.js"></script>
        <script src="path/to/bootstrap.js"></script>
        <script>
            $(document).ready(function() {
                // Your JavaScript/jQuery code to handle tab functionality and any other interactive elements.
            });
        </script>

                </tbody>
            </table>

    <!-- Bootstrap JS, Popper.js, and jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        $(document).ready(function () {
            $('.btn-cancel').on('click', function () {
                var applicationId = $(this).data('id');
                var type = $(this).data('type');

                if (confirm("Are you sure you want to cancel this application?")) {
                    $.ajax({
                        url: `/cancel_application/${applicationId}/${type}`,
                        method: "POST",
                        success: function (response) {
                            alert("Application cancelled successfully");
                            location.reload();
                        },
                        error: function () {
                            alert("There was an error cancelling the application.");
                        }
                    });
                }
            });
        });

        
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Function to count applications based on their status
            function countApplicationsByStatus(status) {
                let count = 0;
                document.querySelectorAll("td").forEach(td => {
                    if (td.textContent.trim() === status) {
                        count++;
                    }
                });
                return count;
            }
  
            // Update the summary counts for Pending, Recommended, and Approved
            document.getElementById("pendingCount").textContent = countApplicationsByStatus("Pending");
            document.getElementById("recommendedCount").textContent = countApplicationsByStatus("Recommended");
            document.getElementById("approvedCount").textContent = countApplicationsByStatus("Approved");
            document.getElementById("rejectedCount").textContent = countApplicationsByStatus("Rejected");
        });
    </script>

    <script>
        $(document).ready(function(){
        $('[data-toggle="tooltip"]').tooltip({
            html: true,
            trigger: 'hover'
        });
    });
    </script>
    <script>
        const officeOptions = {
            OSDS: ["Accounting", "Admin", "Budget", "ICT", "Legal", "Office of the ASDS", "Office of the SDS", "Payroll", "Personnel", "Records"],
            SGOD: ["Education Facilities", "Health", "HRD", "Planning & Research", "SGOD", "SMME", "SMN"],
            CID: ["ALS", "CID", "LR", "PSDS"]
        };

        function filterOffices() {
            const division = document.getElementById('division').value;
            const officeSelect = document.getElementById('office');
            officeSelect.innerHTML = '<option value="">Select Office</option>'; // Reset options

            if (division && officeOptions[division]) {
                officeOptions[division].forEach(office => {
                    const option = document.createElement('option');
                    option.value = office;
                    option.textContent = office;
                    officeSelect.appendChild(option);
                });
            }

            // Set the selected office from the session
            const selectedOffice = "{{ session['office'] }}";
            if (selectedOffice) {
                officeSelect.value = selectedOffice;
            }
        }

        // Call filterOffices on page load to set the correct options
        window.onload = function() {
            filterOffices();
        };
    </script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                function updateDocumentCounts() {
                    const submittedCount = document.querySelectorAll('#submittedDocumentsTable tbody tr').length;
                    const receivedCount = document.querySelectorAll('#receivedDocumentsTable tbody tr').length;
    
                    document.getElementById('numSubmitted').textContent = submittedCount;
                    document.getElementById('numReceived').textContent = receivedCount;
                }
    
                updateDocumentCounts();
            });
        </script>


</html>

{% endblock %}


File: view_users.html (in W:\warm-hollows-62602\templates)
{% extends "base.html" %}

{% block content %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Submission App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
       
    <div class="container mt-5">
        <h2 class="mb-4 text-center">User Management</h2>

        <!-- Search Field -->
        <form method="GET" action="{{ url_for('view_users') }}" class="form-inline mb-4">
            <input type="text" name="search" class="form-control mr-2" placeholder="Search by Name or Username" value="{{ request.args.get('search', '') }}">
            <button type="submit" class="btn btn-primary">Search</button>
        </form>

        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered shadow-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>Employee ID</th>
                        <th>Name</th>
                        <th>Position</th> 
                        <th>Division</th>
                        <th>Office</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in users %}
                    <tr>
                        <td>{{ user[1] }}</td>
                        <td>{{ user[2] }}</td>
                        <td>{{ user[3] }}</td>
                        <td>{{ user[6] }}</td>
                        <td>{{ user[5] }}</td>
                        <td>{{ user[4] }}</td>
                        <td>
                            {% if user[2] != 'Admin' %}
                            <a href="{{ url_for('edit_user', user_id=user[0]) }}" class="btn btn-info btn-sm">Edit</a>                       
                            <a href="{{ url_for('change_password', user_id=user[0]) }}" class="btn btn-warning btn-sm mt-1">Change Password</a>
                            <form action="{{ url_for('delete_user', user_id=user[0]) }}" method="post" class="d-inline-block mt-1" onsubmit="return confirm('Are you sure you want to delete this user and all their data?');">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </form>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <nav aria-label="User Pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if page > 1 %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page-1) }}" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
                {% endif %}
                {% for p in range(1, total_pages+1) %}
                <li class="page-item {% if p == page %}active{% endif %}">
                    <a class="page-link" href="{{ url_for('view_users', page=p) }}">{{ p }}</a>
                </li>
                {% endfor %}
                {% if page < total_pages %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('view_users', page=page+1) }}" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
                {% endif %}
            </ul>
        </nav>

        <!-- Letter Indexes -->
        <div class="letter-indexes mt-4 text-center">
            {% for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' %}
            <a href="{{ url_for('view_users', letter=letter) }}" class="btn btn-outline-primary">{{ letter }}</a>
            {% endfor %}
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

{% endblock %}


